<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网络编程 — Socket编程与IO模型</title>
    <link href="/2021/09/15/socket-and-io/"/>
    <url>/2021/09/15/socket-and-io/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面的两小节，我们介绍了网络的基础知识包括一些网络模型和协议。我们常说Talk is cheap, show me code.这一小节我们将解锁Socket网络编程，通过Socket来编写简单一些简单的网络小程序。我很早之前就接触过Socket网络编程，也能写一些简单的程序，但是始终感觉socket离我很遥远，不清楚socket到底是什么以及socket是如何工作的。如果你也有和我一样的疑问，通过这一小节的梳理让我们一起搞懂socket，解锁socket技能点。在编写完socket程序之后，我们还会思考如何提高我们socket网络程序的处理吞吐量连接数，并且引入我们的IO模型，深入理解几种常见的IO模型。</p><h1 id="什么是Socket"><a href="#什么是Socket" class="headerlink" title="什么是Socket"></a>什么是Socket</h1><p>Socket这个名字很有意思，在很多书中翻译为套接字，我以前看到套接字总是感觉很陌生难以理解。Socket在英语中是插座，插槽的意思。我们写的Socket虽然是代码，但是可以想象成<strong>我们的服务端和客户端中间有“一根网线并且两头有插座”</strong>。我们的程序只要适配这个插座，两个端之间就可以相互通信了，而这个“插座”就是我们的Socket。Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。这一层加入到我们的网络模型后的效果如下图所示。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210909015223.png"></p><p>在上面的图中不难看出Socket接口是位于传输层上方的一个中间层，<strong>通过这个中间层提供的接口，Java应用可以进行网络通信</strong>，这也体现了“socket插座”的字面意思。</p><h1 id="代码示例以及调用过程"><a href="#代码示例以及调用过程" class="headerlink" title="代码示例以及调用过程"></a>代码示例以及调用过程</h1><p>我们常说talk is chep，show me code。在这个部分，将使用Socket实现一个HTTP服务器，还会用Scoket实现一个互相通信的Server和Client。从代码的角度看看socket是怎么操作对接上下层，分析在TCP下和UDP下Socket的调用处理逻辑。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>以下是使用Socket实现的一个简单的HTTP服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.daiwei.socket.http;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by Daiwei on 2021/9/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpServer</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">8081</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            Socket socket = serverSocket.accept();<br>            service(socket);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * socket 处理服务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> socket </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(Socket socket)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String body = <span class="hljs-string">&quot;hello socket&quot;</span>;<br>            StringBuilder response = <span class="hljs-keyword">new</span> StringBuilder();<br>            response.append(<span class="hljs-string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>)<br>                    .append(<span class="hljs-string">&quot;Content-Length: &quot;</span>).append(body.getBytes().length).append(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>                    .append(<span class="hljs-string">&quot;Content-Type: text/plain; charset-utf-8\r\n&quot;</span>)<br>                    .append(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>                    .append(body).append(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            OutputStream outputStream = socket.getOutputStream();<br>            outputStream.write(response.toString().getBytes());<br>            outputStream.flush();<br><br>            socket.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>wrk</code>进行简单的压测，可以得到以下的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">daiwei@daiweideMacBook-Pro ~ % wrk -t2 -c10 -d10s http://localhost:8081<br>Running 10s <span class="hljs-built_in">test</span> @ http://localhost:8081<br>  2 threads and 10 connections<br>  Thread Stats   Avg      Stdev     Max   +/- Stdev<br>    Latency     2.59ms   14.88ms 213.08ms   96.55%<br>    Req/Sec     9.91k     2.65k   11.99k    87.50%<br>  192565 requests <span class="hljs-keyword">in</span> 10.03s, 16.90MB <span class="hljs-built_in">read</span><br>  Socket errors: connect 0, <span class="hljs-built_in">read</span> 191661, write 903, timeout 0<br>Requests/sec:  19192.30<br>Transfer/sec:      1.68MB<br></code></pre></td></tr></table></figure><p>我们还可以使用Socket实现客户端和服务端间简单的通行，以下的代码是客户端client向服务端server连接并发送一段message。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.daiwei.socket.app;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by Daiwei on 2021/9/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SocketAppServer</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">8888</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(port);<br>            System.out.println(<span class="hljs-string">&quot;server is running and listening at &quot;</span> + port);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                Socket socket = serverSocket.accept();<br>                InputStream is = socket.getInputStream();<br>                BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(is));<br>                String res;<br>                <span class="hljs-keyword">while</span> ((res= bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;message checked from [&quot;</span> + res + <span class="hljs-string">&quot;]&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">package</span> com.daiwei.socket.app;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by Daiwei on 2021/9/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SocketAppClient</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            socketSendMsg(<span class="hljs-string">&quot;hello server of &quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过socket 发送消息到server端</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">socketSendMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br>            OutputStream outputStream = socket.getOutputStream();<br>            PrintWriter printWriter = <span class="hljs-keyword">new</span> PrintWriter(outputStream);<br>            printWriter.write(msg);<br>            printWriter.flush();<br><br>            printWriter.close();<br>            outputStream.close();<br>            socket.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Socket调用过程分析"><a href="#Socket调用过程分析" class="headerlink" title="Socket调用过程分析"></a>Socket调用过程分析</h2><p>在上面的代码中我们也不难发现，socket建立的连接的参数是非常简洁的，客户端只需要提供一个目标主机IP和端口号，服务端则需要提供一个服务监听的端口号即可。socket编程进行是端到端的通行。承接上面的应用层，对接下面的传输层和网络层。针对网络层，socket需要指定是<code>IPv4</code>还是<code>IPv6</code>。分别对应这实现类<code>java.net.Inet4Address</code>和<code>java.net.Inet6Address</code>。我们前面提到过，TCP协议是基于数据流的而UDP是基于数据报的。在socket源码中有以下的一个私有构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Socket</span><span class="hljs-params">(SocketAddress address, SocketAddress localAddr, </span></span><br><span class="hljs-function"><span class="hljs-params">               <span class="hljs-keyword">boolean</span> stream)</span> <span class="hljs-keyword">throws</span> IOException </span><br></code></pre></td></tr></table></figure><p>其中当参数stream设置为<code>true</code>时，当前socket使用则是TCP协议，反正则为UDP协议。但是我发现调用这个构造的<strong>未被废弃</strong>的方法stream参数都是true。这就意味着我们创建的socket都是基于TCP的。有两个<strong>废弃了</strong>的构造方法可以传入stream参数指定使用UDP协议。并且在注释中可以发现以下一段说明。</p><blockquote><p>If UDP socket is used, TCP/IP related socket options will not apply.</p><p>Deprecated Use DatagramSocket instead for UDP transport.</p><p>-–</p><p>如果使用UDP socket被使用，那么TCP/IP有关的一些socket配置参数将不生效，</p><p>废弃使用数据报文Socket代替UDP数据传输。</p></blockquote><h3 id="基于TCP协议的调用过程分析"><a href="#基于TCP协议的调用过程分析" class="headerlink" title="基于TCP协议的调用过程分析"></a>基于TCP协议的调用过程分析</h3><p>两端创建了socket之后，接下来的过程中，TCP和UDP稍有不同。TCP的服务端要监听一个端口，一般是先调用<code>bind()</code>函数，给这个socket赋予一个IP地址和端口。为什么需要端口？当一个数据包到达后，内核要通过TCP头的端口号找到这个数据包所属的应用程序。如果一台机器有多个IP地址，我们可以选择监听所有网卡，也可以监听一个网卡（监听<code>0.0.0.0</code>即可监听所有网卡）。当服务端有了IP和端口号，就可以调用<code>listen()</code>函数进行监听。在TCP的状态图里面，有一个<code>listen</code>状态，当调用这个函数之后，服务端就进入了这个状态。这个时候客户端就可以发起连接。接下来，服务端调用<code>accept()</code>函数，拿出一个已经完成连接进行处理。</p><blockquote><p>在内核中，为每个socket维护两个队列，一个是已经建立了连接的队列，这时候连接三次握手已经完成，处于<code>establish</code>状态；一个是还没有完全建立连接的队列，这个时候三次握手还没完成，处于<code>syn_rcvd</code>的状态。</p></blockquote><p>在服务端等待过程中，客户端可以通过<code>connect</code>函数发起连接。先在参数中要明确连接的IP地址和端口号，然后发起三次握手。内核会给客户端分配一个临时的端口。一旦握手成功，服务端的<code>accept</code>就会返回另一个socket。</p><blockquote><p>用来监听的socket和真正用来传数据的socket是两个，一个叫做<strong>监听socket</strong>，一个叫做<strong>已经连接socket</strong>。</p><p>客户端：</p><p><code>scoket()</code> -&gt; 创建<code>active_socket_fd</code>（<code>client_socket_fd</code>）</p><p><code>bind()</code> -&gt; 把<code>active_socket_fd</code>与<code>ip, port</code>绑定起来。</p><p><code>connect()</code> -&gt; <code>client_socket_fd</code>主动请求服务端的<code>listen_socket_fd read()/write()</code> -&gt; 读/写<code>socket io close()</code> -&gt; 关闭<code>socket_fd</code></p><p>服务端：</p><p><code>socket()</code> -&gt; 创建<code>active_socket_fd</code></p><p><code>bind()</code> -&gt; 把<code>active_socket_fd</code>与<code>ip, port</code>绑定起来</p><p><code>listen()</code> -&gt;  <code>active_socket_fd</code> -&gt; <code>listen_socket_fd</code> 等待客户端的<code>client_socket_fd</code>来请求连接。</p><p><code>accept()</code> -&gt; <code>listen_socket_fd</code> -&gt; <code>connect_socket_fd</code> 把监听socket转变为连接socket，用于建立连接通道的数据读写。</p><p><code>read()/write()</code> -&gt; 读/写 <code>socket io close()</code> -&gt; 关闭<code>socket_fd</code></p><p>为什么需要两种状态的socket？</p><p>现在的网络程序中是C/S结构，一般是客户端主动向服务端请求建立连接。这个过程中，主要涉及两个状态，一个是主动一个是被动的。因此，客户端的socket只用于主动服务端的socket请求建立连接，服务器端的socket一直被动的等待客户端的请求连接就ok了。所以这就解答了为什么需要两种状态的socket，<strong>只有一个方是主动的，另一方是被动的才能完成上述操作，如果双方都是主动或是被动的，就完成不了上面的过程。</strong></p></blockquote><p>在成功建立连接之后，双方开始通过<code>read()</code>和<code>write()</code>函数来读写数据，就像是往一个文件流里面写东西一样。下面的图就是基于TCP的socket程序函数调用过程。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210911133549.png"></p><p><strong>说TCP的socket就是一个文件流，是非常准确的。因为socket在Linux中是以文件的形式存在的。</strong>除此之外，还存在文件描述符。写入和读出，也是通过文件描述符。在内核中，<strong>socket是一个文件，那对应的就有文件描述符</strong>。每一个进程都有一个数据结构<code>task_struct</code>，里面指向一个文件描述符数组。来列出这个进程打开的所有文件的文件描述符。<strong>文件描述符是一个整数，是这个数组的下标</strong>。其中数组的内容是一个指针，值向内核中所有打开的文件的列表，既然是一个文件，就会有一个inode，只不过Socket对应的inode保存在内存中，而不是像真正的文件系统保存在硬盘上。在这个inode中，指向Socket在内核中的Socket结构。在这个结构中，主要有两个队列，<strong>一个是发送队列，一个是接收队列</strong>。在这两个队列里面保存的是一个缓存<strong>sk_buff</strong>。这个里面能看到完整的包结构。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210911135127.png"></p><h3 id="基于UDP协议的调用过程分析"><a href="#基于UDP协议的调用过程分析" class="headerlink" title="基于UDP协议的调用过程分析"></a>基于UDP协议的调用过程分析</h3><p>对于UDP来讲，过程有一些不一样。<strong>UDP是没有连接的，所以不需要三次握手</strong>，也就不需要调用 listen 和 connent，但是UDP的交互仍然需要IP和端口号，因而也需要<code>bind</code>操作。UDP是没有维护连接状态的，因而<strong>不需要每队连接都建立一组Socket</strong>，而是只要一个Socket就能够和多个客户端通行。也正是因为没有连接状态，每次通信的时候，都调用<code>sendto</code>和<code>recvfrom</code>，都可以传入IP地址和端口，下图内容就是基于UDP协议的Socket函数调用过程。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210911171040.png"></p><h2 id="更多的连接"><a href="#更多的连接" class="headerlink" title="更多的连接"></a>更多的连接</h2><p>在完成上述的调用过程分析之后，我们可以用socket写出一个网络交互的程序了。在我们生产环境中，我们往往要服务要接入很多的服务。在上面的代码中，我们服务端通过<code>accept()</code>监听socket连接，当客户端的socket连接后。双方进行连接服务器处理逻辑然后将结果通过socket写回客户端。这个过程中，服务端只能处理这一个连接，不能处理其他的socket连接，其他的socket连接只能排队等待处理，这样的处理模式很明显是不能满足我们的期望。</p><p>在我们尝试提升连接数之前，我们先计算下理论值，也就是最大连接数。系统会使用一个四元组来标识唯一一个TCP连接。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">&#123;本机<span class="hljs-built_in">IP</span>，本机端口PORT : 对端<span class="hljs-built_in">IP</span>，对端端口PORT&#125;<br></code></pre></td></tr></table></figure><p>服务器通常固定在某个本地端口上监听，等待客户端的连接请求。因此服务端TCP连接四元组中只有对端IP，也就是客户端的IP和对端的端口。因此<strong>最大TCP连接数=对端IP * 对端端口数</strong>。对IPv4，客户端的IP数最多为2^32。客户端的端口数最多为2^16，也就是服务端单机最大TCP连接数为2^48。这只是理论值，实际上并不会有这么多连接数。其中<strong>最大的限制是文件文件描述符</strong>。我们前面分析过socket都是文件，所以首先要通<code>ulimit</code>配置文件描述符的数量。其次系统内存的限制，按照上面的分析，每个TCP连接都需要<strong>占用一定的内存，内存资源也是有限</strong>的。在有限的资源限制下，连接尽可能多的客户端。我们可以从以下四个方式去优化：</p><ul><li><strong>多进程方式</strong>，如果监听到有新的请求进来就创建一个子进程，然后将基于已经连接socket交给这个新的进程来处理。</li></ul><blockquote><p>在Linux下，使用fork函数创建子进程。<strong>在父进程的基础上完全拷贝一个子进程</strong>。在Linux内核中，会复制文件描述符列表，也会复制内存空间，还会复制一条记录当前执行到了哪一行程序的进程。在复制完成后，父子进程几乎一摸一样，只是根据fork的返回值来区分是父进程还是子进程。如果返回0则是子进程，其他整数则是父进程。</p></blockquote><ul><li><p><strong>多线程方式</strong>，我们很容易就容易想到使用多线程的方式提升性能。相较于进程来说。线程轻量的多。在linux下，通过pthread_create创建一个线程，也是调用do_fork。不同的是，虽然新的线程在task列表会新创建一项，但是很多资源都是可以共享，比进程方式轻量的多。新的连接可以通过多线程的方式快速处理，从而避免监听线程被阻塞。但是如果是一个台机器要维护1万个连接，就要创建1万个进程或者线程，操作系统是无法承受的，这也就是C10K问题。</p></li><li><p><strong>IO多路复用，一个线程维护多个socket</strong>，由于socket是文件描述符，某个线程轮训所有的socket都放在一个文件集合fd_set中。调用<code>select</code>函数来监听文件描述符在fd_set对应的卫视都设为1，标识socket可读或可写，从而可以进行读写操作，然后再调用select继续轮训下去。</p></li><li><p><strong>事件驱动IO</strong>，上面select函数还是存在问题，因为每次socket所在的文件描述符集合中有socket发生变化的时候，都需要通过轮询的方式，也就是需要将全部的项目都过一遍的方式查看进度，这大大影响了一个项目组能支撑的最大项目数量。因为使用select，能够同时查询的项目数量由<code>FD_SETSIZE</code>限制。如果改成事件通知的方式，从原来主动去查询socket的状态到被动通知socket可读或可写，性能将极大提升。也就是我们经常提到的<code>epoll</code>函数。在Linux内核中的实现不是通过轮训的方式，而是通过<strong>注册callback函数的方式</strong>，当某个文件描述符号发生变化的时候，就会主动通知。</p></li></ul><blockquote><p>事件驱动IO使得监听Socket数量增加，但是效率不会大幅降低，能同时监听的Socket的数量也非常多，上限就为系统定义的、进程打开的最大文件表述符个数。因而，<strong>epoll被称为解决C10K问题的利器。</strong></p></blockquote><h1 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h1><p>我们梳理网络的过程中必然会介绍网络模型。因为网络通信也是最常见的输入输出IO之一。在计算机世界中，我们将输入输出过程高度抽象可以描述为这样一个过程，即通过外部条件或数据的输入，然后经过系统的逻辑处理之后产生新的结果并将其输出。IO模型描述的计算机世界输入和输出经过的抽象模型。</p><h2 id="五种IO模型概述"><a href="#五种IO模型概述" class="headerlink" title="五种IO模型概述"></a>五种IO模型概述</h2><p>我们熟知的IO有阻塞，非阻塞，同步，异步这几种类型。依据这几种类型我们可以划分出五种IO模型。他们分别为<code>阻塞IO(BIO)</code>、<code>非阻塞IO(NIO)</code>、<code>多路复用IO(multiplexing IO)</code>、<code>信号驱动IO(signal-driven IO)</code>、<code>异步IO(AIO)</code>。每一种IO都有他们的使用场景和优势，以下这张图各个IO和阻塞非阻塞，同步异步之间的关系。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210915224859.png"></p><p>我们不难发现这些IO模型中，绝大多数都是同步的，只有异步模型是异步的。在深入梳理每一种IO模型之前，我们要先明确模型中阻塞和同步的定义。</p><blockquote><p>I/O 操作分为两个部分：</p><ol><li>数据准备，将数据加载到内核缓存。（数据加载到操作系统）</li><li>将内核缓存中的数据数据加载到用户缓存（从操作系统复制到应用中）</li></ol></blockquote><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210915005311.png"></p><p>异步同步的概念描述的是用户线程和内核线程之间的交互方式，而阻塞和非阻塞描述的是用户线程调用内核IO的操作方式。同时只有同步才有阻塞和非阻塞之分。</p><p>阻塞IO和非阻塞IO的区别：</p><p><strong>第一步发起IO请求是否会被阻塞</strong>，如果阻塞知道完成就是传统的阻塞IO，如果不阻塞那就是非阻塞IO。</p><p>同步IO和异步IO的区别：</p><p><strong>第二步是否阻塞</strong>，而<strong>操作系统帮你做完IO操作再将结果返回</strong>，那就是异步IO。</p><p>我们说的阻塞和非阻塞要分场和范围，从根本上来说阻塞是进程“被休息”，<strong>CPU处理其他进程，而这里的非阻塞IO可以理解为将大的整片时间阻塞分成N多小的阻塞</strong>，进程依然可以获得CPU执行时间，同时CPU也可以处理其他进程。对于Linux来说，阻塞IO还是要比非阻塞IO好，因为<strong>CPU仍然有很大几率因socket没有数据而空转</strong>，从整体机器性能开销上来看这样的浪费更大。所以多路复用IO中的Selector.select() 函数还是阻塞的，因此这里把多路复用IO仍然划分为阻塞IO。</p><p><strong>阻塞、非阻塞、多路IO复用，都是同步IO</strong>，异步必定是非阻塞的，所以不存在异步阻塞和异步非阻塞的说法。真正的异步IO需要CPU的深入参与。换句话说，只有用户线程在操作IO的时候根本不用考虑IO的执行全部都交给CPU去完成，而自己只等待一个完成的信号的时候，才是真正的异步IO。所以<strong>拉一个子线程去轮训或使用select、poll、epoll都不是异步。</strong></p><h2 id="阻塞IO模型"><a href="#阻塞IO模型" class="headerlink" title="阻塞IO模型"></a>阻塞IO模型</h2><p>阻塞式IO、BIO，一般通过在 while(true) 循环中服务端会调用<code>accept()</code>方法等待接收客户端的连接的方式监听请求，请求一旦接收到一个连接请求，就可以建立通信套接字上进行读写操作，<strong>此时不能再接入其他客户端的操作执行完成</strong>，不过可以通过多线程来支持多个客户端的连接。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210913011718.png"></p><p>整个执行过程的时序图如下：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210914210845.png"></p><h2 id="非阻塞IO模型"><a href="#非阻塞IO模型" class="headerlink" title="非阻塞IO模型"></a>非阻塞IO模型</h2><p>和阻塞IO类比，内核会立即返回，<strong>返回后获得足够的CPU时间继续做其他的事情</strong>。<strong>用户进程第一阶段不是阻塞的，需要不断的主动循环kernel数据是否准备好;同时第二阶段依旧总是阻塞的</strong>。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210914011754.png"></p><p>非阻塞式IO的执行过程时序图如下：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210914210701.png"></p><h2 id="多路复用IO模型"><a href="#多路复用IO模型" class="headerlink" title="多路复用IO模型"></a>多路复用IO模型</h2><p>IO多路复用（IO multiplexing），也称事件驱动IO（event-driven IO），就是在<strong>单个线程里同时监控多个套接字</strong>，通过<code>select</code>或<code>poll</code>轮询所负责的所有socket，有数据到达了就通知用户线程。<strong>IO复用同非阻塞IO本质一样，不过利用了新的select系统调用</strong>。由内核来负责本来请求进程应该做的轮询操作。看似比本来的请求进程该做的轮询操作。看似比非阻塞IO还多了一个系统调用开销，不过<strong>因为可以支持多路IO，才算提高了效率</strong>。进程先是阻塞在select/poll上，再是<strong>阻塞在读操作的第二个阶段上。</strong></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210914210630.png"></p><p>整个执行过程的时序图如下：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210914215214.png"></p><blockquote><p>select/poll 的几大缺点：</p><ol><li><p>每次调用select都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时很大。（<strong>拷贝大量fd开销大</strong>）。</p></li><li><p>每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多的时很大。（<strong>遍历大量fd开销大</strong>）。</p></li><li><p><strong>select支持的文件描述符(fd)数量太少</strong>，默认1024。</p></li></ol><p>epoll（Linux2.5.44内核中引入，2.6内核正式引入，可被用于代理POSIX select 和 poll系统调用）：</p><ol><li><p><strong>内核与用户空间共享一块内存</strong>。</p></li><li><p><strong>通过回调解决遍历问题</strong>。</p></li><li><p><strong>没有fd限制，可以支撑10w连接</strong>。</p></li></ol><p><strong>可以说select/poll的缺点在epoll上都被优化掉了。</strong></p></blockquote><h2 id="信号驱动IO"><a href="#信号驱动IO" class="headerlink" title="信号驱动IO"></a>信号驱动IO</h2><p>信号驱动IO是非阻塞的IO类型，我们梳理了以上的三种IO模型，除了非阻塞IO模型是非阻塞IO除外，其余的都是阻塞IO，但是非阻塞IO并不代表对CPU资源使用友好，尤其当CPU空转时系统开销可能更大，上面介绍的三种IO类型只有使用了epoll的多路复用IO模型对系统开销最为友好。信号驱动IO模型和使用epoll的多路复用IO模型比较相似，其中他们最大的不同点就是I<strong>O执行的数据准备阶段，信号驱动IO不会阻塞用户进程</strong>。如下图所示，当用户进程需要等待数据的时候，会向内核发送一个信号，然后用户进程继续向下执行。当内核中数据准备完成之后，内核向进程发送一个信号，然后<strong>用户进程从内核态拷贝数据到用户态</strong>，整个IO操作流程结束。我们可以看到在<strong>第一阶段线程数据准备阶段应用并没有阻塞，而第二阶段数据拷贝阶段应用被阻塞</strong>，因此信号驱动IO是<strong>同步非阻塞</strong>IO。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210915003007.png"></p><h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><p>异步IO真正实现了IO全流程的非阻塞，<strong>用户进程发出系统调用后立即返回，内核等待数据处理完成，内核将数据从内核态拷贝到用户进程缓冲区</strong>，然后发送信号通知用户线程IO操作执行完毕（与SIGIO相比，一个是发送信号告诉用户进程数据准备完毕，一个是IO执行完毕）。其中最为典型的是windows IOCP模型。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210915004059.png"></p><p>以上所有的网络模型的梳理与模型示意图，其中在Java中主要使用的有BIO、NIO和多路复用IO。BIO结构简单相较于除AIO以外的其他IO模型只有一次系统调用，在数据库连接等池化IO资源中还是多以BIO为主。Java使用的还是以NIO为主，其中我们后面即将梳理的Netty使用的就是采用epoll模式的多路复用NIO模型。AIO 适用于连接数多且需要长时间连接的场景，再加上AIO系统支持程度有限且底层实现复杂。NIO之前也尝试过AIO，但效果并不是很理想而最终废弃。</p><blockquote><p>之前在群里看到朋友们发的很有意思的Java IO模型比喻总结：</p><p>例子：有一个养鸡的农场，里面养着来自各个农户（Thread）的鸡（Socket），每家农户都在农场中建立了自己的鸡舍（SocketChannel）</p><ol><li><p>BIO：Block IO，每个农户盯着自己的鸡舍，一旦有鸡下蛋，就去做捡蛋处理；</p></li><li><p>NIO：No-BlockIO-单Selector，农户们花钱请了一个饲养员（Selector），并告诉饲养员（register）如果哪家的鸡有任何情况（下蛋）均要向这家农户报告（selectkeys）;</p></li><li><p>NIO：No-BlockIO-多Selector，当农场中的鸡舍(Selector)逐渐增多时，一个饲养员巡视（轮询）一次所需时间就会不断地加长，这样农户知道自己家的鸡有下蛋的情况就会发生较大的延迟。怎么解决呢？没错，多请几个饲养员（多Selector），每个饲养员分配管理鸡舍，这样就可以减轻一个饲养员的工作量，同时农户们可以更快的知晓自己家的鸡是否下蛋了；</p></li><li><p>Epoll模式：如果采用Epoll方式，农场问题应该如何改进呢？其实就是饲养员不需要再巡视鸡舍，而是听到哪间鸡舍(Selector)的鸡打鸣了（活跃连接），就知道哪家农户的鸡下蛋了；</p></li><li><p>AIO：AsynchronousI/O,鸡下蛋后，以前的NIO方式要求饲养员通知农户去取蛋，AIO模式出现以后，事情变得更加简单了，取蛋工作由饲养员自己负责，然后取完后，直接通知农户来拿即可，而不需要农户自己到鸡舍去取蛋。</p></li></ol></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一小节我们从socket编程开始，介绍了什么socket，socket是我们网络编程的一套接口，位于传输层和应用层之间。socket就像他的中文意思“插座”一样，通过编写适配这个“插座”我们的程序就可以“插入网线”实现网通信功能。随后我们写了几个简单的socket程序Demo，并分析了背后的调用过程，其中socket分两种类型，一种是客户端用的socket，服务端用的socketServer。SocketServer通过bind()方法绑定在某个端口上，并且调用accept()方法等待连接。客户端Socket构造时需要传入一个IP地址和端口号，再调用connect方法连接服务端SocketServer，随后开始数据数据传输。这里要注意服务端负责连接的socket和数据传输的socket是两个socket。通过分析源码我们发现socket基本都是基于TCP的，TCP的socket本质就是一个文件流，所以一个服务有多少个连接和fd（文件描述符）的限制有很大的关系。接下来我们梳理了IO模型，我们先是梳理了阻塞与非阻塞，同步与异步的概念。随后我们引入了五种IO模型，它们分别是阻塞IO（BIO）、非阻塞IO（NIO）、多路复用IO、信号驱动IO和异步IO。其中除了异步IO其他都是同步IO。阻塞IO和多路复用IO是阻塞IO，其他都是非阻塞IO，这里要注意的是多路复用IO是阻塞在selector上的，对于应用进程来说是非阻塞的。最后我们详细梳理了这五种IO模型以及部分的时序图，深入对这五个网络模型的理解。以上就是这一小节的全部内容了，接下来我们将开始梳理Java网络编程的“执牛耳框架”Netty。加油加油，冲冲冲。😏</p><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul><li><p><a href="https://www.cnblogs.com/liangjf/p/9900928.html">为什么有监听socket和连接socket,为什么产生两个socket</a></p></li><li><p><a href="https://time.geekbang.org/column/article/9293?cid=100007101">趣谈网络协议</a></p></li><li><p>java 进阶训练营第四课</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>NIO与网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络基础 — 深入理解TCP协议</title>
    <link href="/2021/09/04/network-basic-2/"/>
    <url>/2021/09/04/network-basic-2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面一小节我们介绍了网络模型和一些网络协议，其中最大头TCP协议我们挖了一个坑，这一小节我们来填坑。这一小节我们主要分成三大块，第一部分我们将介绍，TCP的三次握手和四次挥手，通过简单的交互维护一个状态机之后建立一个稳定可靠的连接。我们有了一个稳定的连接，我们还需要数据包地稳定发送和接收。有了上面两个保障之后，如何充分利用网络带宽，成了最后的问题，这里我们介绍了传统算法和BBR算法。梳理完以上这些部分，我相信你对TCP协议会有更加深入的理解，让我们先从TCP的介绍开始吧～</p><h1 id="协议介绍"><a href="#协议介绍" class="headerlink" title="协议介绍"></a>协议介绍</h1><p>传输控制协议（TCP，Transmission Control Protocol）是为了在不可靠的互联网络上提供可靠的端到端的字节流而专门设计的传输层协议，我们前面比喻UDP是一个相信网络链路美好的单纯小朋友，那么TCP就是认识到网络链路的险恶，能保证数据的准确送达并且有各种各样问题处理稳重可靠的成功人士形象。他与UDP协议的简单不可靠相比，TCP提供较为复杂和可靠的连接服务，因此针对TCP的特点，我们可以针对性的关注以下几个方面，以及TCP的解决处理方案。</p><ul><li><p><strong>数据包的顺序问题</strong>（顺序）</p></li><li><p><strong>网络传输过程中的丢包问题</strong>（丢包）</p></li><li><p><strong>连接的维护问题</strong>（连接维护）</p></li><li><p><strong>流量控制问题</strong>（流控）</p></li><li><p><strong>拥塞控制问题</strong>（拥塞控制）</p></li></ul><h1 id="协议头详解"><a href="#协议头详解" class="headerlink" title="协议头详解"></a>协议头详解</h1><p>和UDP一样，我们先看TCP的头部信息，相较于UDP头信息的简单，TCP的头部信息则复杂得多。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210821154115.png"></p><p>这些头部信息含义分析如下：</p><ul><li><p>源端口号：发送网络包的程序端口号。</p></li><li><p>目标端口号：网络包接收方的端口号。</p></li><li><p>序号：<strong>发送方告诉接收方该网络包发送的数据相当于所有发送数据的第几个字节。</strong></p></li><li><p>确认序号（ACK号）：<strong>接收方告诉发送方接收方已经收到了所有数据的第几个字节。</strong>其中ACK是acknowleage的缩写。</p></li><li><p>首部长度：表示头部长度。</p></li><li><p>保留：该字段为保留位，现在还未使用。</p></li><li><p>控制位（6位）：该字段中的每个比特位分别表示以下的通信控制含义。</p></li><li><ul><li>URG：表示使用紧急指针字段有效。</li><li><strong>ACK：表示接收程序数据序号字段有效，一般表示数据已经被接收方收到。</strong></li></ul></li><li><ul><li>PSH：表示通过flush操作发送的数据。</li><li>RST：<strong>强制断开连接，用于异常中断的情况。</strong></li></ul></li><li><ul><li><strong>SYN：发送方和接收方相互确认序号，表示连接操作。</strong></li><li><strong>FIN：表示断开连接。</strong></li></ul></li><li><p>窗口：<strong>接收方告诉发送方窗口大小</strong>（即<strong>无需等待确认可以一起发送的数据量</strong>）。</p></li><li><p>校验和：<strong>用来检查是否出现错误。</strong></p></li><li><p>紧急指针：<strong>表示应急处理的数据位置。</strong></p></li><li><p>选项：除了上面固定的头部字段以外，还可以添加可选字段，但除了连接操作之外，很少使用可选字段。</p></li></ul><h1 id="连接的建立与断开"><a href="#连接的建立与断开" class="headerlink" title="连接的建立与断开"></a>连接的建立与断开</h1><p>我们前面提到<code>IP协议</code>是一个<strong>无状态、无连接、不可靠</strong>的服务，那么位于网络层的TCP协议是如何保证这个连接，我们前面提到了的这里的连接不是物理的连接，是源端和目标端维护保持的状态。通过维护连接的状态，来表示通信双方之间的连接。因此在连接建立的时候TCP要进行特殊的状态处理，连接建立的过程要经过三次通信称为三次握手，连接断开的时候要进行双方要进行四次通信，即四次挥手。</p><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>三次握手的过程并不复杂，就像两个人打招呼一样，只要双方都确认我要和对方说话，并且对方在听我说话就可以开始沟通了。就可以类比成下面的过程：</p><p>A：你好啊👋，B。</p><p>B：嗯？在听呢，你也好啊👋，A。</p><p>A：B，你好你好。🙈</p><p>双方确认对方都在听自己说话之后，两个人就可以开始愉快的沟通了。这个过程我们也常称为“请求 -&gt; 应答 -&gt; 应答之应答”。把这个逻辑翻译成计算机中建立网络的语言就是下面这个过程：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210821175756.png"></p><p>一开始，客户端和服务端都处于<code>CLOSED</code>状态。先是服务端主动监听某个端口，处于<code>LISTEN</code>状态。然后客户端主动发起连接<code>SYN</code>，之后处于<code>SYN-SENT</code>状态，服务端收到发起的连接，返回<code>SYN</code>，并且<code>ACK</code>客户端的<code>SYN</code>，之后处于<code>SYN-RCVD</code>状态。客户端收到服务端发送的<code>SYN</code>和``之后，发送<code>ACK</code>的<code>ACK</code>，之后处于<code>ESTABLISHED</code>状态，因为客户端已经一发一收成功了。服务端收到<code>ACK</code>的<code>ACK</code>之后，处于<code>ESTABLISHED</code>状态，此时服务端也一发一收成功了。在后续的的连接中如果连接空着也没关系，我们在程序中可以开启keepalive，即时没有数据传输，双方也会发送探活空包来保持通信。</p><blockquote><p>这里有一个细节，TCP通过将每个数据包生成一个递增的序号，来解决因为网络通路延迟带来的数据包到达的顺序问题，<strong>接收端只要收到包后按照这个序号进行排序，即可得到数据包正确的顺序</strong>。</p><p>每个数据包都需要返回一个ACK包给接收端，来确认某个数据包已经到达，ACK响应也会带一个响应序号这个序号为<strong>确认包序号+数据包长度+1</strong>，如果发送端在一段时间内没有收到接收方响应的ACK包，发送方就会重新发送一个。<strong>因此通过序号和ACK号，可以确认接收方是否收到了网络包。</strong></p></blockquote><p>为什么是三次握手不是四次？双方只要一发一收（SYN+ACK）成功就可以进入到<code>ESTABLISHED</code>状态，三次交互足够让双方建立一发一收（SYN+ACK），所以再多次的“握手”可以么？可以，但是没必要浪费资源。</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>四次挥手的过程其实也很好理解，类比到我们日常生活中应该是下面这样的场景。</p><p>A：我这边结束了，再见啦👋。</p><p>B：好的，我知道了，我这边还要处理下。</p><p>B：我这边也处理完了，再会👋。</p><p>A：好的，我知道了，再见。</p><p>四次挥手和三次握手不一样，断开连接有四次交互在结束请求接收端，在第一轮通信之后，并不会立刻发送关闭请求，而是有一个<code>COLSED_WAIT</code>状态。随后再会主动发起一次关闭请求。之后请求端收到请求后<code>TIME_WAIT</code>完成之后，才会关闭连接。整个通信过程如下图：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210822004124.png"></p><p>在这个过程中，一开始双方都是处于<code>ESTABLISHED</code>的状态，随后请求端发起<code>FIN</code>请求，并随进入到<code>FIN_WAIT_1</code>状态，随后接收端收到请求后回复一个<code>ACK</code>并进入<code>CLOSED_WAIT</code>状态，请求端收到接收端的<code>ACK</code>后，进入到<code>FIN_WAIT_2</code>状态，等待接收端的发起的FIN请求。在接收端处理完一些关闭流程后，发起接收端向请求端的FIN请求，随后进入<code>LAST_ACK</code>状态，即等待最后一个<code>ACK</code>响应。请求端接收到这个<code>FIN</code>请求后，发送一个<code>ACK</code>响应并进入到时间长度为2个<code>MSL</code>的<code>TIME_WAIT</code>状态，随后关闭连接。接收端在收到请求端的最后一个<code>ACK</code>响应之后也随即关闭连接。</p><blockquote><p>其实理解三次握手和四次挥手有个隐藏的点，注意到这个点，也就能轻松理解这个建立和关闭连接的过程了，这个点就是 TCP连接是<strong>全双工的</strong>，因此在建立连接阶段，需要<strong>发送方一发一收</strong>，确认发送端到接收端的通信正常，也需要<strong>接收端一发一收</strong>，确认接收端到发送端通信正常。而在四次挥手过程中，因为关闭接收方，中间会有一个<code>CLOSED_WAIT</code>状态，所以这个关闭的过程就分成了<strong>四次通信。</strong></p><p>这里还有一个注意点⚠️：关闭请求端有一个<code>TIME_WAIT</code>状态，<strong>这个状态是因为如果接收端直接关闭，这时请求端的端口又刚好被另外一个新的应用占用，新应用会收到上一个连接接收端的发出的包。</strong>虽然seq会被重置，但是还是保险起见，发起端在发送<code>LAST_ACK</code>之后还会一个<code>2MSL</code>（<strong>MSL：Max Segment Lifetime，报文最大生存时间</strong>）的等待时间，然后关闭，等待这个时间是确保所有接收端发过来的包都能因为被丢弃掉。如果接收端没有收到<code>LAST_ACK</code>触发重传，这个时候接收端已经关闭了，接收端则会返回一个<code>RST</code>（强制断开连接）。其中<code>2MSL</code>，在<code>RFC793</code>中规定MSL的时间为2min，<strong>在实际使用中，我们一般会配置为30s或者1min。</strong>两个MSL是一个<code>MSL</code>一个是确保主动关闭方的最后ACK能够接收端，一个<code>MSL</code>是确保接收端重发的<code>LAST_ACK</code>能被请求端收到。</p></blockquote><h1 id="流量控制（滑动窗口协议）"><a href="#流量控制（滑动窗口协议）" class="headerlink" title="流量控制（滑动窗口协议）"></a>流量控制（滑动窗口协议）</h1><p>我们前面介绍了TCP传输数据的过程中，<strong>为了保证通信过程中不丢包</strong>，<strong>发送端每发送一个包接收端都会返回一个对应的ACK包，表示接收端接收到了这个数据包</strong>。如果接收端和发送端之间是确认一个发送一个，那么所有的数据包发送操作都是串行的，传输效率必然很低。那么如果我们将所有的数据包，分批次一波一波发出去，这样传输效率就有了极大的提升。那问题又来了，这一波是多少数据包呢？数据包少了传输效率上不来，数据包多了接收端处理不过来，网络也容易拥塞。<strong>TCP中通过滑动窗口协议进行流量控制。</strong></p><blockquote><p><strong>流量控制</strong>解决的是<strong>发送端速率和接收端速率不匹配</strong>的问题，<strong>拥塞控制</strong>应对处理的是<strong>网络本身的拥塞问题。</strong></p></blockquote><p>在TCP头里面，接收端会给发送端一个窗口大小，即Advertised window。这个窗口的大小就是当前可以发送的传输窗口大小。下面就是一个发送的窗口的模拟结构，其中包含四个部分<code>发送已经确认</code>， <code>发送未确认</code>，<code>未发送可发送</code>，<code>未发送不可发送</code>。其中我们滑动窗口的范围就是所有处于<strong>发送中</strong>的数据。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210824235013.png"></p><ul><li><p>LastByteAcked：第一部分和第二部分的分界线。</p></li><li><p>LastByteSent: 第二部分和第三部分的分界线。</p></li><li><p>LastByteAcked + AdvertisedWindow：第三部分和第四部分的分界线。</p></li></ul><p>对于接收端来说，也有一个对接的接收的数据结构，这个数据结构，其中包括三个部分，分别是<code>接收已经确认</code>，<code>等待接收未确认</code>，<code>不能接收</code>。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210825004244.png"></p><ul><li><p>LastByteRead 表示应用层读到的最后一个位置，这个位置后面的数据都在RcvBuffer中。</p></li><li><p>NextByteExcepted 表示当前已接收已确认和等待接收未确认的分界线，这个分界线之前的数据是确认了且在buffer中的数据。之后是等待确认的数据。</p></li><li><p>MaxRcvBuffer 是当前接收端的RcvBuffer的最大缓存位置。</p></li></ul><p>其中滑动窗口<code>AdvertisedWindow</code>的大小也就是中间等待接收但是未接收的部分，即<code>AdvertisedWindow = MaxRcvBuffer-NextByteExcepted</code>。如果当前接收端的MaxRcvBuffer在传输过程中没有发生变化的话，发送端是可以通过之前返回的窗口大小来反推当前窗口大小的。即<code>availableWindowSize = oldAdvertisedWindow - newLastByteAcked</code>。</p><h2 id="流控分析"><a href="#流控分析" class="headerlink" title="流控分析"></a>流控分析</h2><p>有了上面的数据结构，我们可以开始分析数据收发过程中的<strong>流量控制和确认重试</strong>。先看滑动窗口协议是怎么进行流量控制的。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210824235013.png"></p><p>在每次ACK的响应包中的TCP头都会携带一个窗口大小返回，这个数值就是<strong>当前可以发送的数据包的个数</strong>。如上图所示，当前我们的窗口大小是8，并且这次我们一次性发送了5个数据包。同时发送端的接收情况如下图：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210824235013.png"></p><p>在这5个数据包确认之后，接收端的如下图所示，但是不难发现窗口并没有进行滑动。是因为数据在buffer还没有被应用层读取，此时在返回ACK包中窗口大小就8减小到3。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210825004833.png"></p><blockquote><p>这里有一个注意的点⚠️</p><p>当窗口大小缩小到0，发送方就会停止发送数据，这个时候发送方不会给发送方发送数据包，接收方也没有多余的ACK响应告诉发送方窗口大小，这个时候双方就陷入了僵局，为了避免这种情况的发生，当窗口大小变为0之后，发送方会定时发送窗口大小探测数据包。看时候有机会调整窗口大小。但是接收方为了避免<strong>低能窗口综合症</strong>，接收方可以在窗口很小的时候不更新窗口，只有当接收窗口到达一定大小或者到达MaxRcvBuffer一半大小时候，才更新窗口接收数据。</p></blockquote><p>而在buffer中的数据被应用层读取之后，RcvBuffer空闲出来又可以接收的数据，此时接收窗口更新并通过ACK包告诉发送端调整发送窗口大小，此时的窗口大小11，接收端如下图所示。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210825011205.png" alt="img"></p><p>在发送端收到更新窗口大小的ACK包后，发送端也调整窗口大小为11，并继续传输数据。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210825012436.png"></p><blockquote><p>这里要注意的是，<strong>接收方先调整窗口大小，发送方收到接收方的ACK确认之后才会调整窗口大小。</strong></p></blockquote><p>整个过程如下</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/IMG_3450.GIF"></p><h2 id="数据包确认与丢包重试"><a href="#数据包确认与丢包重试" class="headerlink" title="数据包确认与丢包重试"></a>数据包确认与丢包重试</h2><p>上面的过程都是一切顺利的情况，但是面对丢包时常发生的网络环境，那TCP的滑动窗口是通过什么样的数据包的确认和丢包重试机制，保证传输的效率的同时又保证了传输的可靠。</p><h3 id="累计确认-累计应答"><a href="#累计确认-累计应答" class="headerlink" title="累计确认/累计应答"></a>累计确认/累计应答</h3><p>为了保证顺序性，每个包都有一个唯一的序列号。在建立连接的时候，就确定起始序列号的偏移量，然后按照序列号一个个发送，为了保证不丢包，对于发送的包都要进行应答，但是应答ACK也不是一个个来的，而是<strong>只要应答所有的包的最后一个包，就表示所有的包都收到了</strong>。这种应答模式的成为累计确认或者累计应答（cumulative acknowledgment）。这个过程类似于下面的场景，在接收端的接收到<code>数据包I</code>和<code>数据包J</code>后分别返回了<code>I的ACK</code>和<code>J的ACK</code>。<code>I的ACK</code>在传输过程中丢包了，但是发送端收到后<code>J的ACK</code>后依然确认了<code>数据包I</code>送达。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/IMG_3457.GIF"></p><h3 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h3><p><strong>对每一个发送的，但是没有ACK的包，都设有一个定时器，如果超过一定时间就会触发重试</strong>，但是这个超时时间不宜过长也不宜过短，时间必须大于往返时间RTT，否则会引起不必要的重传。也不易过长，否则访问时间会变慢。<strong>这个时间需要TCP通过采样RTT时间，然后进行加权平均，算出一个均值，而且这个值还是要不断的变化，因为网络状况不断低变化</strong>。除了采样RTT，还要采样RTT的波动范围，<strong>计算出一个估值的超时时间</strong>，由于重传时间是不断变化的，我们称为<code>自适应重传算法（Adaptive Retransmission Algorithm）</code>。TCP的重传策略是<strong>超时间间隔加倍，每当遇到一次超时重传的时候，都会将下一次超时时间间隔为设为先前值的两倍。两次超时，就说明网络环境差，不宜频繁反复发送。</strong></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/IMG_3458.GIF"></p><h3 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h3><p>当接收方收到一个序号大于下一个所期望的报文段时，就会监测数据流中的一个间隔，于是<strong>它就会发送冗余的ACK，冗余ACK的期望是接收重传的报文段</strong>。而客户端在收到<strong>三个冗余的ACK</strong>后，就会在定时器过期之前，重传丢失的报文段。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/IMG_3459.GIF"></p><h3 id="Selective-Acknowledegment（SACK）"><a href="#Selective-Acknowledegment（SACK）" class="headerlink" title="Selective Acknowledegment（SACK）"></a>Selective Acknowledegment（SACK）</h3><p>这种方式需要接收方在返回的ACK的TCP头中加一个SACK数据，<strong>发送方可以通过读取SACK，知道接收方的数据接收情况，并且针对性的重传接收端丢失的包</strong>。</p><h1 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h1><p>在上面的部分我们介绍了TCP的流量控制，通过一个数据包一个ACK的方式保证了传输的可靠性，通过各种各样的确认和重传策，数据发送端进行流量控制确保，每个数据包都能准确地传输到接收端。但是我们不仅仅只是满足于可靠的传输，我们还要充分利用网络最大带宽进行数据传输，即利用网络进行又好又快的进行传输。</p><blockquote><p>流控控制是针对<strong>发送接收端的发送接收策略</strong>，而<strong>拥塞控制是针对网络环境进行的发送流量调控策略。</strong></p></blockquote><p>在理论中，拥塞控制一般又两种实现方式，分别是<code>端到端的拥塞控制</code>和<code>网络辅助拥塞控制</code>。其中我们TCP使用的是第一种方式。</p><ul><li><p><strong>端到端的拥塞控制</strong>：<strong>在这种拥塞控制方法中，由数据端的自己判断是否拥塞然后调整发送速率</strong>，比如发送端的数据已经超时却还没有接收到ACK确认报文，数据往返延时过高，接收端到对同一个数据段报文重复确认等现象，我们都可以认为是网络拥塞的现象。如果发送端监测到这些现象，就应该降低数据发送的速率，如果没有，则可以慢慢提高速率。</p></li><li><p><strong>网络辅助的拥塞控制</strong>：由网络中的路由器来发送告诉发送方，网络的情况，一般有两种方式：</p></li><li><ul><li> <strong>路由器直接向发送端发送报文</strong>，告知网络情况。</li><li><strong>路由器更改数据包中的某个标识符</strong>，来提示网络中的拥塞情况。通常这个标识符号会被带到接收端，然后接收端再通<strong>过ACK确认包返给发送端</strong>。</li></ul></li></ul><blockquote><p>网络辅助拥塞控制中的两个方法都有不太合适的地方，第一个如果通过中间设备向发送端发送反馈网络情况的数据包，不仅会增加网络环境的压力，同时也增加了发送端的数据接收压力，降低发送端吞吐。第二种方式虽然没有增加数据包的数量，但是这种方式网络拥塞的反馈延迟也更高，并且这种反馈的可达性也是一个问题。🤔️</p></blockquote><h2 id="TCP需要解决的三个问题"><a href="#TCP需要解决的三个问题" class="headerlink" title="TCP需要解决的三个问题"></a>TCP需要解决的三个问题</h2><p>TCP采用的<code>端到端的拥塞</code>的拥塞控制，但是从理论到实践还有很长一段路要走，其中有三个问题不得不回答。</p><ul><li><p><strong>TCP如何判断当前网路环境是否存在拥塞？</strong>这个问题我们可以通过枚举的办法，枚举出丢包的场景，然后分析是否存在拥塞即可。我们可以简单分析得出一下几个场景（也就是我们前面流量控制部分重传策略中的几个场景）。</p></li><li><ul><li>若发送一条数据段后，成功接收到了接收方确认报文，则可以认为网络是没有拥塞。</li><li>若发送一条数据段后，<strong>在规定时间内没有收到确认报文（丢包或延迟太大）</strong>，则可以认为<strong>网络出现了拥塞。</strong></li></ul></li><li><ul><li>若连续收到接收方对<strong>同一条报文的多次冗余确认</strong>，即可认为网络出现了拥塞（这和快速重传算机制有关）</li></ul></li><li><p><strong>TCP如何限制发送端的发送速率？</strong>前面我们介绍了滑动窗口协议，我们可以通过控制窗口的大小来限制当前的发送速率，其中<code>滑动窗口RWND</code>通过<strong>调整窗口大小调整发送速率，匹配接收端的接收处理速率</strong>。还有一个<code>拥塞窗口CWND</code>，通过<strong>调整这个窗口的大小也可以调整发送速率，来避免一次发送太多的数据包造成网络拥塞</strong>。<code>LastByteSent - LastByteAcked &lt;= min &#123;cwnd, rwnd&#125;</code> <strong>滑动窗口和拥塞窗口共同控制发送端的发送速率，发送端的发送速率必须小于或等于min(cwnd, rwnd)。</strong></p></li><li><p><strong>TCP采用什么样的算法来控制发送速率？</strong>即如果通过拥塞判断发送拥塞后的cwnd窗口大小调整策略，TCP调整拥塞窗口的主要算法有<code>慢启动</code>、<code>拥塞避免</code>和<code>快速恢复</code>。其中前面两个是TCP规范必须实现的，第三个则是推荐实现，TCP根据情况在这三者之间切换。</p></li></ul><blockquote><p>在介绍拥塞控制算法之前要知道一些名词，这些名词我们在后面介绍算法过程中会用到</p><p>MSS：<strong>最大报文段长度，TCP发送的报文段中，包含的数据部分的最大字节数。</strong></p><p>cwnd：<strong>拥塞窗口</strong>，TCP发送但还没得到确认的报文序号都在这个区间；</p><p>RTT：<strong>往返时间</strong>，发送方发送一个报文，到接收到这个报文的确认报文所经历的时间。</p><p>ssthresh：<strong>慢启动阈值，慢启动阶段，若cwnd的大小达到这个值，转换为拥塞避免模式。</strong></p></blockquote><h2 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h2><p>慢启动是建立TCP连接后，采用的第一个调整发送速率的算法，在这个阶段，<strong>cwnd通常会被初始化为1MSS</strong>，这个值比较小，在这个时候，网络一般还有足够富余，而<strong>慢启动的目的就是尽快找到上限</strong>。在慢启动阶段，发送方每接收到一个确认报文，就会将将<strong>cwnd的大小翻倍</strong>，即：</p><ul><li><p>初始的cwnd=1MSS，发送一个TCP最大报文段，成功确认后，cwnd=2MSS。</p></li><li><p>此时可以发送两个TCP最大报文段，成功确认后，cwnd=4MSS。</p></li><li><p>此时可以发送四个TCP最大报文段，成功确认后，cwnd=8MSS。</p></li><li><p>…</p></li></ul><p>由于TCP是一次性将窗口内的所有报文发出，所以<strong>所有报文到达并被确认的时间，近似等于一个RTT</strong>。在这个阶段，拥塞窗口cwnd的长度在每个RTT后翻倍，发送速率也是呈指数增长。<strong>不要被慢启动这个名字给骗了，这个过程可一点也不慢</strong>😂。这个阶段终究会触到一个发送的上限，当遇到以下几种情况时候，cwnd 将进行调整以适应当前网络。</p><ol><li><p>在慢启动的过程中，发生了<strong>数据传输超时</strong>，则此时<strong>TCP将ssthresh的值设置为</strong><code>cwnd/2</code> ，然后将<strong>cwnd重新设置为1MSS</strong>，<strong>重新开始慢启动</strong>过程，这个过程可以理解为试探上限。</p></li><li><p>第一步试探出的上限ssthresh将用在此处。<strong>若cwnd的值增加到 &gt;= ssthresh时</strong>，此时若继续使用慢启动的翻倍增长方式，必然很快达到速率上限出现网络拥塞。所以也就是这个时候<strong>慢启动结束，改为拥塞避免模式。</strong></p></li><li><p>若发送方接收到某个报文的<strong>三次冗余确认（触发了快速重传条件）</strong>，则<strong>进入到快速恢复阶段，同时 ssthresh = cwnd / 2</strong>，毕竟发生快速重传也可以认为是发生拥塞导致的丢包，此时可以设置 <strong>cwd = ssthresh + 3MSS</strong>。</p></li></ol><p>以上就是慢启动算法（模式）的一些细节和处理点。</p><h2 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h2><p>在慢启动阶段，当<code>cwnd &gt;= ssthresh</code>时候，为了避免很快接近拥塞阈值，慢启动结束拥塞控制启动。拥塞避免阶段是一个速率慢且线性增长的过程，在这个模式下，<strong>每经历一个RTT，cwnd的大小增加1MSS。</strong>这个线性增长什么时候结束呢？分以下两种情况。</p><ol><li>在这个过程中<strong>发生了超时，则表示网络拥塞</strong>，这个时候ssthresh被修改成<code>cwnd/2</code>，然后cwnd被只为1MSS，并且进入慢启动阶段。</li><li>若发送方接收到了<strong>某个报文的三次冗余确认</strong>（即触发了快速重传的条件），此时也认为发生了拥塞，则ssthresh 被修改为 cwnd/2，然后cwnd被设置为<strong>ssthresh + 3MSS</strong>，并进入快速恢复阶段。</li></ol><p>拥塞避免阶段是在慢开始之后提升发送速率的阶段，让发送速率尽可能保持一个较高的水平上。也可以理解为避免拥塞的缓慢提神发送速率阶段。</p><h2 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h2><p>快速恢复模式和上面两种模式不太一样，这种模式在TCP规范中<strong>没有要求强制实现</strong>，只是一种<strong>推荐实现</strong>的模式。在快速恢复阶段，<strong>每接收到一个冗余的确认报文，cwnd就增加一个MSS</strong>，其余不变。在发生以下两种情况，退出快速恢复模式。</p><ul><li>在快速恢复过程中，<strong>计时器超时</strong>，这时候，ssthresh被修改为<code>cwnd/2</code>，然后cwnd被设置为1MSS，并进入<strong>慢启动</strong>模式。</li><li>若发送方接收到<strong>一条新的确认报文</strong>，则cwnd被置为ssthresh，然后进入到<strong>拥塞避免</strong>模式。</li></ul><p>这几个算法传输速率的图如下，其中蓝色的传统算法的第一段，0到16为慢启动阶段，16到20这个阶段以1MSS/RTT增速提升cwnd大小，橙色的线代表快速恢复算法，可以看到在10这个点如果出现了丢包则会进入下面蓝色的快启动阶段，如果出现的是冗余确认，进入的是快速恢复的橙色线条，这个时启始cwnd = (20/2) + 3 = 13，并随后进入拥塞避免阶段。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210828185839.png"></p><h2 id="BBR算法介绍"><a href="#BBR算法介绍" class="headerlink" title="BBR算法介绍"></a>BBR算法介绍</h2><p>上面的算法通过接收端丢包和冗余ACK包来判断当前网络的拥塞情况，然后调整自己的发送速率，因此有了拥塞控制算法，<code>慢启动</code>、<code>拥塞避免</code>和<code>快速恢复</code>算法（模式）。但是这样的“知进退”的算法，在某些延迟很重要的场景下却降低了传输速率。TCP判断拥塞的两个条件本身也是不够严谨的。</p><ul><li><strong>第一个问题是丢包不一定就代表网络通道满了</strong>，可能整个通道就是漏水的。有时候公网上即时速率跑不满，也会发生丢包的场景，这并不代表发生拥塞了。</li><li><strong>第二个问题是TCP的拥塞算法要等中间设备全部都填满了，才会发生丢包</strong>。这个时候降低速率已经为时已晚了。其实传输的过程中只要跑慢网络传输线路就可以了。</li></ul><p>为了优化这两个问题，后来有了 TCP BBR 拥塞算法。它企图找到一个<strong>平衡点</strong>，通过不断地加快发送速度，将管道填满，但是不要填满中间中间设备的缓存。这个平衡点可以很好的达到高带宽和低延迟的平衡。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210828185909.png"></p><blockquote><p>我们这里只是入门介绍BBR算法解决的问题，感兴趣的同学可以阅读BBR算法有关论文。</p><p><a href="https://queue.acm.org/detail.cfm?id=3022184">https://queue.acm.org/detail.cfm?id=3022184</a> 😏</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一小节我们详细总结了TCP协议的细节，从TCP的协议头开始，详细介绍了了协议头里面的一些标识，通过这些标识的维护，实现TCP的连接建立与断开，流量控制和拥塞控制等功能。随后我们介绍了TCP可靠连接的建立和断开，以及三次握手和四次握手的交互细节。在建立连接之后我们开始传输数据进行流量控制。TCP使用滑动窗口的接口作为流控的基础。TCP的发送方都有一个窗口，其中发送方的窗口依赖接收方窗口大小反馈。 通过这个窗口大小的的调整，发送端调整发送端发送速率，解决发送端发送速率和接收端发送速率不匹配的问题。随后我们介绍了滑动窗口的确认和应答机制，其中有<strong>累计确认、超时重传和快速重传</strong>等机制，确保了TCP传输的可靠性和数据包的顺序性。最后在有了以上的基础，我们介绍了针对网络环境的TCP拥塞控制，其中介绍了传统算法的必须实现的慢启动、拥塞避免和可选实现的快速恢复。通过这两小节的学习，我们建立一个以开发中接触较多的协议为核心的网络基础。接下来我们将进入网络编程的学习，加油～</p><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul><li><p><a href="https://www.cnblogs.com/tuyang1129/p/12439862.html">计算机网络-TCP的拥塞控制(超详细)</a></p></li><li><p><a href="https://time.geekbang.org/column/article/8590">极客时间专栏《趣谈网络协（第八讲）》</a></p></li><li><p><a href="https://time.geekbang.org/column/article/8975">极客时间专栏《趣谈网络协（第十一讲）》</a></p></li><li><p><a href="https://time.geekbang.org/column/article/9141">极客时间专栏《趣谈网络协（第十二讲）》</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>NIO与网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络基础 — 网络模型与网络协议</title>
    <link href="/2021/09/04/network-basic-1/"/>
    <url>/2021/09/04/network-basic-1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从这一小节，我们开始梳理网络相关的知识结构。网络对于程序员非常重要，可以说离开了网络软件程序就失去了70%的魔力。但是程序员对于网络相关的领域是又爱又恨，爱是因为网络赋予程序无限的可能性，恨是因为网络对软件开发来说几乎是透明的，不用刻意的去调整网络，我们也能进行业务的开发。掌握网络相关的知识并不容易，网络相关的领域的知识内容复杂且涉及范围广。可是如果要成为一个优秀的开发工程师，进行网络相关的开发，就必须对这个部分有一个清晰的结构化的认知。这一小节，我们会从网络的TCP五层模型和OSI七层结构模型开始梳理介绍，随后介绍每一层和每一层具有代表性的网络协议，最后我们简单的聊一聊一个数据包是怎么在网络上传输的。</p><h1 id="网络模型基础"><a href="#网络模型基础" class="headerlink" title="网络模型基础"></a>网络模型基础</h1><p>这个模型我相信大家在大学都学过，基本上网络的知识都是围绕着这个网络结构展开的。其中我们学习过两种网络模型，一种是OSI七层模型，另外一种是TCP/IP五层模型。其中OSI七层模型包括<strong>应用层、表示层、会话层、传输层、网络层、数据链路层和物理层</strong>。而TCP/IP五层模型包括<strong>应用层、传输层、网络层、数据链路层和物理层。</strong>OSI七层模型更加侧重功能，而TCP/IP更加侧重于协议。</p><blockquote><p>OSI七层和TCP/IP五层的区别：</p><ol><li><p>TCP/IP 是一个协议簇；而OSI是一个模型，且TCP/IP的开发时间在OSI之前。</p></li><li><p>TCP/IP是由一些交互性的模块做成的分层次的协议，其中每个模块提供特定的功能；OSI则指定了哪个功能是属于哪一层的。</p></li><li><p>TCP/IP是五层结构，而OSI是七层结构。OSI的最上面的三层在TCP中用应用层表示。</p></li></ol></blockquote><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210813004056.png"></p><p>TCP/IP的五层分别为：<strong>应用层、传输层、网络层、数据链路层和物理层。</strong>前面我们提到TCP/IP五层结构是由一些交互性的模块做成的分层次的协议，那么他们每一层有哪些协议？以下列举了我们接触的比较多的网络协议。</p><ul><li><p>应用层：<code>HTTP</code>、<code>HTTPS</code>、<code>FTP</code>、<code>SMTP</code>、<code>Telnet</code>…</p></li><li><p>传输层：<code>TCP</code>、<code>UDP</code></p></li><li><p>网络层：<code>IP</code>、<code>ICMP</code>…</p></li><li><p>数据链路层：<code>ARP</code>…</p></li><li><p>物理层：…</p></li></ul><p>OSI七层模型分为：<strong>应用层、表示层、会话层、传输层、网络层、数据链路层和物理层</strong>。OSI更偏向哪个功能属于哪一层。那么这些网络功能都在那层呢？</p><ul><li><p>应用层：文件传输、电子邮件、文件服务、虚拟终端等。</p></li><li><p>表示层：数据格式化、代码转换、数据加密。</p></li><li><p>会话层：解除或建立与其他接点的联系。</p></li><li><p>传输层：提供端对端的接口。</p></li><li><p>网络层：为数据包选择路由。</p></li><li><p>数据链路层：传输有地址帧，错误检测的功能。</p></li><li><p>物理层：以二进制数据形式在物理媒体上传输数据。</p></li></ul><p>将这两个模型总结成如下表格：</p><table><thead><tr><th>OSI模型</th><th>TCP/IP五层模型</th><th>功能</th><th>协议</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>文件传输、电子邮件等</td><td>HTTP、FTP、SMTP、Telnet等</td></tr><tr><td>表示层</td><td>数据格式化，代码转换，数据加密</td><td>无</td><td></td></tr><tr><td>会话层</td><td>建立或者解除与其他连接点的联系</td><td>无</td><td></td></tr><tr><td>传输层</td><td>传输层</td><td>提供端对端的接口</td><td>UDP、TCP</td></tr><tr><td>网络层</td><td>网络层</td><td>为数据包提供路由</td><td>IP、ICMP等</td></tr><tr><td>数据链路层</td><td>数据链路层</td><td>传输有地址帧、错误检测</td><td>ARP等</td></tr><tr><td>物理层</td><td>物理层</td><td>二进制物理介质传输数据</td><td>ISO2110、IEEE802、IEEE802.2等网络传输协议</td></tr></tbody></table><h1 id="一个数据包的奇幻之旅"><a href="#一个数据包的奇幻之旅" class="headerlink" title="一个数据包的奇幻之旅"></a>一个数据包的奇幻之旅</h1><p>我们上面介绍了网络模型，但是这些网络模型又和实际的传输有什么关系呢？当我们访问一个网站，背后的数据又是怎么进行传输的呢？我在读书的时候也都知道有网络协议，但是让我说一些传输的细节，我却很难答上来，这个部分我们简单介绍一个数据包的传输过程，建立起一个数据传输过程的基本认知。</p><h2 id="封包与拆包"><a href="#封包与拆包" class="headerlink" title="封包与拆包"></a>封包与拆包</h2><p>在网络上传输的并不是直接的数据，而是一个个数据包。每个数据包经过发送端都会被带上一些特殊信息，这些特殊信息在到达中间或目标设备是会被读取，这些特殊信息就是协议头。<strong>数据包在发送端添加协议头的过程叫做封包</strong>，<strong>数据包在接收端被拆分读取分析的过程叫做拆包</strong>。如果我们传输的应用层使用的是HTTP协议，传输过程和封包拆包示例如下。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210830001441.png"></p><h2 id="MAC头与IP头"><a href="#MAC头与IP头" class="headerlink" title="MAC头与IP头"></a>MAC头与IP头</h2><p>如果我们要把一个数据包从一个网络设备发送到另一个网络设备，IP头必不可少，但是为了在到达目标局域网后快速找到目标接收端，我们的数据包还需要MAC头，IP头和MAC之间的关系类似于我们信封上的收件地址和收件人姓名。数据包有了这两个协议头，就可以通过网络从一端传输到另一端。以下是这两个协议头的细节图。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210830232718.png"></p><p>在MAC头里面，显示<strong>目标MAC地址</strong>，然后是<strong>源MAC地址</strong>，然后有一个协议类型，用来说明里面的IP协议类型。IP头里面的版本号，目前主流的还是IPv4。IP头里面还有个8位标识协议，这里指的是传输层协议类型，也就是TCP，还是UPD协议。这里最重要的是源IP地址和目标IP地址。（IP协议下面有详细介绍。）</p><p>在数据包在网络上<strong>传输过程中，这个IP头和MAC头在有些时候并不是一尘不变的，随着网段的切换，这个IP头和MAC头也会切换。</strong>在任何一台机器上，当要访问另一个IP地址的时候，都先要判断目标IP地址和当前机器的IP地址，是否在同一个网段。</p><ul><li><strong>如果在同一个网段</strong>，这就好比在公司你访问你旁边同事电脑一样，这里数据包的传输过程中不用进过网关就能访问。在封包过程中，<strong>直接将源地址和目标地址放入IP头中，然后通过ARP获得MAC地址，将源头MAC和目的MAC地址放入MAC头</strong>，然后发送出去就好了。</li><li><strong>如果不是同一个网关，这个时候就要先把数据包发给网关Gateway</strong>。网关Gateway地址一定是和源IP地址是同一个网段的。往往不是第一个地址就是第二个地址。</li></ul><blockquote><p>网关是一个三层转发设备，往往是一个<strong>路由器、三层交换机或是防火墙。它是一个网段的入口也是出口</strong>，就很类似与我们现实生活中的海关，这个出口<strong>连接着多个网段</strong>。如果一个<strong>数据包传输过程中跨网段</strong>，网关<strong>匹配上</strong>IP地址和MAC地址之后，<strong>三层设备会读取数据包并根据目标IP地址</strong>，匹配转发的网段，匹配到之后，三层设备会<strong>重新给数据包打上下一个目标地址的IP头和MAC头</strong>直到跳到目标设备或在网络中被丢弃为止。</p></blockquote><h2 id="路由过程分析"><a href="#路由过程分析" class="headerlink" title="路由过程分析"></a>路由过程分析</h2><p>接下来我们通过分析在同一网段和在不同网段场景下，数据包在网络中的路由过程是怎样。在这个过程中数据包的IP头和MAC头又会发生哪些变化。</p><h3 id="转发网关路由场景分析"><a href="#转发网关路由场景分析" class="headerlink" title="转发网关路由场景分析"></a>转发网关路由场景分析</h3><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210904143156.png"></p><p>上面这张图，我们可以发现服务器A要访问服务器B，其中左边的路由器为路由器A，右侧的路由器为路由器B。目标服务器<code>192.168.4.101/24</code>和源服务器<code>192.168.1.101/24</code>不在同一个网段，因而需要先把数据包发送给网关。其中网关已经配置好了为<code>192.168.1.1/24</code>，同时通过<code>ARP</code>获取网关的MAC地址 ，然后发送数据包。其中包中的MAC头和IP头信息如下。</p><blockquote><ul><li><p>源MAC：服务器的A的MAC地址。</p></li><li><p>目标MAC：<code>192.168.1.1</code>这个网口的MAC地址。</p></li><li><p>源IP：<code>192.168.1.101</code></p></li><li><p>目标IP: <code>192.168.4.101</code></p></li></ul></blockquote><p>当数据包到达网关<code>192.168.1.1</code>后，路由器A通过查询路由表发现，如果需要访问<code>192.168.4.101</code>需要从<code>192.168.56.1</code>这个口出去，到达下一跳<code>192.168.56.2</code>。因此路由器通过ARP获得<code>192.168.56.2</code>的MAC地址，并将包发出去，其中包中的MAC头和IP头信息如下：</p><blockquote><ul><li><p>源MAC：<code>192.168.56.1</code>的MAC地址。</p></li><li><p>目标MAC：<code>192.168.56.2</code>的MAC地址。</p></li><li><p>源IP：<code>192.168.1.101</code></p></li><li><p>目标IP: <code>192.168.4.101</code></p></li></ul></blockquote><p>当数据包到达<code>192.168.56.2</code>这个网口，后来路由B通过查询路由表，如果想要<code>192.168.4.101/24</code>目标IP，需要从<code>192.168.4.1/24</code>这个口出去并且目标IP也是我们要反问的服务器B，因此这一跳也是最后一跳。通过ARP协议获取<code>192.168.4.1/24</code>的MAC地址后把数据包发出去，其中包中的MAC头信息和IP头信息如下：</p><blockquote><ul><li><p>源MAC：<code>192.168.4.1/24</code> 的MAC地址。</p></li><li><p>目标MAC：<code>192.168.4.101/24</code> 的MAC地址。</p></li><li><p>源IP：<code>192.168.1.101</code></p></li><li><p>目标IP: <code>192.168.4.101</code></p></li></ul></blockquote><p>通过这个过程可以看出，每到一个新的局域网，<strong>MAC地址都是要变的，但是IP地址不变</strong>。在IP头里面，不会保存任何网关的IP地址，<strong>所谓下一跳，是要将目标IP转换为MAC地址放入MAC头，目标IP地址在整个过程过程中不会发生改变。</strong>这是转发网关的路由过程。</p><h3 id="NAT网关路由场景分析"><a href="#NAT网关路由场景分析" class="headerlink" title="NAT网关路由场景分析"></a>NAT网关路由场景分析</h3><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210904143249.png"></p><p>这个场景和上面场景有一些不同，其中访问的源服务器A和目标的服务器B的IP地址是相同的。他们两个在不同的局域网中，这个场景很像我日常访问学校选课系统一样。服务器A是我们自己电脑，现在我们要访问学校的选课系统，选课系统部署在机房的局域网中，选课系统服务器B的IP地址为<code>192.168.1.101/24</code>，碰巧我们宿舍的电脑在宿舍这个局域网内也是<code>192.168.1.101/24</code>这个IP地址。<strong>它为了能对外提供服务，还需要一个外网地址</strong><code>192.168.56.2/24</code>。现在我们服务器A要向服务器B发送数据包，首先服务器A先从DNS解析获取服务器B域名对应的IP地址即<code>192.168.56.2/24</code>。这个地址不是和服务器A在一个局域网，所以我们将数据包发送给网关。数据包中的IP地址和MAC地址如下：</p><blockquote><ul><li><p>源MAC：服务器的A的MAC地址。</p></li><li><p>目标MAC：<code>192.168.1.1</code>这个网口的MAC地址。</p></li><li><p>源IP：<code>192.168.1.101</code></p></li><li><p>目标IP: <code>192.168.56.2</code></p></li></ul></blockquote><p>数据包到达网关<code>192.168.1.1</code>后，通过查询路由表，应该走<code>192.168.56.1/24</code>这个口出去，并且目标<code>192.168.56.2</code>就是下一跳。通过ARP获取到<code>192.168.56.2/24</code>的MAC地址，并且将数据包发送出去。</p><blockquote><p> 这里需要注意⚠️，这里我们的网关是NAT网关，在外网上传输如果使用<code>192.168.1.101</code>局域网的IP地址，接收端无法知道通过一个局域网的IP地址定位到发送端，所以这里我们的源IP地址应该是NAT网关的地址，<strong>回来的数据包发送到这个网关只要通过一定的映射关系就能找到回来的数据包中的IP地址对应的服务器。这也就是NAT网关的特殊之处，其中NAT的全称为（Network Address Translation）。</strong></p></blockquote><p>这里我们的数据包的头信息如下，不难发现这个时候我们源IP地址和MAC地址已经变成了NAT网关A的IP地址和MAC地址。</p><blockquote><ul><li><p>源MAC：<code>192.168.56.1/24</code>的MAC地址。</p></li><li><p>目标MAC：<code>192.168.56.2/24</code>的MAC地址。</p></li><li><p>源IP：<code>192.168.56.1</code></p></li><li><p>目标IP：<code>192.168.56.2</code></p></li></ul></blockquote><p>包到达<code>192.168.56.2</code>NAT网关之后，<code>192.168.56.2</code>的外网地址映射的是内网服务器B的地址为<code>192.168.1.101/24</code>，通过ARP获取服务器B的MAC地址之后，将数据包发送给服务器B，注意这里的网关是NAT网关，所以这里的<strong>源的MAC地址会替换成局域网的NAT网关MAC地址</strong>，其中数据包中头信息如下：</p><blockquote><ul><li><p>源MAC：<code>192.168.1.1</code> 的MAC地址。</p></li><li><p>目标MAC：<code>192.168.1.101 </code>的MAC地址。</p></li><li><p>源IP：<code>192.168.56.1</code></p></li><li><p>目标IP：<code>192.168.1.101</code></p></li></ul></blockquote><p>至此，NAT网关的路由场景路由结束了。我们仔细观察不难发现，NAT网关和转发网关的区别在于NAT会做IP地址的映射转换，可以让多个设备通过一个IP地址进行数据访问。极大了解决了IPv4地址总量不足的问题。但是正是NAT网关的存在，这导致如果我们没有将服务地址映射到公网上，我们就无法通过外网直接访问我们私人服务。同时，我们访问外网服务，一个局域网内的设备使用的都是一个IP地址，即出口NAT网关地址。</p><blockquote><p> 这里还有一个注意的点：NAT转换的时候还有一个NAPT协议，即<strong>Network Address Port Translation</strong>，数据包发出的时候，NAT路由会将数据包中的<strong>局域网IP和端口</strong>转换为<strong>NAT的公共IP和NAT动态分配的端口</strong>，并且建立映射关系。等数据包回来的时候，NAT路由会<strong>依据这个转换后的NAT动态端口</strong>转换为局域网的IP地址和端口。</p><p>数据包出： <strong>局域网IP:端口 ==NAT==&gt; NAT公共IP:动态端口</strong>。</p><p>数据包入： <strong>NAT公共IP:动态端口 ==NAT ==&gt; 局域网IP:端口</strong>。</p></blockquote><p>这里还有一个没有介绍的点，就是我们的<code>路由策略</code>和<code>路由算法</code>，其中有我们可以配置的静态路由策略和在路由过程中的动态路由算法。如果有感兴趣的朋友，可以查询有关资料深入，这里就不展开了，展开了又能讲一大堆了。😅😅</p><h1 id="协议？你我之间的约定！"><a href="#协议？你我之间的约定！" class="headerlink" title="协议？你我之间的约定！"></a>协议？你我之间的约定！</h1><p>我刚开始接触到协议的时候，了解到什么TCP/IP协议，UDP协议各种各样的协议都有种不明觉厉的感觉。但是随着我深入的学习，编写自己的RPC的网络协议的时候，发现协议并没有想象中的那么神秘，协议只不过是收发端约定的规则而已，更像是我们写信中，大家约定的书信格式一样。没了协议双方网络能通么？当然是可以的，只不过我不知道你发的是什么信息了。因此我们这的协议是网络协议的简称，<strong>网络通信计算机双方必须共同遵循的一组约定</strong>，如怎样建立连接、怎么样互相识别等。只有遵守了这个约定，计算机之间才能互相通信交流。我们将从数据链路层自下向上依次梳理各个层代表协议。物理层过于物理，这里我们就不梳理了。</p><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>数据链路层也叫MAC层，MAC层的全程是<strong>Medium Access Control</strong>，即媒体访问控制。<strong>其实就是控制媒体上发数据的时候，谁先发、谁后发的问题。防止发生混乱，即多路访问</strong>。主要有以下三种协议：<strong>信道划分</strong>、<strong>轮流协议</strong>和<strong>随机接入协议</strong>。</p><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p>ARP协议是一个工作在数据链路层的协议。ARP协议解决了什么样问题呢？我们都知道在网络包传输需要一个IP地址和一个MAC，如果IP地址可以类比成你的地址，MAC地址就是你的名字。IP地址我们可以通过查询DNS服务器获得，那么MAC地址怎么办？这个时候就需要ARP协议。<strong>通过IP协议获取目标设备的MAC地址，这就是ARP协议的工作目标。</strong></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210814144601.png"></p><p>那如果如果通过IP地址获取的目标的MAC地址呢？其实很简单，<strong>在局域网中发送一个ARP请求，这个请求是以广播的形式发出去的，如果某一台机器收到ARP请求，并且发现要查询的IP地址和自己的一致，则返回自己的MAC地址</strong>。发送端收到这个目标机器的MAC地址后，为了避免每次都要发ARP包询问MAC地址，发送端会将这个地址缓存一段时间，方便后续的使用。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210814145303.png"></p><p>其中ARP协议发送的报文结构如下所示：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210814145551.png"></p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>网络层是OSI模型中的第三层，介于传输层和数据链路层之间，它在数据链路层提供的两个相邻端点之间的<strong>数据帧</strong>的传输功能上，进一步管理网络中的数据通信，将数据设法从源端经过若干个中间节点传输到目的地端，从而<strong>向传输层提供基本的端到端的数据传输服务</strong>。我们熟知的<code>IP</code>和<code>ICMP</code>（ping命令）协议就工作在这一层。</p><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>IP协议是TCP/IP协议族的核心协议，其中包括两个方面：</p><ul><li>IP头部信息。IP头部信息出现在每个IP数据报中，用于指定IP通信的<strong>源端IP地址、目标端IP地址</strong>，以及<strong>指定部分通信行为</strong>。</li><li>IP数据报的路由和转发。IP数据报的路由和转发发生在除目标机器之外的所有主机和路由器上。他们决定数据报是否应该转发以及如何转发。</li></ul><blockquote><p>IP 协议的核心即定义了<strong>数据包从哪来到哪去，以及这个过程中在网络终端上的转发行为</strong>。</p></blockquote><h5 id="IP协议特点"><a href="#IP协议特点" class="headerlink" title="IP协议特点"></a>IP协议特点</h5><p>IP协议是TCP/IP协议簇的基石，它为上层协议提供<strong>无状态、无连接、不可靠</strong>的服务。</p><ul><li><p><strong>无状态是指IP通行双方不传输数据的状态信息，因此所有IP数据报的发送、传输都是相互独立的，没有上下文关系</strong>。这种服务最大的缺点就是无法处理乱序和重复的IP数据报。面向连接的协议，比如TCP协议，能够自己处理乱序的、重复的报文段，它递交给上层协议的内容绝对是正确且有序的。</p><p>无状态服务的有点也很明显：<strong>简单、高效</strong>。我们无需为保持维护通信状态而消耗系统资源，也无需在每次传输时都携带状态。</p></li><li><p>无连接是指IP<strong>通信双方都不会长久的维持对方的任何信息</strong>，这样<strong>上层协议在每次发送数据的时候都必须指明对方的IP地址。</strong></p></li><li><p><strong>不可靠指的是IP协议不能保证数据包一定能准确的到达，它只是承诺尽最大努力</strong>。很多情况都可以导致IP数据报发送失败，比如，某个路由器发现数据包在网络上存在时间太长，就会将它丢弃，并返回一个ICMP错误消息给发送端。</p></li></ul><blockquote><p> 因此IP服务上层协议往往需要自己实现数据确认，超时重传等机制，以达到安全可靠传输的目的。典型实现TCP协议。</p></blockquote><h4 id="IPv4协议头"><a href="#IPv4协议头" class="headerlink" title="IPv4协议头"></a>IPv4协议头</h4><p>IPv4的协议头如下所示，一般长度为20个字节(如下面的5层)，也有可能包含变长部分总长超过20个字节。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210817010024.png"></p><ul><li><p>4位头部长度标识这个这个IP报文头长度，标识能<strong>有多少个4个字节，因此IP报文头最长 15 * 4 = 60个字节。</strong></p></li><li><p>8位服务类型包括一个三位的优先权字段，4位的TOS字段和1位保留字段（必须置0）。4位TOS字段分别为：<strong>最小延时，最大吞吐量，最高可靠性和最小费用</strong>。其中最多有一位可以置1，应用程序应该根据实际需要来设置。比如SSH和Telnet这样登录需要最小延时服务，而传输文件的ftp则需要最大吞吐服务。</p></li><li><p>16位总长度指的是整个IP数据报的长度，以字节为单位。因此IP数据报文最长为65535个字节，但是由于MTU的限制，数据报文长度超过MTU限制就会进行分片传输。</p></li></ul><blockquote><p>IP协议的 MTU 是物理设备上的限制，它限制了路径上能够发送数据包大小的上限。</p></blockquote><ul><li>16位标识唯一标识主机发送地每一个数据报。<strong>其初始值由系统随机生成，每发送一个数据报，其值就加一，该值在数据报分片时被复制到每个分片中，因此同一个数据报中的所有分片都具有相同的标识。</strong></li><li>3位标识字段第一位保留。<strong>第二表示”禁止分片”**。如果设置了这个位，</strong>IP服务将不对数据报进行分片<strong>，在这种情况下，如果IP数据报超过MTU限制，</strong>后续的数据报会被丢弃<strong>并返回一个ICMP的差错报文。</strong>第三位表示”更多分片”<strong>。除了数据报的</strong>最后一个分片以外，其他分片都要把它置为1。**</li><li>13位分片偏移是分片相对原始IP数据报开始处的偏移，实际的偏移量则是左移动3位(*8)后得到，因此除了最后一个分片以外，每个IP分片的数据部分长度必须数8的倍数。</li><li>8位生存时间（TTL）是<strong>数据报到达目的地之前允许经过的路由器跳数。TTL在发送时被设置（常见值64）</strong>。数据报文在转发过程中<strong>每经过一个路由，该值就被路由器减1</strong>，当TTL减为0时，数据包会被丢弃，并且向源发送一个ICMP差错报文。TTL可以防止数据报陷入路由循环。</li><li>8位协议用来区分上层协议，其中 ICMP是1，TCP是6，UDP是17。</li><li>32位源端地址和32位目标端地址 。我们前面提到了<strong>IP协议是无状态，无连接的</strong>。因此<strong>每次发送数据都要携带目标端的IP地址，同样为了能让目标段给源端发响应数据包，IP头中还会带一个源端地址</strong>。这两个IP地址在某个局域网内传输时候，不会发生改变。但是经过网关的时候，NAT协议会将源和目标的MAC地址和IP地址进行替换。</li><li>IPv4最后一个选项是一个可变的最多为40个字节的可选信息。因为头部固定占了20个字节且IP头最大可以有60个字节，所以这个可选信息最多40个字节。这个部分可以记录以下几种信息：<ul><li>记录路由，沿途进过的路由。</li><li>时间戳，可用于计算每个路由之间的传输时间。</li><li>路由选择(松散路由选择、严格路由选择)，指定路由过程中必须经过或全部必须经过的路由。</li></ul></li></ul><h4 id="路由与转发"><a href="#路由与转发" class="headerlink" title="路由与转发"></a>路由与转发</h4><p>IP协议的一个核心的任务是数据报文的路由，即决定数据报到目标机器的路径。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210817233637.png"></p><p>简单分析上面的图从左下角的IP输入队列开始。</p><ul><li><p>当IP模块接收到来自数据链路层的IP数据报，它<strong>首先对该数据报的头部做CRC校验</strong>，确认无误后就分析头部的具体信息。</p></li><li><p>如果该IP数据报的头部中目标IP地址是本机的某个IP地址，或者是广播地址，即<strong>该数据包是给本机的，则IP模块就根据数据报头部中的协议字段来决定将它派发给某个上层应用协议</strong>，<strong>如果不是</strong>发现这个数据报不是给本机的，则也<strong>调用数据报转发子模块来处理</strong>该数据报。</p></li><li><p>数据报转发模块会检测系统是否<strong>允许转发，如果不允许，数据报将会被丢弃。如果允许，数据转发模块将会对数据报进行一些操作，然后交给IP报文输出模块</strong>。</p></li></ul><blockquote><p>转发模块会做如下操作：</p><ol><li><p>检查数据报文头部的TTL值，如果<strong>TTL值已经是0，则丢弃该数据报。</strong></p></li><li><p>检查数据头部的<strong>严格路由选择</strong>选项，如果该选项被设置，则检查数据报的目标IP地址是否是本机的某个IP，如果<strong>不是</strong>，发送一个<strong>ICMP差错报文给发送端。</strong></p></li><li><p>如果有必要，则给源端发送一个ICMP重定向报文，以告诉它一个更合理的下一跳路由。</p></li><li><p><strong>将TTL的值减1</strong>。</p></li><li><p><strong>处理IP头部</strong>选项</p></li><li><p>如果有必要，执行<strong>IP分片</strong>操作。</p></li></ol></blockquote><ul><li>IP数据报<strong>应该发送至哪个下一跳路由（或目标主机）</strong>，以及经过哪个网卡来发送，就是IP路由过程，即图中“计算下一跳路由模块。IP模块实现数据报路由的核心数据结构是<strong>IP路由表</strong>。这个表按照数据报的目标IP地址分类，同一类型的IP数据报将会被发往相同的下一跳路由或目标主机。</li><li>IP输出队列中存放的是<strong>所有等待发送的IP数据报。</strong></li><li>图中的虚线箭头显示了路由表更新的过程，这一过程指的通过路由协议或者route命令调整路由表，使之更快适应新的网络拓扑结构，成为IP路由策略。</li></ul><blockquote><p>IP的路由策略：</p><ol><li><p>查找路由表中的数据报的<strong>目标IP地址完全匹配</strong>的主机IP地址。如果找到，就使用该路由项，没找到转步骤2。</p></li><li><p>查找路由表中的数据报<strong>目标IP地址具有相同网络ID</strong>的网络IP地址。如果找到，就使用该路由项，没找到转步骤3。</p></li><li><p>选择<strong>默认路由项</strong>，这通常意味着数据报的下一跳是网关。</p></li></ol></blockquote><h3 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h3><p>我们通常在网络不是很好的时候，习惯使用<code>ping</code>命令去检查下网络的情况。而ping命令则是基于ICMP协议工作的。<code>ICMP</code> 全称 I<strong>nternet Control Message Protocol</strong>。即<strong>互联网控制报文协议</strong>。这里面的具体怎么“控制”的呢？网络包在异常复杂的网络环境中传输时，常常会遇到各种各样的问题。当遇到问题的时候，我们不能直接忽视问题。而是需要去探查问题的情况，然后<strong>根据结果来调整传输策略</strong>。I<strong>CMP报文是封装在IP包里面的</strong>，并且本身足够<strong>轻量</strong>以方便探测。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210904143454.png"></p><p>ICMP报文有很多种类型，不同的类型有不同的代码。<strong>最常用的类型是主动请求为8，主动请求的应答为0。</strong></p><h4 id="查询报文类型"><a href="#查询报文类型" class="headerlink" title="查询报文类型"></a>查询报文类型</h4><p>ICMP查询报文类型，即<strong>主动探测网络的报文类型</strong>。我们常用的ping命令就是<strong>查询报文，是一种主动请求，并且获得主动应答的ICMP协议。</strong>因此ping发出的包也是符合ICMP协议格式的，只不过它在后面增加了自己的格式。</p><p>对于ping 主动请求，进行网络抓包，称为<code>ICMP ECHO REQUEST</code>。同理主动请求的回复，称为<code>ICMP ECHO REPLY</code>。比起原生的 ICMP，这里多了两个字段，一个是标识符号，另外一个是序号，在选项数据中，ping 还会<strong>存放发送请求的时候，来计算往返时间，说明路程的长短。</strong></p><h4 id="差错报文类型"><a href="#差错报文类型" class="headerlink" title="差错报文类型"></a>差错报文类型</h4><p>如果一切顺利，我们我们收到主动请求回复，但是<strong>如果不顺利，那么我们就会收到差错报文</strong>，<strong>不同的异常情况也对应着不同的差错报文类型</strong>。其中比较常见的例子：<strong>终点不可达为 3， 源抑制为 4，超时为 11，重定向为 5</strong>。</p><ul><li><p>终点不可达：就是字面意思，目标不可达。</p></li><li><p>源抑制：让源站放慢发送速度。</p></li><li><p>时间超时：超过了网络包的生存时间，但是网络包还是没有达到目标端。</p></li><li><p>重定向：下次发给另外一个路由。</p></li></ul><h4 id="Traceroute：差错报文类型的使用"><a href="#Traceroute：差错报文类型的使用" class="headerlink" title="Traceroute：差错报文类型的使用"></a>Traceroute：差错报文类型的使用</h4><p>我之前会用<code>traceroute</code>命令去查看，数据包经过了哪些路由器，经过了多少跳。而<code>traceroute</code><strong>通过设置特殊的TTL，来追踪去往目的地沿途经过的路由器</strong>。当使用traceroute命令指向某个地址时，它会发送一个UDP的数据包，并且<strong>将TTL设置为1</strong>。这样遇到第一个路由，路由就会发现这个数据包“<strong>生命结束</strong>”了，并返回一个<strong>ICMP的差错报文类型是时间超时</strong>，这个报文里面就带有了这个路由器的IP地址。然后<strong>源端发送第二个UDP数据包，并将TTL设置为2</strong>。这个时候遇到第二个路由时就会返回一个ICMP差错报文。同理这样就可以一步步拿到沿途经过的路由IP。当然也有路由器压根就不会返回 ICMP差错报文，所以我们会看到输出“*<strong>”了。</strong>traceroute 还有一个作用就是故意不设置不分片，从而测试网络路径的MTU。</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>传输层位于TCP/IP协议族中的第4层，这一层的协议为应用进程提供端到端的通信服务。它提供面向连接的数据流支持、可靠连接、流量控制和多路重用等服务。这一层主要的协议有<code>TCP</code>和<code>UDP</code>。</p><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p>UDP是<code>User Datagram Protocol</code>的简称，中文名是<strong>用户数据报协议</strong>。UDP是一种无连接传输层协议，提供<strong>简单不可靠的信息传送服务</strong>。它在传输过程中并不会与目标端建立一个“连接”，只是简单的把数据包丢入网络中，然后任其自生自灭。如果把UDP比喻成人的话，UDP就像是一个相信世界美好的孩子。相信网路链路的“美好”即相信发出即可送达，没有经验也不会去处理一些拥塞，丢包的异常场景。</p><blockquote><p>这里提到了一个“连接”，这个连接是抽象的，并不是真的有两个通信端之间有一个类似“网线”一样的东西，他们只是靠通信的两端维护一定的数据结构保持某种状态，来记录和维护这样一个“连接”的状态。</p></blockquote><p>UDP的包头如下，通过包头我们也不难发现这是个简单没有什么复杂“想法”的协议。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210820000409.png"></p><h4 id="UDP的特点与使用场景"><a href="#UDP的特点与使用场景" class="headerlink" title="UDP的特点与使用场景"></a>UDP的特点与使用场景</h4><p>通过上面对UDP的介绍我们很容易就可以了解到UDP的特点：</p><ul><li><strong>轻量</strong>、<strong>简单</strong>。</li><li><strong>不能应对复杂的网络情况</strong>，没有流量控制，没有应答机制，不能处理丢包、重发、错序等问题。</li></ul><p>UDP虽然简单，但是简单也有简单的用法。基于这些特点，我们也可以用在以下的场景中：</p><ol><li><p><strong>需要资源少，网络情况比较好的内网，或者对于丢包不敏感的应用</strong>。DHCP协议就是基于UDP的，DHCP中一般获取IP地址都是内网请求，而且可以重复多次获取请求。</p></li><li><p><strong>不需要一对一建立连接，而是可以进行广播的应用</strong>。UDP不面向连接的功能，可以使用承载广播或者多播的协议。DHCP就是一种广播形式的协议。</p></li><li><p><strong>需要处理速度快，延时低，可以容忍少数丢包，但是要求即便网络拥塞也不能降低速率</strong>。UDP简单、处理速度快，在例如直播、游戏等实时性要求比较高的场景中，丢了一两个包也无关紧要，但是如果延时过高则很难接受，这种场景中也基本使用UDP进行传输。</p></li></ol><blockquote><p>简单并不代表低级，简单同时也意味着更高的可拓展性。</p></blockquote><p>同时因为UDP简单，可自定义拓展性也更高，因此现在也有不少基于UDP特性拓展出来上层协议和应用领域。</p><ol><li><p><strong>QUIC（全称 Quick UDP Internet Connections，快速UDP互联网连接）是Google 提出的一种基于UDP改进的通信协议</strong>，其目的是降低网络通行的延迟，提供更好的用户互动体验。QUIC在应用层上，会自己实现快速连接，减少重传时延，自适应拥塞控制。</p></li><li><p><strong>流媒体协议</strong>，现在很多直播协议是基于RTMP的，RTMP是基于TCP实现的流媒体协议，但是流媒体协议要求较高的实时性，现在很多直播平台都基于UDP实现了自己的流媒体传输协议。</p></li><li><p><strong>实时游戏领域</strong>，同理，如果想要更高的实时性，TCP并不是一个好的选择，基于UDP的实现的传输协议能带来更好的实时性游戏体验。</p></li><li><p><strong>IoT 物联网</strong>，物联网领域的终端往往都是嵌入式的系统，内存小性能差，可能维护一个TCP连接对于这些系统来说都是一个不小的开销。而且物联网也要求较高的实时性，Google 旗下的 Nest 建立的 Thread Group 推出的 Thread 物联网通行协议就是基于UDP的。</p></li><li><p><strong>移动通信领域</strong>。在4G网络里，移动流量上网的数据面对的协议 GTP-U是基于UDP的，因为移动通信协议本身就比较复杂，如果基于TCP，TCP的机制就会显得非常多余。</p></li></ol><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><p>前面我们介绍的<code>UDP</code>协议是面向无连接，不可靠的协议。而与<code>UDP</code>协议刚好相反，<code>TCP</code>是面向连接，提供可靠的传输层协议。其中我们熟知的<code>HTTP</code>、<code>FTP</code>、<code>SMTP</code>、<code>TELNET</code>和<code>SSH</code>等应用层协议都是基于<strong>可靠的TCP协议</strong>进行传输的。在复杂的网络环境中，保证可靠且高效的传输并非是一件容易的事。TCP协议通过<strong>三次握手四次挥手</strong>来建立稳定可靠的连接，通过<strong>应答机制、滑动窗口和拥塞窗口</strong>等流量控制手段来保证传输的可靠性。最后通过各种<strong>拥塞算法</strong>实现对网络带宽的充分利用。由于TCP协议涉及内容篇幅较长，我们会在下一小结进行详细分析和解读。😉</p><blockquote><p> TCP协议的算法设计能带来很多思想层面的启示。✊🏼</p></blockquote><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>在传输层的上层应用层有很多的协议，这些协议基于TCP的可靠传输和UDP的简单低延迟的特点，可以“玩出了很多花样“，其中有我们熟悉的用于邮件收发的<code>SMTP</code>协议，文件传输的<code>FTP</code>协议和用于服务器的<code>SSH</code>、<code>TELNET</code>协议等。当然还有我们最熟悉的用于WEB服务的<code>HTTP</code>协议。这里我们就不对<code>HTTP</code>协议的细节进行展开了，毕竟这个协议我们每天开发过程中多多少少都会用到。但是有一个问题我们聊到，就是<code>HTTP1</code>和<code>HTTP2</code>之间的区别。说实话<code>HTTP2</code>我也用的少，我们日常开发中的请求也基本都是<code>HTTP1</code>。</p><h3 id="HTTP1与HTTP2-之间的区别"><a href="#HTTP1与HTTP2-之间的区别" class="headerlink" title="HTTP1与HTTP2 之间的区别"></a>HTTP1与HTTP2 之间的区别</h3><p>HTTP/2（超文本传输协议第2版，最初命令为HTTP2.0），是HTTP协议的第二个版本，使用于万维网。HTTP/2是HTTP协议自1999年HTTP 1.1 发布后的首个更新，主要基于SPDY协议（是Google开发的基于TCP的应用层协议，用以最小网络延迟，提升网速，优化用户使用体验）。主要区别集中于下面四个方面：</p><ol><li><p><code>HTTP/2</code> 采用二进制格式而非文本格式。</p></li><li><p><code>HTTP/2</code> 是完全多路复用的，而非有序并阻塞的，只需要一个连接即可实现并行。</p></li><li><p>通过压缩包头，<code>HTTP/2</code>降低了开销。</p></li><li><p><code>HTTP/2</code>让服务器可以将主动的“推送”到客户端缓存中。</p></li></ol><h4 id="二进制协议"><a href="#二进制协议" class="headerlink" title="二进制协议"></a>二进制协议</h4><p>最新的<code>HTTP</code>版本在功能和属性（例如从文本协议转换为二进制协议）方面已经有了重大发展，<code>HTTP1.x</code>用于处理文本命令已完成请求-响应周期。<code>HTTP/2</code>将使用二进制命令执行相同的任务，此属性减轻了框架的复杂性，并简化了由于包含文本和可选空格的命令而导致混淆的命令和实现。<strong>使用HTTP/2实现的浏览器会将相同的文本命令转换为二进制命令，然后再通过网络传输。</strong></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210828235701.png"></p><h4 id="请求多路复用"><a href="#请求多路复用" class="headerlink" title="请求多路复用"></a>请求多路复用</h4><p><code>HTTP/1.x</code>有个问题叫线端阻塞（head-of-blocking），它是指一个连接（connection）一次只提交一个请求的效率比较高，多了就会变慢。<code>HTTP/1.1</code>试过用流水线（pipelining）来解决这个问题，但是效果并不理想（数据量较大或者速度较高的响应，会阻碍排在他后面的请求），此外，由于网络媒介（intermediary）和服务器不能很好的支持流水线，导致部署起来困难重重。<strong>而多路传输（Multiplexing）能很好的解决这些问题，因为它能同时处理很多个消息的请求和响应</strong>；甚至可以在传输过程中将一个消息和另一个掺杂在一起。所以客户端只需要一个连接就能加载一个页面。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210829005226.png"></p><h4 id="标头压缩"><a href="#标头压缩" class="headerlink" title="标头压缩"></a>标头压缩</h4><p><code>HTTP/2</code>压缩大量冗余头帧。它使用HPACK规范作为标头压缩的简单安全方法。客户端和服务器都在维护在先前的客户端-服务器请求中使用的标头列表。<strong>HPACK 在将每个标头传输到服务器之前先压缩每个标头的单独值，然后服务器在先前传输的标头值列表中查找编码信息，以重建完整的标头信息。</strong></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210829005245.png"></p><h4 id="HTTP-2服务器推送"><a href="#HTTP-2服务器推送" class="headerlink" title="HTTP/2服务器推送"></a>HTTP/2服务器推送</h4><p><strong>此功能使用服务器可以向客户端发送其他未缓存的信息，但这些信息会在以后的请求中得到预期</strong>。例如客户端请求资源X，并且可以理解资源Y被请求文件引用，则服务器可以选择将Y与X一起推送，而不是等待适当的客户端请求。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210829005612.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个部分我们介绍了大家大学基本上都记过的计算机网络模型，其中包括OSI七层模型，TCP/IP五层模型，其中OSI七层模型更多的是针对<strong>特定的功能</strong>来进行划分的，而TCP/IP五层模型则更多的针对的是<strong>协议划分</strong>，我们软件开发也更侧重于TCP/IP的五层模型。其中我们介绍了每一层都有哪些代表协议，不知道你现在还能不能记起来。在第二个部分，我们介绍了一个数据包是流转于模型的每一层之间，并且介绍了这个数据包是如何在网络上进行传输的。在最后一个大模块中，我们顺着模型从下往上介绍了每一层具有代表性的网络协议。在数据链路层，我们介绍了用于获取mac地址的ARP协议，网络层介绍了扛把子IP协议和网络探子ICMP协议，传输层则介绍了傻白甜的UDP协议和给TCP协议挖的一个坑。最后应用层，我们简单提了下HTTP/1和HTTP/2之间的区别。通过这一小节的梳理，基本上对网络也有了一个大体认知。下一节我们将深入梳理TCP协议，看看TCP是如何保证数据包又好又快地在复杂的网络环境中传输的。</p><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul><li><p><a href="https://time.geekbang.org/column/article/8094">趣谈网络协议（从物理层到MAC层：如何在宿舍里自己组网玩联机游戏？）</a></p></li><li><p><a href="https://time.geekbang.org/column/article/8445">趣谈网络协议（ICMP与ping：投石问路的侦察兵）</a></p></li><li><p><a href="https://blog.csdn.net/qq_41727218/article/details/82461089">IP协议详解</a></p></li><li><p><a href="https://book.douban.com/subject/26941639/">网络是怎么连接的</a></p></li><li><p><a href="https://haicoder.net/note/http-interview/http-interview-http1-http2.html">HTTP1与HTTP2区别</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>NIO与网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM 进阶 — 即时编译入门</title>
    <link href="/2021/08/02/icebreaker-of-JIT/"/>
    <url>/2021/08/02/icebreaker-of-JIT/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都知道Java是一个跨平台的语言，他的跨平台和C++的源码跨平台不同，Java是字节码跨平台，即Java编译器把Java源代码编译成 .class 的二进制文件，将.class文件部署到不同的JVM实例上解释执行。这种解释执行的方式显然没有直接机器码执行效率来的高。因此Java为了获取更高的执行效率，通过将热点代码编译成机器码，并存储起来反复执行来优化执行效率，那即时编译(JIT)是怎么工作的，工作流程又是怎样的？慢慢往下看。</p><h2 id="什么是即时编译（JIT）"><a href="#什么是即时编译（JIT）" class="headerlink" title="什么是即时编译（JIT）"></a>什么是即时编译（JIT）</h2><p>就像我们上面说的，Java是先用Java编译器先将Java代码编译成.class文件，然后在JVM上<strong>解释执行.class</strong>文件。而即时编译是一项用于<strong>提升应用程序运行效率的技术</strong>。通常而言，代码会先被Java虚拟机解释执行，之后反复执行的热点代码会被即时编译成为机器码，直接运行在底层硬件之上。</p><blockquote><p>解释执行方便但是速度比较慢。机器码执行编译麻烦，但是执行速度快。那么怎么调和这个矛盾呢？这里的思想和冷热表类似，我们可以用冷热代码来处理，热点代码我们使用即时编译器编译成机器码，非热点代码解释执行就好，这样我们尽可能地提高执行效率。</p></blockquote><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210726155531.png"></p><h2 id="代码状态收集—Profile"><a href="#代码状态收集—Profile" class="headerlink" title="代码状态收集—Profile"></a>代码状态收集—Profile</h2><p>Java会把热点代码编译成机器码执行，那什么才算是热点代码呢？我们可以类比到生活中，对于一个互联网公司怎样确定某些用户才算是重点用户？他们又是怎么判断的呢？很简单，通过埋点的方式收集用户行为数据，然后通过分析这些收集来的信息生成用户画像。其实对于代码行为分析的方式也是这样的一套逻辑。JVM会在代码运行期间收集一些数据来反应代码的执行情况，这里收集的数据我们称为程序的 profile 。</p><p>这是一种<strong>能反应程序运行状态的数据</strong>，其中最基础的包括<strong>方法的调用次数</strong>以及<strong>循环回边的执行次数</strong>。此外还包括，<strong>跳转次数和不跳转次数</strong>，以及<strong>非私有示例方法的调用指令</strong>、<strong>强制类型转换 checkcast 指令</strong>，类型测试 <strong>instanceof 指令</strong>和<strong>引用类型的数据存储 aastore 指令类型</strong>的 profile（receiver type profile）。这些数据收集能更好的优化代码，但也会带来额外编译性能开销。</p><blockquote><p>profile 收集的优缺点如下：</p><ul><li>收集程序数据，更好的编译优化代码。</li><li>编译性能下降（full profiling 相较于 no profiling 性能下降 30%）</li></ul></blockquote><p>可能有人会说，花费这么多代价收集这些profile不值得，的确如果只是简单的优化那的确不值得。但是<strong>即时编译器可以根据大量profile做出代码行为的猜测，从而做出比较激进的优化</strong>，这就很划算了。</p><h2 id="分层编译"><a href="#分层编译" class="headerlink" title="分层编译"></a>分层编译</h2><p>HotSpot虚拟机包含多个即时编译器<code>C1、C2和Graal</code>，其中，Graal是一个实验性质的即时编译器，可以通过参数<code>-XX:+UnlockExperimentalVMOptions</code> 和 <code>-XX:+UseJVMCICompiler</code> 启用，并且替换C2，在Java 7以前，我们需要根据程序，我们采用<strong>编译效率较快的C1</strong>，对应的参数 <code>-client</code>。对于执行时间较长的，或者对峰值性能有要求的程序，我们采用生成代码执行效率较快的C2，对应参数<code>-server</code>。</p><blockquote><p>C1编译速度快，C2执行速度快。</p></blockquote><p>Java7引入分层编译（对应参数 -XX:+TieredCompilation）的概念，综合了C1的启动性能和C2的峰值性能优势。分层编译将Java虚拟机的执行状态分为了五个层次。以下用<code>C1代码</code>来指代C1生成的机器码，C2代码来指代由C2生成的机器码，这以下的五个层级分别是：</p><ol><li><strong>解释执行。</strong></li><li><strong>执行不带 profiling 的 C1 代码。</strong></li><li><strong>执行仅带方法调用次数已经循环回边执行次数 profiling 的 C1 代码。</strong></li><li><strong>执行带有所有的profiling的C1代码。</strong></li><li><strong>执行 C2 代码。</strong></li></ol><p>通过情况下，C2代码的执行效率要比 C1 代码的高出<code>30%</code>以上，这是因为profiling 越多，其额外的性能开销越大。JVM中提供很多profile，其中 JDK 附带的 hprof。这些profiler 大多数通过注入（instrumentation）或者 JVWTI 事件来实现的。Java 虚拟机也内置了 profiling。在5个层次的执行状态中，1层和4层为终止状态。当一个方法被终止状态编译过后，如果编译后的代码并没有失效，那么Java虚拟机是不会再次发出该方法的编译请求。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210726225155.png"></p><p>上面列举了4个不同的编译路径。通常情况下，热点方法会被3层的C1编译，然后再被4层的C2编译。如果方法的字节码数目比较少，而且3层的profiling没有可收集数据。那么，<strong>Java 虚拟机断定该方法对于 C1 代码和 C2 代码的执行效率相同</strong>。在这种情况下，Java虚拟机会在3层编译之后，<strong>直接选择用1层的C1编译</strong>。由于这是一个终止状态，因此 Java 虚拟机不会继续用4层的C2编译。在C1忙碌的情况下，Java虚拟机在解释执行过程中对程序进行profiling，而后直接由4层的C2编译。在C2忙碌的情况下，方法会被2层的C1编译，然后再被3层的C1编译，以减少方法的3层的执行时间。</p><blockquote><p>热点代码 三层 C1 编译，C2 编译。</p><p>如果 C1 编译和 C2 编译效率相同，C1编译。</p><p>如果 C1 忙碌，直接 C2。</p><p>如果 C2 忙碌，2层C1编译，3层C1编译。</p></blockquote><p>Java8 默认开启了分层编译。不管是开启还是关闭分层编译，<code>-client</code>和<code>-server</code>用来选择即时编译器是无效的。<strong>当关闭分层编译的情况下，Java 虚拟机将直接采用C2。</strong>如果只是希望使用C1进行编译，可以使用下面的启动参数<code>-XX:TieredStopAtLevel=1</code>。</p><blockquote><p>即时编译的触发时机</p><p><strong>Java 虚拟机是根据方法的调用次数以及循环回边的执行次数来触发即时编译的</strong>。但是JVM不会对执行次数进行一个精准地计时，只需要一个足够大的大概的数值就能明确划分出热点代码区域。</p><p>在不启用分层编译的情况下，当方法的调用次数和循环回边的次数的和，超过由参数<code>—XX:ComoileThreshold</code>指定的阈值时（使用C1时，该值为1500，使用C2时，该值为10000），便会触发即时编译。当启动分层编译时，Java虚拟机将不会采用由参数 <code>-XX:ComplileThreshold</code> 指定阈值即该参数会失效，而是另外一套阈值系统，其中阈值大小是动态调整的。</p></blockquote><p>我们通过计算方法的<strong>调用次数</strong>、<strong>循环回边的执行次数</strong>来判断一个方法是否是热点方法。同时即时编译也是根据<strong>这两个计数器的和</strong>来触发的。但是实际上，除了以方法为单位的即时编译之外，Java虚拟机还存在<strong>另外一种以循环为单位的即时编译</strong>叫做<code>On-Stack-Replacement（OSR）</code>。循环回边计数器触发的就是这种类型的即时编译。OSR实际上是一种技术，**它指的是在程序执行过程中，动态地替换掉Java方法栈桢，从而使得程序能够在非方法入口处进行解释执行和编译后的代码之间的切换。事实上，去优化采用的技术也可以称之为OSR。<br>**</p><h2 id="基于Profiling的优化"><a href="#基于Profiling的优化" class="headerlink" title="基于Profiling的优化"></a>基于Profiling的优化</h2><p>我们提到的JVM会收集Profile对代码进行分析优化，但是收集profile本身又比较耗费性能，因此JVM通过分层编译的方式，来平衡收集profile带来的性能消耗和代码优化后的性能提升。其中分支 profile 和类型 profile 的收集将给应用程序带来不小的性能开销，正是这部分额外的 profiling，使得3层C1代码的性能比2层C1代码底30%。通常情况下，我们不会在解释执行的过程中收集分支 profile 以及类型 profile。<strong>只有在触发C1编译后，JVM 认为这部分代码有可能被C2编译，才会在该方法的C1代码中profiling。</strong>那么这些C2进行的<strong>比较激进的优化</strong>是怎样的呢？</p><h3 id="基于分支的-profile-优化"><a href="#基于分支的-profile-优化" class="headerlink" title="基于分支的 profile 优化"></a>基于分支的 profile 优化</h3><p>接下来我们看一个例子，下面这段代码中包含两个条件判断。第一个条件判断将测试所输入的 boolean 值，如果为true，则将局部变量 v 设置为所输入的 int 值。如果为 false，则将所输入的 int 值经过一番运算后，再存入局部变量 v 中。第二个判断测试局部变量 v 是否和所输入的 int 值相等。如果相等，则返回 0。如果不等，则将局部变量 v 经过一番运算之后，再将之返回。显然，当所输入的 boolean 值为 true 的情况下，这段代码将返回 0；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> f, <span class="hljs-keyword">int</span> in)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> v;<br>  <span class="hljs-keyword">if</span> (f) &#123;<br>    v = in;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    v = (<span class="hljs-keyword">int</span>) Math.sin(in);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (v == in) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) Math.cos(v);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 编译而成的字节码：</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span>, <span class="hljs-keyword">int</span>)</span></span>;<br>  Code:<br>     <span class="hljs-number">0</span>: iload_0<br>     <span class="hljs-number">1</span>: ifeq          <span class="hljs-number">9</span><br>     <span class="hljs-number">4</span>: iload_1<br>     <span class="hljs-number">5</span>: istore_2<br>     <span class="hljs-number">6</span>: goto          <span class="hljs-number">16</span><br>     <span class="hljs-number">9</span>: iload_1<br>    <span class="hljs-number">10</span>: i2d<br>    <span class="hljs-number">11</span>: invokestatic  java/lang/Math.sin:(D)D<br>    <span class="hljs-number">14</span>: d2i<br>    <span class="hljs-number">15</span>: istore_2<br>    <span class="hljs-number">16</span>: iload_2<br>    <span class="hljs-number">17</span>: iload_1<br>    <span class="hljs-number">18</span>: if_icmpne     <span class="hljs-number">23</span><br>    <span class="hljs-number">21</span>: iconst_0<br>    <span class="hljs-number">22</span>: ireturn<br>    <span class="hljs-number">23</span>: iload_2<br>    <span class="hljs-number">24</span>: i2d<br>    <span class="hljs-number">25</span>: invokestatic java/lang/Math.cos:(D)D<br>    <span class="hljs-number">28</span>: d2i<br>    <span class="hljs-number">29</span>: ireturn<br></code></pre></td></tr></table></figure><p>通过上面的代码我们可以得到如下简单的流程图。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210730000007.png"></p><p>假设应用程序调用该方法，所传入的 boolean 值皆为 true。那么，偏移量为 1 以及偏移量为 18 的条件跳转指令所对应的分支 profile 中，跳转的次数都为0。并且两个连续的if判断都可以跳转 true 分支。C2可以根据这两个分支 profile 做出假设，C2 便不再编译这两个条件跳转语句所对应的 flase 分支。那么激进的优化就可以做成下面这样：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210730001314.png"></p><p>总结一下，根据条件跳转指令的分支 profile，即时编译器可以将从未执行的分支剪掉，以免编译这些很有可能不会用到的代码，从而节省编译时间以及部署代码所要消耗的内存空间，此外，<strong>“剪枝”将精简程序的数据流，从而触发更多的优化。</strong>在现实中，分支 profile 出现仅跳转或者不跳转的情况并不多见。当然，即时编译器对分支 profile 的利用也不仅限于“剪枝”。它还会根据分支 profile，计算每一条程序执行路径的概率，以便某些编译器的优化优先处理概率较高的路径。</p><h3 id="基于类型-profile-的优化"><a href="#基于类型-profile-的优化" class="headerlink" title="基于类型 profile 的优化"></a>基于类型 profile 的优化</h3><p>这一个例子是关于instanceof以及方法调用类型 profile。下面这段代码将测试所传入的对象是否为 Exception 的实例，如果是，则返回它的系统的哈希值；如果不是，则返回它的哈希值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object in)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (in <span class="hljs-keyword">instanceof</span> Exception) &#123;<br>    <span class="hljs-keyword">return</span> System.identityHashCode(in);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> in.hashCode();<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 编译而成的字节码：</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(java.lang.Object)</span></span>;<br>  Code:<br>     <span class="hljs-number">0</span>: aload_0<br>     <span class="hljs-number">1</span>: <span class="hljs-keyword">instanceof</span> java/lang/Exception<br>     <span class="hljs-number">4</span>: ifeq          <span class="hljs-number">12</span><br>     <span class="hljs-number">7</span>: aload_0<br>     <span class="hljs-number">8</span>: invokestatic java/lang/System.identityHashCode:(Ljava/lang/Object;)I<br>    <span class="hljs-number">11</span>: ireturn<br>    <span class="hljs-number">12</span>: aload_0<br>    <span class="hljs-number">13</span>: invokevirtual java/lang/Object.hashCode:()I<br>    <span class="hljs-number">16</span>: ireturn<br></code></pre></td></tr></table></figure><p>假设应用程序调用该方法时，所传入的 Object 皆为 Integer 实例，那么，偏移量为1的 instanceof 指令的类型 profile 仅仅包含 Integer，偏移量为4的分支跳转语句的分支 profile 中不跳转的次数为0，偏移量为13的方法调用指令的类型 profile 仅包含 Integer。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210730004950.png"></p><p>在虚拟机中，instanceof 测试并不简单，如果instanceof的目标类型是 final 类型，那么Java虚拟机仅需要比较测试对象的动态类型是否为final类型即可，但是如果目标对象不是 final 类型，比如我们例子中的Exception类型，那么<strong>虚拟机需要从测试对象的动态类型开始，一次测试该类，该类的父类，祖先类，该类所有直接实现或者间接实现的接口是否与目标类型一致。</strong>不过我们的例子中，instanceof 指令的类型 profile 仅包含 Integer，根据这个信息，即时编译器可以假设，在接下来的执行过程中，所输入的 Object 对象仍然是Integer实例。如果是的话，继续执行一下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Integer</span> ... </span>&#123;<br>    ...<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Integer.hashCode(value);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>整体的代码逻辑如下图：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210730010254.png"></p><p>和上面那个例子一样，根据 profile 的分析，可以被激进的优化成以下形式：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210730010312.png"></p><p>和基于分支 profile 优化一样，基于类型 profile 的优化同样也是做出假设，从而精简控制流以及数据流，这两者核心都是假设。对于分支 profile，即时编译器假设的是仅执行某一个分支，对于类型 profile，即时编译器假设对象的动态类型仅为类型profile中的那几个。这一切都是假设成功的情况，那么如果假设失败了，那么程序该如何执行下去？</p><h3 id="去优化"><a href="#去优化" class="headerlink" title="去优化"></a>去优化</h3><p>前面的这些优化都是基于假设，那么如果假设不成立怎么办？JVM给的解决方案便是<strong>去优化</strong>，即从执行即时编译生成的机器码切换回解释执行。在生成的机器码中，即时编译器在假设失败的位置上插入一个陷阱（trap）。该陷阱实际上是<strong>一条call指令</strong>，调用至 Java 虚拟机里专门负责去优化。与普通的call指令不是一样的，去优化方法将更改栈上的返回地址，并不再返回即时编译器的生成的机器码中。<strong>在上面的流程图中有很多红色的方框问号，这些问号代表一个个陷阱调用，如果流程走到这里，便将发生去优化并且切换至解释执行</strong>。去优化的过程中，需要当前机器码的执行状态转换至某一行字节码之前的状态，并且从该字节码开始执行。这<strong>需要即时编译器在编译过程中记录好这两种状态的映射。如果去优化的原因和优化无关则保留机器码，如果去优化的原因和profile激进分析有关，那就直接删除机器码，依据profile重新生成一份。</strong></p><h2 id="中间表达形式（IR）"><a href="#中间表达形式（IR）" class="headerlink" title="中间表达形式（IR）"></a>中间表达形式（IR）</h2><p>前面我们介绍的优化过程都是以流程图的方式，展开即时编译器针对 profile 的优化，但是实际上不是这样的。在编译原理中，我们通常将编译器分为前端和后端。其中，前端会对所输入的程序进行此法分析、语法分析、语义分析，然后生成中间表达形式，也就是 IR（Intermediate Representation）。后段会对 IR 进行优化，然后生成目标代码。如果不考虑解释执行的话，从Jav源代码到最终的机器码实际上经过了两轮编译：<strong>源代码 – Java编译器 –&gt; Java字节码，Java字节码 –即时编译器 –&gt; 机器码。</strong></p><p>对于即时编译器来说，所输入的Java字节码剥离了很多的高级Java语法，而且采用的基于栈的计算模型非常容易建模。因此，即时编译器并不需要重新进行词法分析、语法分析以及语义分析，而是<strong>直接将Java字节码作为一种 IR</strong>。不过，Java 字节码本身不适合直接作为可供优化的IR，这是因为现代编译器一般采用的静态单赋值（Static Single Assignment， SSA）IR，这种IR特点是每个变量只能被赋值一次，而且只有当变量被赋值之后才能使用。其中 SSA IR 对优化也能提供很大的帮助：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sas">以下是几种常见的优化：<br>常量折叠：<span class="hljs-meta">x</span> = 3 <span class="hljs-comment">* 4;</span> -&gt; <span class="hljs-meta">x</span> = 12;<br>常量传播：<span class="hljs-meta">x</span> = 3；y = <span class="hljs-meta">x</span>; -&gt; y = 3;<br>强度削弱：y = <span class="hljs-meta">x</span> <span class="hljs-comment">* 5;</span> -&gt; y = (<span class="hljs-meta">x</span> &gt;&gt; 2) <span class="hljs-comment">* x;</span><br>死代码删除：<span class="hljs-meta">if</span>（2 &gt; 3) <span class="hljs-meta">x</span> = 1 <span class="hljs-meta">else</span> <span class="hljs-meta">x</span> = 2; -&gt; <span class="hljs-meta">x</span> = 2;<br>...<br></code></pre></td></tr></table></figure><h3 id="Sea-of-Nodes"><a href="#Sea-of-Nodes" class="headerlink" title="Sea-of-Nodes"></a>Sea-of-Nodes</h3><p>HotSpot 里面的C2采用的是一种名为 Sea-of-Nodes 的 SSA IR。它最大的特点，便是<strong>去除了变量的概念。</strong>直接采用变量所指向的值，来进行运算。在上面这段 SSA 伪代码中，我们使用多个变量名 x1、x2、y1和y2。这在 Sea-of-Nodes 将不复存在。取而代之的对应的值。比如说 Phi(y1，y2) 变成 Phi(0, 1)，后者本身也是一个值，被其他IR节点所依赖。正因如此，常量传播在 Sea-of-Nodes 中变成了一个no-op（no-opreation）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>    sum += i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这段代码对应的IR图如下所示：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210801142510.png"></p><p>上图中，B0、B1、B2这些都是一个个基本块，块与块之间通过红色和蓝色的线连接，其中<strong>红色代表数据流，蓝色代表控制流</strong>。上面的图中 0 代表程序入口，21代表程序出口。被控制流边所连接的是固定节点，其他的皆属于浮动节点。<strong>浮动节点的位置并不固定，在编译过程中，编译器需要多次计算浮动节点的具体的排布位置。这个过程我们称之为节点调度（node scheduling）。</strong></p><h3 id="Global-Value-Numbering-优化"><a href="#Global-Value-Numbering-优化" class="headerlink" title="Global Value Numbering 优化"></a>Global Value Numbering 优化</h3><p>因为Sea-of-Nodesde特性很容易做到的优化技术—Global Value Numbering（GVN）。GVN 是一种发现并消除等价计算的优化技术，<strong>例如如果一段程序中出现了多次操作相同的乘数，那么即时编译器可以将这些乘法合并为一个。从而降低输出机器码的大小。如果这些乘法出现在同一条执行路径上，那么GVN还将剩下冗余的乘法操作</strong>。所以如果一个浮动节点本身不存在内存副作用（可能会引发源代码中的不可能出现的情况），<strong>那么即时编译器只需要判断浮动节点是否已存在的浮动节点的类型相同，所输入的IR节点是否一致，便可以将这两个浮动节点归并为一个。</strong></p><blockquote><p>我们可以将 GVN 理解为在 IR 图上的公共子表达式消除（Common Subexpression Eliminate，CSE），类似消消乐。。</p></blockquote><h3 id="方法内联优化"><a href="#方法内联优化" class="headerlink" title="方法内联优化"></a>方法内联优化</h3><p>方法内联指的是：<strong>在编译过程中遇到方法调用时，将目标方法体纳入编译范围之中，并取代原方法调用的优化手段。</strong>方法内联不仅可以消除调用本身带来的性能开销，还可以进一步触发更多的优化，因此，他可以算是编译优化里面最重要的一环。在C2中，方法内联是在解析字节码的过程中完成的。每当碰到方法调用字节码时候，C2将决定是和否需要内联该方法调用。如果需要内联，则开始解析目标方法的字节码。</p><blockquote><p>即时编译器首先解析字节码，并生成IR图，然后在该 IR 图上进行优化。每个优化是由一个个独立的优化节点（optimization phase）串联起来的。每个优化阶段会对 IR 图进行转换。最后即时编译器根据 IR 图的节点以及调用顺序生成机器码。</p></blockquote><p>具体方法内联的过程可以看下面段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">方法内联的过程<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> value0 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> value1 = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> result = bar(flag);<br>    <span class="hljs-keyword">if</span> (result != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bar</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> flag ? value0 : value1;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中可以这段代码的 IR 图如下：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210801155649.png"></p><p>在编译 foo 方法时，其对应的 IR 图中将出现对 bar 方法的调用，即图上的5号 invoke 节点。如果内联算法判定应当内联对 bar 方法的调用时，那么即时编译器将开始解析 bar 的方法的字节码，并生成下面的IR图：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210801160041.png"></p><p>然后我们将这部分IR图复制带入到原本的图中，就可以得到下面图：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210801160519.png"></p><p>在完成这一步操作后，即时编译器还需要进行额外以下三步操作（图与图之间的连接操作）：</p><ol><li>被调用方法的传入参数节点，被替换成调用者方法进行方法调用时所传入的参数对应的节点。在例子中，我们将 bar 方法 IR 图的1号 P(0) 节点替换为 foo 方法 IR 图中的3号 LoadFiled 节点。（<strong>处理入口</strong>）。</li><li>在调用者方法的IR图中，所有指向原方法调用节点的数据依赖将重新指向被调用方法的返回节点。如果被调用方法存在多个返回节点，则生成一个 Phi 节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。（<strong>处理出口</strong>）。</li><li>如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该类型异常的路径覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。（<strong>处理异常</strong>）。</li></ol><p>再经过优化处理后，所有常量被消除后可以得到下面的优化结果：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210802005352.png"></p><p>再进一步优化（去除死代码），可以得到下面极简IR图：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210801171745.png"></p><p>前面我们提到了方法的静态绑定和动态绑定，当然在方法内联的过程中也会有这样的问题，当然方法内联也有各种不同的去虚化的优化手段。</p><h2 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h2><p>逃逸分析是一种确定指针动态范围的静态分析，他可以分析在程序的哪些地方可以访问到指针引用，在JVM的即时编译的语境下，逃逸分析将判断新建的对象是否存在逃逸，<strong>即时编译器判断对象是否逃逸的依据，一是对象是否存入堆中（静态字段或者堆中对象的实例字段），二是对象是否被传入未知的代码中。</strong>前者很好理解：一旦对象被存入堆中，其他线程便能获得到该对象的引用。即时编译器也因此无法追踪所有使用该对象的位置。对于后者，JVM的编译器是以方法为单位的，对于方法中未被内联的方法调用，即时编译器会将其当成未知代码，毕竟它无法确认该方法调用会不会将调用者或所传入的参数存储至堆中。因此，我们可以认为方法调用的调用者以及参数是逃逸的。通常，即时编译器里的逃逸分析是放在方法内联之后的，以便消除这些“未知代码”入口。那么基于逃逸分析我们能做哪些优化呢？</p><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>我们都知道在锁对象要在多个锁之间共享，让多个线程对一个锁对象进行竞争这才有意义。那么如果我们可以证明锁对象是不逃逸的，也就是每一个线程创建一个锁对象并对其进行加锁，这明显是没有意义的。因此我们只要判断某个锁对象是不逃逸的，也压根就没有锁竞争，那么其加锁操作也是没有意义的了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">new</span> Object()) &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="栈上分配标量替换"><a href="#栈上分配标量替换" class="headerlink" title="栈上分配标量替换"></a>栈上分配标量替换</h3><p>我们都知道 Java 虚拟机中对象都是在堆上分配的，而堆上的内容对任何线程都是可见的。与此同时，Java虚拟机需要对分配的内存空间进行管理，并且在对象不再被引用时回收其内存。那我们经常提到的栈上分配又是怎么一回事呢？<strong>这里如果我们可以用逃逸分析证明某些新建的对象不逃逸，那么JVM就完全可以把这个对象分配到栈上</strong>。而且在方法结束时，通过弹出当前方法栈来自动回收所分配的内存空间。这样一来我们便无须借助垃圾收集器来处理这些对象了。那问题来了，我们真的可以在栈上分配对象么？可以，但是需要大量的修改堆上分配对象的代码逻辑，<strong>因此HotSpot 虚拟机并没有采用栈上分配，而是使用标量替换这一技术来实现。所谓的标量就是仅能存储一个值的变量</strong>，比如Java代码中的局部变量，与之相反，聚合量则可能同时存储多个值，其中一个典型的例子便是 Java 对象。因此<strong>我们有了标量替换，我们就可以把对一个对象的字段访问拆分成多个标量的访问</strong>，这样就间接实现了栈上分配。</p><blockquote><p>我们还可以针对局部代码进行逃逸分析，进行一些代码优化的操作。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一小节我们介绍了入门了即时编译，即时编译是通过将部分热点代码进行优化编译成机器码的技术，可以极大的提升热点代码的执行效率。即时编译器是通过收集 profile 的方式对代码进行分析，然后通过分层编译对代码进行优化编译。在profile的优化中，我们主要介绍了两种方式，一种是基于流程分支的profile优化，另外一种是基于类型的profile优化，当然这种优化都是比较激进的，是通过统计猜测进行的优化，一旦猜错了。JVM会进行去优化操作并切回到解释执行。前面介绍的知识点只是我们抽象总结出来的，JVM真正的优化操作是通过 IR 实现的，即代码的中间表达形式。我们这里介绍了 Sea-of-Nodes，这是一种IR，是C2编译使用的IR，Sea-of-Nodes 中包含了很多的块和将他们连接起来的数据流和控制流，并且去除了变量的概念，有了Sea-of-Nodes我们就会有更多的优化想象空间了。因为我们的Sea-of-Nodes是由很多代码块构成的，我们可以消除功能类似的代码，这就是 Global Value Numbering 优化，我们还可以通过把方法嵌套编译在一起从而可以触发更多的优化操作。最后我们介绍了逃逸分析，逃逸分析简单来说就是分析一个对象的访问范围。通过逃逸分析，我们可以进行锁消除和通过标量替换实现栈上分配。</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://time.geekbang.org/column/article/14061">https://time.geekbang.org/column/article/14061</a></li><li><a href="https://time.geekbang.org/column/article/14070">https://time.geekbang.org/column/article/14070</a></li><li><a href="https://zhengyudi.github.io/2018/03/20/graal-intro/">https://zhengyudi.github.io/2018/03/20/graal-intro/</a></li><li><a href="https://www.zhihu.com/question/45910849">https://www.zhihu.com/question/45910849</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90">https://zh.wikipedia.org/wiki/逃逸分析</a> </li><li><a href="https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html">https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html</a> </li></ul>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM GC篇 — 日志解读与GC调优</title>
    <link href="/2021/07/25/gclog-and-optimize/"/>
    <url>/2021/07/25/gclog-and-optimize/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面一小节我们简单深入的梳理了垃圾收集器，梳理理解了各个垃圾收集器的原理和回收流程。其中主要的垃圾收集器可以分为“经典垃圾收集器”和“低延迟垃圾收集器”，其中经典垃圾收集器是以Parallel、CMS、G1为首在生产环境经过千万次历练的垃圾收集器。低延迟垃圾收集器们则是最新还处于实验状态的 shenandoah 和 ZGC，这一代的设计目标是在超大堆下依旧能能实现高吞吐低延迟的垃圾收集。但是就目前为止，我们在生产环境使用的依旧是经典垃圾收集器，因此在GC环境，我们依旧要对GC进行调优以充分利用物理机的性能。GC调优这个词我们听过很多次，但是真正操作起来可能会像不知所措无从下手。但是朋友不要害怕，有了前面的基础铺垫再加上一些监控指标，经过这一小节，你一定会对GC调优有个全面的认识。这一小节我们会先从GC调优分析开始，介绍调优的基本流程、GC的一些限制，随后我们进行一段调优的示例，在示例中我们如何进行日志分析与GC调优。最后我们会梳理一个简单的产生垃圾的程序，并分析在不同的垃圾收集器下的GC日志分析调优。</p><h2 id="日志解读"><a href="#日志解读" class="headerlink" title="日志解读"></a>日志解读</h2><p>上一节我们介绍了各种垃圾收集器。如果定位GC问题和GC调优我们离不开对GC日志的分析。在这个部分我们将分析这些GC的日志，来分GC日志中隐藏的GC垃圾收集信息。</p><h3 id="Serial-GC-日志解读"><a href="#Serial-GC-日志解读" class="headerlink" title="Serial GC 日志解读"></a>Serial GC 日志解读</h3><p>我们为了能够打开GC日志记录并指定垃圾收集器为Serial，我们使用下面的JVM启动参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-XX:+UseSerialGC -Xms512m -Xmx512m -Xloggc:gc.log </span><br><span class="hljs-deletion">-XX:+PrintGCDetails -XX:+PrintGCDateStamps</span><br></code></pre></td></tr></table></figure><p>使用上面的JVM启动参数，我们可以得到如下的日志输出（p.s. 已经手工折叠部分日志）</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Java</span> <span class="hljs-variable">HotSpot</span><span class="hljs-punctuation">(</span><span class="hljs-variable">TM</span><span class="hljs-punctuation">)</span> <span class="hljs-number">64</span><span class="hljs-operator">-</span><span class="hljs-variable">Bit</span> <span class="hljs-variable">Server</span> <span class="hljs-variable">VM</span> <span class="hljs-punctuation">(</span><span class="hljs-number">25.231</span><span class="hljs-operator">-</span><span class="hljs-variable">b11</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">for</span> <span class="hljs-variable">bsd</span><span class="hljs-operator">-</span><span class="hljs-variable">amd64</span> <span class="hljs-variable">JRE</span> <span class="hljs-punctuation">(</span><span class="hljs-number">1.8</span><span class="hljs-number">.0</span><span class="hljs-type">_</span><span class="hljs-number">231</span><span class="hljs-operator">-</span><span class="hljs-variable">b11</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-variable">built</span> <span class="hljs-variable">on</span> <span class="hljs-variable">Oct</span>  <span class="hljs-number">5</span> <span class="hljs-number">2019</span> <span class="hljs-number">03</span><span class="hljs-operator">:</span><span class="hljs-number">15</span><span class="hljs-operator">:</span><span class="hljs-number">25</span> <span class="hljs-variable">by</span> <span class="hljs-string">&quot;java_re&quot;</span> <span class="hljs-variable">with</span> <span class="hljs-variable">gcc</span> <span class="hljs-number">4.2</span><span class="hljs-number">.1</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Based</span> <span class="hljs-variable">on</span> <span class="hljs-variable">Apple</span> <span class="hljs-variable">Inc</span><span class="hljs-operator">.</span> <span class="hljs-variable">build</span> <span class="hljs-number">5658</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">LLVM</span> <span class="hljs-variable">build</span> <span class="hljs-number">2336.11</span><span class="hljs-number">.00</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">Memory</span><span class="hljs-operator">:</span> <span class="hljs-number">4</span><span class="hljs-variable">k</span> <span class="hljs-variable">page</span><span class="hljs-operator">,</span> <span class="hljs-variable">physical</span> <span class="hljs-number">16777216</span><span class="hljs-variable">k</span><span class="hljs-punctuation">(</span><span class="hljs-number">794016</span><span class="hljs-variable">k</span> <span class="hljs-variable">free</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-operator">/</span><span class="hljs-variable">proc</span><span class="hljs-operator">/</span><span class="hljs-variable">meminfo</span><span class="hljs-operator">:</span><br><br><span class="hljs-variable">CommandLine</span> <span class="hljs-variable">flags</span><span class="hljs-operator">:</span> <br>        <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">InitialHeapSize</span><span class="hljs-operator">=</span><span class="hljs-number">536870912</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">MaxHeapSize</span><span class="hljs-operator">=</span><span class="hljs-number">536870912</span> <br>    <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGC</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCDateStamps</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCDetails</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCTimeStamps</span> <br>    <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseCompressedClassPointers</span> <br>    <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseCompressedOops</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseSerialGC</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.329</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.177</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.329</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.177</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">DefNew</span><span class="hljs-operator">:</span> <span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">17472</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">157248</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0219962</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">45575</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">506816</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0221202</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.369</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.217</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.369</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.217</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">DefNew</span><span class="hljs-operator">:</span> <span class="hljs-number">157248</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">17471</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">157248</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0271936</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">185351</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">89018</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">506816</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0272786</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.412</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.260</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.412</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.260</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">DefNew</span><span class="hljs-operator">:</span> <span class="hljs-number">157247</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">17471</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">157248</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0224308</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">228794</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">134099</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">506816</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0225212</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-operator">......</span><br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.931</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.779</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.931</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.779</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">DefNew</span><span class="hljs-operator">:</span> <span class="hljs-number">157243</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">157243</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">157248</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000170</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.931</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.779</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Tenured</span><span class="hljs-operator">:</span> <span class="hljs-number">332621</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">341869</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349568</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0488050</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">489864</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">341869</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">506816</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0489122</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.05</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.997</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.845</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.997</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.845</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">DefNew</span><span class="hljs-operator">:</span> <span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">157248</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000171</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.997</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.845</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Tenured</span><span class="hljs-operator">:</span> <span class="hljs-number">341869</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">340659</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349568</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0437236</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">481645</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">340659</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">506816</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0438227</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.05</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">14.058</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.906</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">14.058</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.906</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">DefNew</span><span class="hljs-operator">:</span> <span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">157248</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000175</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">14.058</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.906</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Tenured</span><span class="hljs-operator">:</span> <span class="hljs-number">340659</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">342260</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349568</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0457178</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">480435</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">342260</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">506816</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0458305</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.05</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">14.122</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.970</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">14.122</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.970</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">DefNew</span><span class="hljs-operator">:</span> <span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">157248</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000197</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">14.122</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.970</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Tenured</span><span class="hljs-operator">:</span> <span class="hljs-number">342260</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">332184</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349568</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0497748</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">482036</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">332184</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">506816</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0498987</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.05</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.05</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">14.190</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">1.038</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">14.190</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">1.038</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">DefNew</span><span class="hljs-operator">:</span> <span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">157248</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000187</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">14.190</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">1.038</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Tenured</span><span class="hljs-operator">:</span> <span class="hljs-number">332184</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349062</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349568</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0294194</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">471960</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">353796</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">506816</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0295288</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">14.241</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">1.089</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">14.241</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">1.089</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Tenured</span><span class="hljs-operator">:</span> <span class="hljs-number">349062</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349274</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349568</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0397096</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">506055</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">351244</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">506816</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0398051</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-variable">Heap</span><br> <span class="hljs-variable">def</span> <span class="hljs-variable">new</span> <span class="hljs-variable">generation</span>   <span class="hljs-variable">total</span> <span class="hljs-number">157248</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">8337</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007a0000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007aaaa0000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007aaaa0000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">eden</span> <span class="hljs-variable">space</span> <span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>   <span class="hljs-number">5</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007a0000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007a08244f0</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007a8880000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">from</span> <span class="hljs-variable">space</span> <span class="hljs-number">17472</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>   <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007a8880000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007a8880000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007a9990000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">to</span>   <span class="hljs-variable">space</span> <span class="hljs-number">17472</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>   <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007a9990000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007a9990000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007aaaa0000</span><span class="hljs-punctuation">)</span><br> <span class="hljs-variable">tenured</span> <span class="hljs-variable">generation</span>   <span class="hljs-variable">total</span> <span class="hljs-number">349568</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">349274</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007aaaa0000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007c0000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007c0000000</span><span class="hljs-punctuation">)</span><br>   <span class="hljs-variable">the</span> <span class="hljs-variable">space</span> <span class="hljs-number">349568</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>  <span class="hljs-number">99</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007aaaa0000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007bffb6998</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007bffb6a00</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007c0000000</span><span class="hljs-punctuation">)</span><br> <span class="hljs-variable">Metaspace</span>       <span class="hljs-variable">used</span> <span class="hljs-number">2571</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">4486</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">4864</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><br>  <span class="hljs-variable">class</span> <span class="hljs-variable">space</span>    <span class="hljs-variable">used</span> <span class="hljs-number">276</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">386</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1048576</span><span class="hljs-built_in">K</span><br></code></pre></td></tr></table></figure><p>其中我们不难看出，输出的日志信息一眼看上去简单可以分为三大块，第一个部分是<strong>JVM版本信息和一些执行机器的内存情况</strong>，第二个部分<strong>日志块是JVM的执行参数和日志信息</strong>。最后一个块是<strong>程序结束时堆空间和元数据区的内存使用情况</strong>。来我们先看年轻代的GC日志，下面是我们GC日志中的第二次GC事件。</p><h4 id="MinorGC-日志分析"><a href="#MinorGC-日志分析" class="headerlink" title="MinorGC 日志分析"></a>MinorGC 日志分析</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2021</span>-<span class="hljs-number">07</span>-<span class="hljs-number">11</span>T<span class="hljs-number">18</span>:<span class="hljs-number">30</span>:<span class="hljs-number">13</span>.<span class="hljs-number">369</span>-<span class="hljs-number">0800</span>: <br>        <span class="hljs-attribute">0</span>.<span class="hljs-number">217</span>:<span class="hljs-meta"> [GC (Allocation Failure) 2021-07-11T18:30:13.369-0800: </span><br><span class="hljs-meta">        0.217: [DefNew: 157248K-&gt;17471K(157248K), 0.0271936 secs] 185351K-&gt;89018K(506816K), 0.0272786 secs] </span><br><span class="hljs-meta">                 [Times: user=0.01 sys=0.01, real=0.03 secs] </span><br></code></pre></td></tr></table></figure><p>从上面的日志信息中可以解读出如下的信息：</p><ol><li><code>2021-07-11T18:30:13.369-0800</code> GC事件开始的时间点，其中<code>-0800</code>表示当前时区为东八区，这只是一个标识，方便我们直观判断GC发生的时间点。后面的<code>0.217</code> 是GC事件相较于JVM启动事件的间隔，单位是秒。</li><li><code>GC</code>用来区分 MinorGC 还是 FullGC 的标志。<code>GC</code>表明这是一次小型GC（Minor GC），即年轻代GC。<code>Allocation Failure</code> 表示触发GC的原因。本次GC事件，是由于对象分配失败，即年轻代中没有空间用来存放新生成的对象引起的。</li><li><code>DefNew</code> 表示垃圾收集器的名称。这个名字表示：年轻代使用单线程、标记-复制、STW垃圾收集器。<code>157248K-&gt;17471K</code>表示在垃圾收集之前和只之后的年轻代使用量。<code>(157248K)</code>表示年轻代的总空间大小。进一步分析可知：GC之后年轻代使用率为11%。</li><li><code>185351K-&gt;89018K(506816K)</code>表示在垃圾收集之前和之后整个堆内存的使用情况。<code>(506816K)</code>则表示堆内存可以用空间总大小。进一步分析可知：GC之后堆内存使用量为17.5%</li><li><code>0.0272786 secs</code> GC事件持续的时间，以秒为单位。</li><li><code>[Times: user=0.01 sys=0.01, real=0.03 secs]</code> 此次GC时间的持续时间，通过三个部分衡量：<code>user</code>部分表示所有GC线程消耗的CPU时间；<code>sys</code>部分表示系统调用和系统等待事件消耗的时间。<code>real</code>则表示应用程序暂停的时间。因为串行垃圾收集器（Serial Garbage Collector）只使用单个线程，所以这里 <code>real ~= user + system</code>, 0.03秒也就是30毫秒。</li></ol><p>就经验而谈，这个暂停时间对大部分系统来说可以接受，但是对于某些延迟敏感的系统来说就是大问题了，就比如你打网络游戏，这30ms的暂停造成的延迟就会让你很难接受。</p><p>通过这样的解读我们可以分析JVM在GC时间中的内存使用以及变化情况。在此次垃圾收集之前，对内存总的使用量为<code>185351K</code>，而年轻代的空间使用量为<code>157248K</code>，不难算出老年代已经占用了<code>28103K</code>。当然这些数字中还蕴含更重要的信息：GC前后对比年轻代使用量从<code>157248K-&gt;17471K</code>减少了<code>139777K</code>，而总堆空间大小<code>185351K-&gt;89018K</code>只下降了<code>96333K</code>的内存空间。其中有<code>43444K(139777K-96333K)</code> 对象从年轻代提升到老年代。</p><blockquote><p>通过这么分析下来，不难看出，我们关注的主要两个数据：<strong>GC暂停时间</strong>，<strong>以及GC之后的内存使用量/使用率</strong>。</p></blockquote><h4 id="FullGC-日志分析"><a href="#FullGC-日志分析" class="headerlink" title="FullGC 日志分析"></a>FullGC 日志分析</h4><p>前面分析完成MinorGC的日志，我们对GC日志的格式也大致有一个概念了，我们接下来一起看看分析FullGC的日志。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.840</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.688</span><span class="hljs-operator">:</span> <br>        <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.840</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.688</span><span class="hljs-operator">:</span> <br>        <span class="hljs-punctuation">[</span><span class="hljs-variable">DefNew</span><span class="hljs-operator">:</span> <span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">139776</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">157248</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000196</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-variable">T18</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">13.840</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.688</span><span class="hljs-operator">:</span> <br>        <span class="hljs-punctuation">[</span><span class="hljs-variable">Tenured</span><span class="hljs-operator">:</span> <span class="hljs-number">309538</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">298877</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349568</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0407769</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">449314</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">298877</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">506816</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <br>    <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0409461</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>从上面的日志信息可以解读出这些信息：</p><ol><li><code>2021-07-11T18:30:13.840-0800</code> GC事件的开始时间。</li><li><code>[DefNew: 139776K-&gt;139776K(157248K), 0.0000196 secs]</code> 前面已经解读过这段日志了，因为内存分配失败，发生了一次年轻代GC。此次GC同样使用了 DefNew 收集器。注意：此次垃圾收集器消耗了<code>0.0000196 secs</code>，并且年轻代空间并没有减少，基本上可以确认这次GC事件没怎么处理年轻代。</li><li><code>Tenured</code> 用于清理老年代空间的垃圾收集器名称。<code>Tenured</code>表明使用的是单线程的STW垃圾收集器，使用的算法<code>标记-清理-整理（mark-sweep-compact）</code>。<code>309538K-&gt;298877K</code>表示GC前后的堆内存的使用情况，以及老年代的大小。<code>0.0407769 secs</code> 是清理老年代所花的时间。</li><li><code>449314K-&gt;298877K(506816K)</code> 在GC前后整个堆内存部分的使用情况，以及可用堆空间大小。</li><li><code>[Metaspace: 2565K-&gt;2565K(1056768K)], 0.0409461 secs]</code> Metaspace 空间的变化情况。可以看出，此次GC过程中 Metaspace 也没有变化。</li><li><code>[Times: user=0.04 sys=0.00, real=0.04 secs]</code> GC事件的持续事件，分别为<code>user</code>，<code>sys</code>，<code>real</code>三个部分。因为串行垃圾收集器只使用单个线程，所以<code>user + sys = real</code>。这40ms 的暂停挺尸，比前面年轻代的暂停增大了不少，这个时间和什么有关系呢？GC时间，与GC后存活的对象总数量关系最大。</li></ol><p>进一步分析这些数据，GC之后老年代的使用率为：298877K/349568K～=85.5%，这个比例已经很大了，这次老年代GC仅仅只回收了10661K，老年代触发FullGC但是老年代仅发生少量对象的回收，这个问题很大。同时我们发现和年轻代GC相比，比较明显的是这次GC事件还清理了老年代和Metaspace。</p><blockquote><p>FullGC, 我们主要关注GC之后内存使用量是否下降，其次关注暂停时间。简单估算，GC后老年代使用量约为350MB，GC耗时40ms左右，如果我们把内存扩大10倍，GC后的老年代也扩大10倍，那么耗时将会达到400ms甚至更高，就会明显影响到系统的吞吐了。这也就是我们说串行性能弱的原因。服务端一般不会使用Serial GC。</p></blockquote><h3 id="Parallel-GC-日志解读"><a href="#Parallel-GC-日志解读" class="headerlink" title="Parallel GC 日志解读"></a>Parallel GC 日志解读</h3><p>并行的垃圾收集器对年轻代使用<code>标记-复制(mark-copy)</code>算法，对老年代使用<code>标记-清除-整理(mark-sweep-compact)</code>算法。年轻代和老年代的垃圾回收时都会触发STW事件，暂停所有的应用线程，再执行垃圾收集，在执行<code>标记</code>和<code>复制/整理</code>阶段时都使用多个线程。因此得名”Parallel”。通过多个GC线程并行执行的方式，能使JVM在多CPU平台上的GC时间大幅减少。通过命令行参数<code>-XX:ParallelGCThread=N</code>可以指定GC线程的数量，其<strong>默认是CPU内核数量。</strong>下面三组命令是等价的都可以用来指定 ParallelGC</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-XX:+UseParallelGC</span><br><span class="hljs-deletion">-XX:+UseParallelOldGC</span><br><span class="hljs-deletion">-XX:+UseParallelGC -XX:+UseParallelOldGC</span><br></code></pre></td></tr></table></figure><p>我们使用下面的命令启动JVM，指定ParallelGC并指定输出gc日志。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-XX:+UseParallelGC -Xmx512m -Xms512m -Xloggc:gc.log </span><br><span class="hljs-deletion">-XX:+PrintGCDetails -XX:+PrintGCDateStamps</span><br></code></pre></td></tr></table></figure><p>行垃圾收集器会适用于多核服务器，其主要目标是增加系统吞吐量（也就是降低GC总体消耗的时间）。为了达成这个目标，会尽量使用尽可能多的CPU资源：</p><ul><li><strong>在GC事件执行期间，所有CPU内核都在并行地清理垃圾，所以暂停时间相对来说更短。</strong></li><li><strong>在两次GC事件中间的间隙期，不会启动GC线程，所以这段事件内不会消耗任何系统资源。</strong></li></ul><p>另一方面，因为并行GC的所有阶段都是不能中断，所以并行GC很可能会出现长时间的卡顿。因为GC期间应用线程是被暂停的。如果单次暂停时间比较长对延迟要求很高，应该选择其他的垃圾收集器。下面是一段并行GC的日志。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Java</span> <span class="hljs-variable">HotSpot</span><span class="hljs-punctuation">(</span><span class="hljs-variable">TM</span><span class="hljs-punctuation">)</span> <span class="hljs-number">64</span><span class="hljs-operator">-</span><span class="hljs-variable">Bit</span> <span class="hljs-variable">Server</span> <span class="hljs-variable">VM</span> <span class="hljs-punctuation">(</span><span class="hljs-number">25.231</span><span class="hljs-operator">-</span><span class="hljs-variable">b11</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">for</span> <span class="hljs-variable">bsd</span><span class="hljs-operator">-</span><span class="hljs-variable">amd64</span> <span class="hljs-variable">JRE</span> <span class="hljs-punctuation">(</span><span class="hljs-number">1.8</span><span class="hljs-number">.0</span><span class="hljs-type">_</span><span class="hljs-number">231</span><span class="hljs-operator">-</span><span class="hljs-variable">b11</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-variable">built</span> <span class="hljs-variable">on</span> <span class="hljs-variable">Oct</span>  <span class="hljs-number">5</span> <span class="hljs-number">2019</span> <span class="hljs-number">03</span><span class="hljs-operator">:</span><span class="hljs-number">15</span><span class="hljs-operator">:</span><span class="hljs-number">25</span> <span class="hljs-variable">by</span> <span class="hljs-string">&quot;java_re&quot;</span> <span class="hljs-variable">with</span> <span class="hljs-variable">gcc</span> <span class="hljs-number">4.2</span><span class="hljs-number">.1</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Based</span> <span class="hljs-variable">on</span> <span class="hljs-variable">Apple</span> <span class="hljs-variable">Inc</span><span class="hljs-operator">.</span> <span class="hljs-variable">build</span> <span class="hljs-number">5658</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">LLVM</span> <span class="hljs-variable">build</span> <span class="hljs-number">2336.11</span><span class="hljs-number">.00</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">Memory</span><span class="hljs-operator">:</span> <span class="hljs-number">4</span><span class="hljs-variable">k</span> <span class="hljs-variable">page</span><span class="hljs-operator">,</span> <span class="hljs-variable">physical</span> <span class="hljs-number">16777216</span><span class="hljs-variable">k</span><span class="hljs-punctuation">(</span><span class="hljs-number">589368</span><span class="hljs-variable">k</span> <span class="hljs-variable">free</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-operator">/</span><span class="hljs-variable">proc</span><span class="hljs-operator">/</span><span class="hljs-variable">meminfo</span><span class="hljs-operator">:</span><br><br><span class="hljs-variable">CommandLine</span> <span class="hljs-variable">flags</span><span class="hljs-operator">:</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">InitialHeapSize</span><span class="hljs-operator">=</span><span class="hljs-number">536870912</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">MaxHeapSize</span><span class="hljs-operator">=</span><span class="hljs-number">536870912</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGC</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCDateStamps</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCDetails</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCTimeStamps</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseCompressedClassPointers</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseCompressedOops</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseParallelGC</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.646</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.126</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">131584</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">21502</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">153088</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">131584</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">47819</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">502784</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0115940</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.05</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.676</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.156</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">153086</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">21497</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">153088</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">179403</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">91591</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">502784</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0159088</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.07</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.707</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.188</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">153081</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">21500</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">153088</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">223175</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">131269</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">502784</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0127081</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.736</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.216</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">153084</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">21503</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">153088</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">262853</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">177469</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">502784</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0151634</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.06</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.766</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.247</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">152950</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">21488</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">153088</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">308916</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">218539</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">502784</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0144377</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.06</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.797</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.277</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">152645</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">21497</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">80384</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">349697</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">259325</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">430080</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0132490</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.818</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.298</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">79609</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">36259</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">317437</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">280306</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0053558</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.833</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.313</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">95139</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">47999</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">339186</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">298252</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0076742</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.848</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.329</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">106879</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">57817</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">357132</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">316937</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0094228</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.05</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.866</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.347</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">116697</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">40221</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">375817</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">335350</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0127900</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.05</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.879</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.360</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">40221</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">295129</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">240839</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">335350</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">240839</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0331005</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.21</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.922</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.402</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58315</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">21801</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">299155</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">262641</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0018162</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-operator">......</span><br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.041</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">4.521</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58880</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">22595</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349642</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349114</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">408522</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">371709</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0395122</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.24</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.086</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">4.567</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58714</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">26618</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349114</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349513</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">407828</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">376131</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0603584</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.20</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.06</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.152</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">4.632</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58880</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">21695</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349513</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349492</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">408393</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">371188</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0389743</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.20</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.198</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">4.678</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58739</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">20467</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349492</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349172</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">408231</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">369639</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0382426</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.22</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.242</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">4.723</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58634</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">15899</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349172</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349690</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">407806</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">365590</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0375539</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.22</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.288</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">4.768</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58880</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">17101</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349690</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349416</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">408570</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">366517</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0399298</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.20</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.335</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">4.816</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58765</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">15555</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349416</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349180</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">408182</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">364736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0380655</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.21</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.381</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">4.861</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58681</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">18582</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349180</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349211</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">407862</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">367794</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0398334</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.23</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.429</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">4.909</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58773</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">16686</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349211</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349040</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">407985</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">365727</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0384315</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.20</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.474</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">4.955</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58872</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">17929</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349040</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349562</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">407913</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">367492</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0397868</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.22</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.522</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">5.002</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58877</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">15917</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349562</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349348</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">408440</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">365266</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0391023</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.22</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.571</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">5.051</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <br><span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58597</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">17423</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349348</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349274</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">407945</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">366698</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0379030</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.21</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-variable">Heap</span><br> <span class="hljs-variable">PSYoungGen</span>      <span class="hljs-variable">total</span> <span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">19718</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007b5580000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007c0000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007c0000000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">eden</span> <span class="hljs-variable">space</span> <span class="hljs-number">58880</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">33</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007b5580000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007b68c1a00</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007b8f00000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">from</span> <span class="hljs-variable">space</span> <span class="hljs-number">57856</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007b8f00000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007b8f00000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bc780000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">to</span>   <span class="hljs-variable">space</span> <span class="hljs-number">57856</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bc780000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007bc780000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007c0000000</span><span class="hljs-punctuation">)</span><br> <span class="hljs-variable">ParOldGen</span>       <span class="hljs-variable">total</span> <span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">349274</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007a0000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007b5580000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000007b5580000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">object</span> <span class="hljs-variable">space</span> <span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">99</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007a0000000</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007b5516a00</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-variable">x00000007b5580000</span><span class="hljs-punctuation">)</span><br> <span class="hljs-variable">Metaspace</span>       <span class="hljs-variable">used</span> <span class="hljs-number">2571</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">4486</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">4864</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><br>  <span class="hljs-variable">class</span> <span class="hljs-variable">space</span>    <span class="hljs-variable">used</span> <span class="hljs-number">276</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">386</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1048576</span><span class="hljs-built_in">K</span><br></code></pre></td></tr></table></figure><p>我们可以看到到ParallelGC 的GC日志和Serial GC 的日志大体结构是一致的，下面是MinorGC 的日志分析。</p><h4 id="MinorGC-日志分析-1"><a href="#MinorGC-日志分析-1" class="headerlink" title="MinorGC 日志分析"></a>MinorGC 日志分析</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">11.676</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.156</span><span class="hljs-operator">:</span> <br>        <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <br>        <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">153086</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">21497</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">153088</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">179403</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">91591</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">502784</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0159088</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.07</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br></code></pre></td></tr></table></figure><p>日志解读如下：</p><ol><li><code>2021-07-14T00:42:11.676-0800: 0.156</code> GC事件开始事件。</li><li><code>GC</code>用来区分MinorGC还是FullGC的标志，这里是一个次小型GC（MinorGC）。</li><li><code>PSYoungGen</code> 垃圾收集器名称。这个名字表示的是在年轻代中使用：并行GC的<code>标记-复制(mark-copy)</code>，全线暂停(STW)垃圾收集器。<code>153086K-&gt;21497K(153088K)</code> 则是GC前后年轻代的使用量，以及年轻代的总大小，简单计算可以得出GC后年轻代的使用率<code>21497K/153088K～=14%</code>。</li><li><code>179403K-&gt;91591K(502784K)</code> 则是GC前后堆空间的使用量，已经可用堆的总大小，GC后堆空间的使用率为<code>91591K/502784K～=18.2%</code>，由于这个GC事件发生在JVM刚启动，创建的对象并不多。这个使用量还算是健康的。</li><li><code>[Times: user=0.03 sys=0.07, real=0.02 secs]</code> GC事件的持续事件，通过三个部分衡量：<code>user</code>表示GC线程所消耗的总CPU时间，<code>sys</code>表示操作系统调用和系统等待事件所消耗的事件。<code>real</code>则表示应用程序实际消耗的时间。因为不是并不是所有的操作的过程都能全部并行，所有在ParallelGC中，<code>real～=(user+ system)/GC线程数</code>。</li></ol><p>通过这部分日志我们可以简单计算出：在GC之前，堆内存总使用量为<code>179403K</code>，其中年轻代为<code>153086K</code>，那么老年代的使用量为<code>179403K-153086K=26319K</code>这并不多，但是这是JVM的第二次GC时间，有一部分对象已经在第一次GC完成后直接被晋升进了老年代。在这次GC完成后年轻代减少了<code>153086K-21497K=131589K</code>，总堆减少了<code>179403K-91591K=87812K</code>，其中有<code>131589K-87812K=43777K</code>被提升到了老年代。老年代的总大小为<code>502784K-153088K=349696K</code>，当前老年代使用率为<code>(91591K-21497K)/349696K~=20%</code>。</p><blockquote><p>年轻代GC，我们可以关注业务暂停时间，以及GC后内存的使用率是否正常，<strong>但不用特别关注GC前的使用量，而且只要业务在运行，年轻代的对象分配就少不了，回收量也不会少。</strong></p></blockquote><h4 id="FullGC-日志分析-1"><a href="#FullGC-日志分析-1" class="headerlink" title="FullGC 日志分析"></a>FullGC 日志分析</h4><p>前面介绍了并行GC的年轻代的GC日志，下面我们看看老年代的GC日志。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T00</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span><span class="hljs-number">16.571</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">5.051</span><span class="hljs-operator">:</span> <br>            <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <br>            <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">58597</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">17423</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">116736</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <br>            <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">349348</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">349274</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">349696</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">407945</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">366698</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">466432</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <br>      <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2565</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0379030</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>      <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.21</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br></code></pre></td></tr></table></figure><p>在上面的日志中我们可以分析出以下的一些信息：</p><ol><li><code>2021-07-14T00:42:16.571-0800:</code> GC事件开始事件。</li><li><code>Full GC</code> 一次fullGC的标识，FullGC 表明本次GC事件清理老年代和年轻代，<code>Ergonomics</code> 是触发GC的原因，表示JVM内部环境认为此时可以进行一次垃圾收集。</li><li><code>[PSYoungGen: 58597K-&gt;17423K(116736K)]</code> 和上面的示例一样，清理年轻代的垃圾收集气是名为“PSYoungGen”的STW收集器，采用<code>标记-复制(mark-copy)</code>算法。年轻代使用量从<code>58597K</code>变为<code>17423K</code>，这里值得注意的是年轻代在fullGC之后并没有被清空，而是保留了部分的对象。因为这条GC日志是JVM执行后期的日志，其中老年代已经被塞的很满，不能支持这么多对象晋升。</li><li><code>ParOldGen</code>用于清理老年代空间的垃圾收集器类型。这里的使用的是 ParOldGen 的垃圾收集器，这是一款并行STW垃圾收集器，算法为<code>标记-清除-整理(mark-sweep-compact)</code>。简单计算下，GC之前老年代的使用率为 <code>349348K/349696K～=99.9%</code>，GC之后的老年代使用率为<code>349274K/349696K～=99.8%</code>，我们不难发现，fullGC并没有回收多少的内存，在这个阶段JVM在不断的进行垃圾回收，系统已经处于不可用的状态。</li><li><code>407945K-&gt;366698K(466432K)</code> 在垃圾收集之前和之后的堆内存的使用情况，以及可用堆内容总容量。简单分析可以知道，GC之前堆内存的使用率为：<code>407945K/466432K～=87.5%</code>，GC之后的堆内存为：<code>366698K/466432K～=78.6%</code></li><li><code>[Metaspace: 2565K-&gt;2565K(1056768K)]</code>前面我们也看到了关于Metaspace 空间类似的信息，可以看出，在GC事件中Metaspace 里面没有回收任何对象。</li><li><code>0.0379030 secs</code> GC事件的持续时间，以秒为单位。其中<code>[Times: user=0.21 sys=0.00, real=0.03 secs]</code>这也是GC的持续时间，<code>user + sys &gt; real</code>这是多线程执行的结果。同时这里约等于是7倍，而我的机器是4核8线程的，<strong>因为总有一定比例是不能并行执行的。</strong></li></ol><blockquote><p>FullGC 时我们<strong>更关注老年代的使用量有没有下降，以及下降了多少</strong>。如果FullGC之后内存不怎么下降，使用率还是很高，那就说明系统有问题了（就像我们的测试的系统一样）。</p></blockquote><h3 id="CMS-日志解读"><a href="#CMS-日志解读" class="headerlink" title="CMS 日志解读"></a>CMS 日志解读</h3><p>CMS也可以称为<code>并发标记清除垃圾收集器</code>。其设计目的是避免老年代GC时出现长时间的卡顿。默认情况下，CMS 使用的并发线程等于CPU内核数的<code>1/4</code>。如果CPU资源受限，CMS的吞吐量会比ParallelGC，我们可以通过下面的选项指定CMS垃圾收集器，并将日志输出到gc.log</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-XX:+UseConcMarkSweepGC -Xms512m -Xmx512m -Xloggc:gc.log </span><br><span class="hljs-deletion">-XX:+PrintGCDetails -XX:+PrintGCDateStamps</span><br></code></pre></td></tr></table></figure><p>和前面分析的串行GC和并行GC一样，我们将程序启动起来，看看CMS的GC日志和前面的日志有什么不一样。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs dns">Java HotSpot(TM) <span class="hljs-number">64</span>-Bit Server VM (<span class="hljs-number">25</span>.<span class="hljs-number">231</span>-b11) for bsd-amd64 JRE (<span class="hljs-number">1.8.0_231</span>-b11), built on Oct  <span class="hljs-number">5 2019 03</span>:<span class="hljs-number">15</span>:<span class="hljs-number">25</span> by &quot;java_re&quot; with gcc <span class="hljs-number">4</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span> (Based on Apple Inc. build <span class="hljs-number">5658</span>) (LLVM build <span class="hljs-number">2336.11.00</span>)<br>Memory: <span class="hljs-number">4</span>k page, physical <span class="hljs-number">16777216</span>k(<span class="hljs-number">395052</span>k free)<br><br>/proc/meminfo:<br><br>CommandLine flags: -XX:InitialHeapSize=<span class="hljs-number">536870912</span> -XX:MaxHeapSize=<span class="hljs-number">536870912</span> -XX:MaxNewSize=<span class="hljs-number">178958336</span> -XX:MaxTenuringThreshold=<span class="hljs-number">6</span> -XX:NewSize=<span class="hljs-number">178958336</span> -XX:OldPLABSize=<span class="hljs-number">16</span> -XX:OldSize=<span class="hljs-number">357912576</span> -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseParNewGC <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">03</span>.<span class="hljs-number">885-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">177</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">03</span>.<span class="hljs-number">885-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">177</span>: [ParNew: <span class="hljs-number">139776</span>K-&gt;<span class="hljs-number">17471</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0140477</span> secs] <span class="hljs-number">139776</span>K-&gt;<span class="hljs-number">46305</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0142076</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">03</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">06</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">01</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">03</span>.<span class="hljs-number">919-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">211</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">03</span>.<span class="hljs-number">920-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">212</span>: [ParNew: <span class="hljs-number">157247</span>K-&gt;<span class="hljs-number">17466</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0156764</span> secs] <span class="hljs-number">186081</span>K-&gt;<span class="hljs-number">88855</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0157774</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">04</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">06</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">02</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">03</span>.<span class="hljs-number">953-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">245</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">03</span>.<span class="hljs-number">953-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">245</span>: [ParNew: <span class="hljs-number">156977</span>K-&gt;<span class="hljs-number">17471</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0246946</span> secs] <span class="hljs-number">228367</span>K-&gt;<span class="hljs-number">132415</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0247922</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">17</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">01</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">02</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">03</span>.<span class="hljs-number">995-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">287</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">03</span>.<span class="hljs-number">995-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">287</span>: [ParNew: <span class="hljs-number">157247</span>K-&gt;<span class="hljs-number">17470</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0201253</span> secs] <span class="hljs-number">272191</span>K-&gt;<span class="hljs-number">170226</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0202300</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">14</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">01</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">02</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">031-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">323</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">031-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">323</span>: [ParNew: <span class="hljs-number">157246</span>K-&gt;<span class="hljs-number">17472</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0231496</span> secs] <span class="hljs-number">310002</span>K-&gt;<span class="hljs-number">211673</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0232433</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">15</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">02</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">02</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">054-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">346</span>: [GC (CMS Initial Mark) [<span class="hljs-number">1</span> CMS-initial-mark: <span class="hljs-number">194201</span>K(<span class="hljs-number">349568</span>K)] <span class="hljs-number">211961</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0002540</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">054-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">346</span>: [CMS-concurrent-mark-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">056-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">348</span>: [CMS-concurrent-mark: <span class="hljs-number">0.002/0</span>.<span class="hljs-number">002</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">056-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">348</span>: [CMS-concurrent-preclean-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">057-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">349</span>: [CMS-concurrent-preclean: <span class="hljs-number">0.000/0</span>.<span class="hljs-number">000</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">057-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">349</span>: [CMS-concurrent-abortable-preclean-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">071-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">363</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">071-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">363</span>: [ParNew: <span class="hljs-number">157248</span>K-&gt;<span class="hljs-number">17470</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0241859</span> secs] <span class="hljs-number">351449</span>K-&gt;<span class="hljs-number">252404</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0242841</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">15</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">01</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">02</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04.110-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">402</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04.110-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">402</span>: [ParNew: <span class="hljs-number">157246</span>K-&gt;<span class="hljs-number">17469</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0263702</span> secs] <span class="hljs-number">392180</span>K-&gt;<span class="hljs-number">298543</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0264666</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">16</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">01</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">02</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04.151-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">443</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04.151-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">443</span>: [ParNew: <span class="hljs-number">157245</span>K-&gt;<span class="hljs-number">17471</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0225189</span> secs] <span class="hljs-number">438319</span>K-&gt;<span class="hljs-number">339365</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0226134</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">14</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">01</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">02</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04.187-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">479</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04.187-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">479</span>: [ParNew: <span class="hljs-number">157247</span>K-&gt;<span class="hljs-number">157247</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0000202</span> secs]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04.187-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">479</span>: [CMS20<span class="hljs-number">21-07-15T01</span>:<span class="hljs-number">04:04.187</span>-<span class="hljs-number">0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">479</span>: [CMS-concurrent-abortable-preclean: <span class="hljs-number">0.004/0</span>.<span class="hljs-number">130</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">53</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">04</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">13</span> secs] <br> (concurrent mode failure): <span class="hljs-number">321893</span>K-&gt;<span class="hljs-number">251462</span>K(<span class="hljs-number">349568</span>K), <span class="hljs-number">0.0517382</span> secs] <span class="hljs-number">479141</span>K-&gt;<span class="hljs-number">251462</span>K(<span class="hljs-number">506816</span>K), [Metaspace: <span class="hljs-number">2565</span>K-&gt;<span class="hljs-number">2565</span>K(<span class="hljs-number">1056768</span>K)], <span class="hljs-number">0.0518718</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">05</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">01</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">05</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">256-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">548</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">256-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">548</span>: [ParNew: <span class="hljs-number">139630</span>K-&gt;<span class="hljs-number">17468</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0062663</span> secs] <span class="hljs-number">391093</span>K-&gt;<span class="hljs-number">300508</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0063611</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">05</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">01</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">262-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">554</span>: [GC (CMS Initial Mark) [<span class="hljs-number">1</span> CMS-initial-mark: <span class="hljs-number">283040</span>K(<span class="hljs-number">349568</span>K)] <span class="hljs-number">303587</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0001363</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">262-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">554</span>: [CMS-concurrent-mark-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">263-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">555</span>: [CMS-concurrent-mark: <span class="hljs-number">0.001/0</span>.<span class="hljs-number">001</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">263-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">555</span>: [CMS-concurrent-preclean-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">264-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">556</span>: [CMS-concurrent-preclean: <span class="hljs-number">0.000/0</span>.<span class="hljs-number">000</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">264-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">556</span>: [CMS-concurrent-abortable-preclean-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">277-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">569</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">277-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">569</span>: [ParNew: <span class="hljs-number">157244</span>K-&gt;<span class="hljs-number">17471</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0094558</span> secs] <span class="hljs-number">440284</span>K-&gt;<span class="hljs-number">344562</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0095346</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">07</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">01</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">287-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">579</span>: [CMS-concurrent-abortable-preclean: <span class="hljs-number">0.001/0</span>.<span class="hljs-number">024</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">09</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">02</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">287-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">579</span>: [GC (CMS Final Remark) [YG occupancy: <span class="hljs-number">27558</span> K (<span class="hljs-number">157248</span> K)]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">288-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">579</span>: [Rescan (parallel) , <span class="hljs-number">0.0002901</span> secs]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">288-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">580</span>: [weak refs processing, <span class="hljs-number">0.0000103</span> secs]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">288-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">580</span>: [class unloading, <span class="hljs-number">0.0001973</span> secs]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">288-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">580</span>: [scrub symbol table, <span class="hljs-number">0.0002563</span> secs]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">288-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">580</span>: [scrub string table, <span class="hljs-number">0.0001485</span> secs][<span class="hljs-number">1</span> CMS-remark: <span class="hljs-number">327091</span>K(<span class="hljs-number">349568</span>K)] <span class="hljs-number">354649</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0009506</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">289-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">580</span>: [CMS-concurrent-sweep-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">289-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">581</span>: [CMS-concurrent-sweep: <span class="hljs-number">0.000/0</span>.<span class="hljs-number">000</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">289-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">581</span>: [CMS-concurrent-reset-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">04</span>.<span class="hljs-number">289-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">581</span>: [CMS-concurrent-reset: <span class="hljs-number">0.000/0</span>.<span class="hljs-number">000</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br>......<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">774-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">066</span>: [GC (CMS Initial Mark) [<span class="hljs-number">1</span> CMS-initial-mark: <span class="hljs-number">349310</span>K(<span class="hljs-number">349568</span>K)] <span class="hljs-number">372830</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0002245</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">774-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">066</span>: [CMS-concurrent-mark-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">775-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">067</span>: [CMS-concurrent-mark: <span class="hljs-number">0.001/0</span>.<span class="hljs-number">001</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">775-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">067</span>: [CMS-concurrent-preclean-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">777-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">069</span>: [CMS-concurrent-preclean: <span class="hljs-number">0.001/0</span>.<span class="hljs-number">001</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">777-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">069</span>: [CMS-concurrent-abortable-preclean-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">777-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">069</span>: [CMS-concurrent-abortable-preclean: <span class="hljs-number">0.000/0</span>.<span class="hljs-number">000</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">777-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">069</span>: [GC (CMS Final Remark) [YG occupancy: <span class="hljs-number">42054</span> K (<span class="hljs-number">157248</span> K)]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">777-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">069</span>: [Rescan (parallel) , <span class="hljs-number">0.0003608</span> secs]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">777-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">069</span>: [weak refs processing, <span class="hljs-number">0.0000184</span> secs]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">777-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">069</span>: [class unloading, <span class="hljs-number">0.0002228</span> secs]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">778-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">070</span>: [scrub symbol table, <span class="hljs-number">0.0003110</span> secs]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">778-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">070</span>: [scrub string table, <span class="hljs-number">0.0002060</span> secs][<span class="hljs-number">1</span> CMS-remark: <span class="hljs-number">349310</span>K(<span class="hljs-number">349568</span>K)] <span class="hljs-number">391364</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0012004</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">778-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">070</span>: [CMS-concurrent-sweep-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">779-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">071</span>: [CMS-concurrent-sweep: <span class="hljs-number">0.000/0</span>.<span class="hljs-number">000</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">779-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">071</span>: [CMS-concurrent-reset-start]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">779-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">071</span>: [CMS-concurrent-reset: <span class="hljs-number">0.000/0</span>.<span class="hljs-number">000</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">794-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">086</span>: [GC (Allocation Failure) <span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">794-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">086</span>: [ParNew: <span class="hljs-number">157145</span>K-&gt;<span class="hljs-number">157145</span>K(<span class="hljs-number">157248</span>K), <span class="hljs-number">0.0000216</span> secs]<span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">794-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">086</span>: [CMS: <span class="hljs-number">349018</span>K-&gt;<span class="hljs-number">349462</span>K(<span class="hljs-number">349568</span>K), <span class="hljs-number">0.0484635</span> secs] <span class="hljs-number">506163</span>K-&gt;<span class="hljs-number">363671</span>K(<span class="hljs-number">506816</span>K), [Metaspace: <span class="hljs-number">2565</span>K-&gt;<span class="hljs-number">2565</span>K(<span class="hljs-number">1056768</span>K)], <span class="hljs-number">0.0485969</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">05</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">05</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">843-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">135</span>: [GC (CMS Initial Mark) [<span class="hljs-number">1</span> CMS-initial-mark: <span class="hljs-number">349462</span>K(<span class="hljs-number">349568</span>K)] <span class="hljs-number">363959</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0001943</span> secs] [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">843-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">135</span>: [CMS-concurrent-mark-start]<br>Heap<br> par new generation   total <span class="hljs-number">157248</span>K, used <span class="hljs-number">19849</span>K [<span class="hljs-number">0</span>x000000<span class="hljs-number">07a0000000</span>, <span class="hljs-number">0</span>x00000007aaaa0000, <span class="hljs-number">0</span>x00000007aaaa0000)<br>  eden space <span class="hljs-number">139776</span>K,  <span class="hljs-number">14</span>% used [<span class="hljs-number">0</span>x000000<span class="hljs-number">07a0000000</span>, <span class="hljs-number">0</span>x000000<span class="hljs-number">07a13627d0</span>, <span class="hljs-number">0</span>x000000<span class="hljs-number">07a8880000</span>)<br>  from space <span class="hljs-number">17472</span>K,   <span class="hljs-number">0</span>% used [<span class="hljs-number">0</span>x000000<span class="hljs-number">07a9990000</span>, <span class="hljs-number">0</span>x000000<span class="hljs-number">07a9990000</span>, <span class="hljs-number">0</span>x00000007aaaa0000)<br>  to   space <span class="hljs-number">17472</span>K,   <span class="hljs-number">0</span>% used [<span class="hljs-number">0</span>x000000<span class="hljs-number">07a8880000</span>, <span class="hljs-number">0</span>x000000<span class="hljs-number">07a8880000</span>, <span class="hljs-number">0</span>x000000<span class="hljs-number">07a9990000</span>)<br> concurrent mark-sweep generation total <span class="hljs-number">349568</span>K, used <span class="hljs-number">349462</span>K [<span class="hljs-number">0</span>x00000007aaaa0000, <span class="hljs-number">0</span>x000000<span class="hljs-number">07c0000000</span>, <span class="hljs-number">0</span>x000000<span class="hljs-number">07c0000000</span>)<br> Metaspace       used <span class="hljs-number">2571</span>K, capacity <span class="hljs-number">4486</span>K, committed <span class="hljs-number">4864</span>K, reserved <span class="hljs-number">1056768</span>K<br>  class space    used <span class="hljs-number">276</span>K, capacity <span class="hljs-number">386</span>K, committed <span class="hljs-number">512</span>K, reserved <span class="hljs-number">1048576</span>K<br></code></pre></td></tr></table></figure><p>以上是CMS的一部分GC日志，相比于串行GC/并行GC来说，CMS 的日志信息复杂了很多，这一方面是因为CMS拥有更加精细的GC步骤，另一方面GC日志很详细就意味着暴露出来的问题也更加全面细致。</p><h4 id="MinorGC-日志分析-2"><a href="#MinorGC-日志分析-2" class="headerlink" title="MinorGC 日志分析"></a>MinorGC 日志分析</h4><p>其中GC详情的前面几行是年轻代MinorGC时间。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-attribute">2021</span>-<span class="hljs-number">07</span>-<span class="hljs-number">15</span>T<span class="hljs-number">01</span>:<span class="hljs-number">04</span>:<span class="hljs-number">03</span>.<span class="hljs-number">885</span>-<span class="hljs-number">0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">177</span>: <br>[GC (Allocation Failure) <br><span class="hljs-attribute">2021</span>-<span class="hljs-number">07</span>-<span class="hljs-number">15</span>T<span class="hljs-number">01</span>:<span class="hljs-number">04</span>:<span class="hljs-number">03</span>.<span class="hljs-number">885</span>-<span class="hljs-number">0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">177</span>: <br>        [ParNew: 139776K-&gt;17471K(157248K), 0.0140477 secs] <br>            <span class="hljs-attribute">139776K</span>-&gt;<span class="hljs-number">46305</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0</span>.<span class="hljs-number">0142076</span> secs] <br>    [Times: user=0.03 sys=0.06, real=0.01 secs] <br></code></pre></td></tr></table></figure><ol><li><code>2021-07-15T01:04:03.885-0800: 0.177:</code> GC事件开始的事件。</li><li><code>GC (Allocation Failure)</code> 用来区分MinorGC还是FullGC的标志。<code>GC</code> 表明这是一次<code>小型GC</code>；<code>Allocation Failure</code>表示触发GC的原因。本次GC事件，是由年轻代可用空间不足，新对象的内存分配失败引起的。</li><li><code>[ParNew: 139776K-&gt;17471K(157248K), 0.0140477 secs]</code> 其中<code>ParNew</code>是垃圾收集器的名称，对应的就是前面打印的<code>-XX:+UseParNewGC</code>这个命令行标志。表示年轻代中使用的：<code>并行的标记-复制(mark-copy)</code>垃圾收集器，专门设计了用来配合CMS 的垃圾收集器，因为CMS只负责回收老年代。后面的数字表示GC前后的年轻代使用量变化，以及年轻代的总大小。<code>0.0140477 secs</code>是消耗的时间。</li><li><code>139776K-&gt;46305K(506816K), 0.0142076 secs</code> 表示GC前后堆内存的使用量变化，以及堆空间的内存大小。消耗时间是<code>0.0142076 secs</code>，和前面的 ParNew 部分的时间基本上一样。</li><li><code>[Times: user=0.03 sys=0.06, real=0.01 secs]</code> GC事件的持续事件，<code>user</code>是GC线程所消耗的总CPU时间：<code>sys</code> 是操作系统调用和系统等待事件消耗的事件；应用程序实际暂停时间<code>real ～= (user + sys)/GC线程数</code>。</li></ol><p>通过进一步计算我们可以知道，在GC之前，年轻代是使用量为 <code>139776K/157248K ～= 88.9%</code>。堆内存的使用率为<code>139776K/506816K ～= 27.6%</code>，简单估算下老年代的使用量，在ParNew GC 开始前，年轻代和整堆使用量相同因此，老年代在GC之前的使用量为0。而GC后老年代的使用率为<code>(46305-17471)/506816K~=5.6%</code>。</p><h4 id="FullGC-日志分析-2"><a href="#FullGC-日志分析-2" class="headerlink" title="FullGC 日志分析"></a>FullGC 日志分析</h4><p>CMS 的日志风格和之前的集中日志的风格不一样，CMS的日志包含了CMS执行的多个阶段的内存使用信息，同时也包含了更多更详细的GC信息，下面就是一条完整的GC日志信息。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs subunit">2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.774<span class="hljs-string">-0800</span>: 5.066: <br>        [GC (CMS Initial Mark) <br>    [1 CMS-initial-mark: 349310K(349568K)] 372830K(506816K), 0.0002245 secs] <br>    [Times: user=0.00 sys=0.00, real=0.00 secs] <br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.774<span class="hljs-string">-0800</span>: 5.066: [CMS-concurrent-mark-start]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.775<span class="hljs-string">-0800</span>: 5.067: <br>        [CMS-concurrent-mark: 0.001/0.001 secs] <br>    [Times: user=0.00 sys=0.00, real=0.00 secs] <br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.775<span class="hljs-string">-0800</span>: 5.067: [CMS-concurrent-preclean-start]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.777<span class="hljs-string">-0800</span>: 5.069: <br>        [CMS-concurrent-preclean: 0.001/0.001 secs] <br>    [Times: user=0.00 sys=0.00, real=0.00 secs] <br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.777<span class="hljs-string">-0800</span>: 5.069: [CMS-concurrent-abortable-preclean-start]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.777<span class="hljs-string">-0800</span>: 5.069: <br>        [CMS-concurrent-abortable-preclean: 0.000/0.000 secs] <br>    [Times: user=0.00 sys=0.00, real=0.00 secs] <br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.777<span class="hljs-string">-0800</span>: 5.069: [GC (CMS Final Remark) [YG occupancy: 42054 K (157248 K)]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.777<span class="hljs-string">-0800</span>: 5.069: [Rescan (parallel) , 0.0003608 secs]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.777<span class="hljs-string">-0800</span>: 5.069: [weak refs processing, 0.0000184 secs]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.777<span class="hljs-string">-0800</span>: 5.069: [class unloading, 0.0002228 secs]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.778<span class="hljs-string">-0800</span>: 5.070: [scrub symbol table, 0.0003110 secs]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.778<span class="hljs-string">-0800</span>: 5.070: [scrub string table, 0.0002060 secs]<br>    [1 CMS-remark: 349310K(349568K)] 391364K(506816K), 0.0012004 secs] <br>    [Times: user=0.01 sys=0.00, real=0.00 secs] <br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.778<span class="hljs-string">-0800</span>: 5.070: [CMS-concurrent-sweep-start]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.779<span class="hljs-string">-0800</span>: 5.071: <br>        [CMS-concurrent-sweep: 0.000/0.000 secs] <br>    [Times: user=0.00 sys=0.00, real=0.00 secs] <br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.779<span class="hljs-string">-0800</span>: 5.071: [CMS-concurrent-reset-start]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-15</span>T01:04:08.779<span class="hljs-string">-0800</span>: 5.071: <br>        [CMS-concurrent-reset: 0.000/0.000 secs] <br>    [Times: user=0.00 sys=0.00, real=0.00 secs] <br></code></pre></td></tr></table></figure><p>在实际的运行阶段，CMS在进行老年代的并发垃圾回收时，可能伴随多次年轻代的MinorGC，在这种情况下，FullGC的日志中可能掺杂多次MinorGC事件。接下来我们会详细分析CMS日志的每个部分，如果又忘记的小伙伴可以去垃圾收集器（上）复习下CMS的垃圾收集过程。</p><h5 id="阶段1：Initial-Mark（初始标记）"><a href="#阶段1：Initial-Mark（初始标记）" class="headerlink" title="阶段1：Initial Mark（初始标记）"></a>阶段1：Initial Mark（初始标记）</h5><p>前面提到过，这个阶段伴随着STW暂停。初始标记的目标是标记所有的根对象，包括<code>GC ROOT</code>直接引用的对象，以及被年轻代中所有存活对象所引用的对象。后面这部分也非常重要，因为老年代是独立进行回收的。先看这个阶段的日志信息。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2021-07-15T01:04:08.774-0800: 5.066: <br>        [GC (CMS Initial Mark) <br>    [1 CMS-initial-mark: 349310K(349568K)] 372830K(506816K), 0.0002245 secs] <br>    [Times: <span class="hljs-attribute">user</span>=0.00 <span class="hljs-attribute">sys</span>=0.00, <span class="hljs-attribute">real</span>=0.00 secs] <br></code></pre></td></tr></table></figure><blockquote><ol><li><code>2021-07-15T01:04:08.774-0800: 5.066:</code> GC开始事件，这个部分就不重复。</li><li><code>CMS Initial Mark</code>这个阶段的名称为 “<code>Initial Mark</code>”，会标记所有的<code>GC ROOT</code>。</li><li><code>[1 CMS-initial-mark: 349310K(349568K)]</code> 这个部分数字表示老年代的使用量，以及老年代的空间大小。</li><li><code>372830K(506816K), 0.0002245 secs</code> 这个是当前堆内存的使用量，以及可用堆的大小，消耗的时间，可以看出这个时间非常短，只有<code>0.02</code>毫秒，因为要标记的Root数量非常少。</li><li><code>[Times: user=0.00 sys=0.00, real=0.00 secs]</code> 初始标记时间暂停的时间，我们可以看到耗费时间非常短，基本可以忽略不计。</li></ol></blockquote><h5 id="阶段2：Concurrent-Mark（并发标记）"><a href="#阶段2：Concurrent-Mark（并发标记）" class="headerlink" title="阶段2：Concurrent Mark（并发标记）"></a>阶段2：Concurrent Mark（并发标记）</h5><p>在并发标记阶段，CMS 从前一段 “Inital Mark”找到ROOT开始算起，遍历老年代并标记所有的存活对象。这个阶段的GC日志如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2021-07-15T01:04:08.774-0800: 5.066: [CMS-concurrent-mark-start]<br>2021-07-15T01:04:08.775-0800: 5.067: <br>        [CMS-concurrent-mark: 0.001/0.001 secs] <br>    [Times: <span class="hljs-attribute">user</span>=0.00 <span class="hljs-attribute">sys</span>=0.00, <span class="hljs-attribute">real</span>=0.00 secs] <br></code></pre></td></tr></table></figure><blockquote><ol><li><code>CMS-concurrent-mark-start</code> -指明了是CMS垃圾收集器所处的阶段为并发标记”Concurrent Mark”。</li><li><code>0.001/0.001 secs</code> 此阶段的持续时间，分别是GC线程消耗的时间和实际消耗的时间。</li><li><code>[Times: user=0.00 sys=0.00, real=0.00 secs]</code> 执行实现对并发阶段来说并没有多少意义，因为是从并发标记开始时刻计算的，而这段时间应用线程也在执行，所以这个时间只是一个大概的值。</li></ol></blockquote><h5 id="阶段3：Concurrent-Preclean（并发预清理）"><a href="#阶段3：Concurrent-Preclean（并发预清理）" class="headerlink" title="阶段3：Concurrent Preclean（并发预清理）"></a>阶段3：Concurrent Preclean（并发预清理）</h5><p>此阶段同样是与应用线程并发执行的，不需要停止应用线程。这阶段的并发日志如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2021-07-15T01:04:08.775-0800: 5.067: [CMS-concurrent-preclean-start]<br>2021-07-15T01:04:08.777-0800: 5.069: <br>        [CMS-concurrent-preclean: 0.001/0.001 secs] <br>    [Times: <span class="hljs-attribute">user</span>=0.00 <span class="hljs-attribute">sys</span>=0.00, <span class="hljs-attribute">real</span>=0.00 secs]<br></code></pre></td></tr></table></figure><p>简单解读：</p><blockquote><ol><li><code>CMS-concurrent-preclean</code> 表明这是并发清理阶段的日志，这个阶段会统计前面的并发标阶段执行过程中发生了改变的对象。</li><li><code>0.001/0.001 secs</code> 此阶段的持续时间，分别是GC线程运行时间和实际占用的时间。<code>Times</code>部分和前面的一样这里就不重复介绍了。</li></ol></blockquote><h5 id="阶段4：Concurrent-Abortable-Preclean（可取消的并发预清理）"><a href="#阶段4：Concurrent-Abortable-Preclean（可取消的并发预清理）" class="headerlink" title="阶段4：Concurrent Abortable Preclean（可取消的并发预清理）"></a>阶段4：Concurrent Abortable Preclean（可取消的并发预清理）</h5><p>此阶段也不停止应用线程，尝试在就触发STW的Final Remark 阶段开始之前，尽可能地多干一些活。本阶段的具体时间取决于多种因素，因为它循环做同样的事情，直到满足某一个退出条件（如迭代次数，有用工作量，消耗的系统时间等等）。以下是GC日志：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2021-07-15T01:04:08.777-0800: 5.069: [CMS-concurrent-abortable-preclean-start]<br>2021-07-15T01:04:08.777-0800: 5.069: <br>        [CMS-concurrent-abortable-preclean: 0.000/0.000 secs] <br>    [Times: <span class="hljs-attribute">user</span>=0.00 <span class="hljs-attribute">sys</span>=0.00, <span class="hljs-attribute">real</span>=0.00 secs] <br></code></pre></td></tr></table></figure><p>解读如下：</p><blockquote><ol><li><code>CMS-concurrent-abortable-preclean</code> 表明此阶段的名称：Concurrent-Abortable-Preclean。</li><li><code>0.000/0.000 secs</code> 此阶段GC线程的运行时间和实际占用时间，本质上来说，GC线程试图在执行STW暂停之前等待尽可能长的时间，默认条件下，此阶段可以持续最长5秒钟的时间。</li></ol></blockquote><p>此阶段完成的工作可能对STW停顿时间有较大的影响，并且有许多的重要配置选项和失败模式。</p><h5 id="阶段5：Final-Remark（最终标记）"><a href="#阶段5：Final-Remark（最终标记）" class="headerlink" title="阶段5：Final Remark（最终标记）"></a>阶段5：Final Remark（最终标记）</h5><p>最终标记是此次GC事件中的第二次（也是最后一次）STW停顿。本阶段的目标是完成老年代的所有存活对象的标记。因为之前的预清理阶段是并发执行的，有可能GC线程跟不上应用线程的修改速度，所以需要一次STW暂停来处理各种复杂的情况。通常CMS会尝试在年轻代尽可能空的情况下执行final remark阶段，以避免连续触发多次STW时间。以下是这个部分的日志。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">777-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">069</span>: [GC (CMS Final Remark) [YG occupancy: <span class="hljs-number">42054</span> K (<span class="hljs-number">157248</span> K)]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">777-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">069</span>: [Rescan (parallel) , <span class="hljs-number">0.0003608</span> secs]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">777-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">069</span>: [weak refs processing, <span class="hljs-number">0.0000184</span> secs]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">777-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">069</span>: [class unloading, <span class="hljs-number">0.0002228</span> secs]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">778-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">070</span>: [scrub symbol table, <span class="hljs-number">0.0003110</span> secs]<br><span class="hljs-number">2021</span>-<span class="hljs-number">07-15T01:04</span>:<span class="hljs-number">08</span>.<span class="hljs-number">778-0800</span>: <span class="hljs-number">5</span>.<span class="hljs-number">070</span>: [scrub string table, <span class="hljs-number">0.0002060</span> secs]<br>    [<span class="hljs-number">1</span> CMS-remark: <span class="hljs-number">349310</span>K(<span class="hljs-number">349568</span>K)] <span class="hljs-number">391364</span>K(<span class="hljs-number">506816</span>K), <span class="hljs-number">0.0012004</span> secs] <br>    [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br></code></pre></td></tr></table></figure><blockquote><ol><li><code>CMS Final Remark</code> 这是此阶段的名称，最终标记阶段。会标记老年代中所有的存活对象，包括此前的并发标记过程中创建/修改的引用。</li><li><code>YG occupancy: 42054 K (157248 K)</code> 当前年轻代的使用量和总容量。</li><li><code>[Rescan (parallel) , 0.0003608 secs]</code> 在程序暂停后进行重新扫描（Rescan），以完成存活对象的标记，这部分是并行执行的，消耗的时间为<code>0.0003608 secs</code>。</li><li><code>[weak refs processing, 0.0000184 secs]</code>这是第一个子阶段：处理弱引用的持续时间。</li><li><code>class unloading, 0.0002228 secs</code> 第二个子阶段：卸载不使用的类，以及持续时间。</li><li><code>scrub symbol table, 0.0003110 secs</code> 第三个子阶段：清理符号表，即持有class级别metadata 的符号表（symbol tables）。</li><li><code>scrub string table, 0.0002060 secs</code>第四个子阶段：清理内联的字符串对应的String tables。</li><li><code>CMS-remark: 349310K(349568K)</code> 此阶段完成后老年代的使用量和总容量。</li><li><code>391364K(506816K), 0.0012004 secs</code> 此阶段完成后，整个内存堆的使用量和总容量。</li><li><code>[Times: user=0.01 sys=0.00, real=0.00 secs]</code> GC事件的持续时间。</li></ol></blockquote><p>在这5个阶段完成后，老年代中的所有对象都被标记上，接下来JVM会将所有不使用的对西那个清除，以回收老年代空间。</p><h5 id="阶段6：Concurrent-Sweep（并发清除）"><a href="#阶段6：Concurrent-Sweep（并发清除）" class="headerlink" title="阶段6：Concurrent Sweep（并发清除）"></a>阶段6：Concurrent Sweep（并发清除）</h5><p>这个阶段与应用程序并发执行，不需要STW停顿，目的是删除不再使用的对象，并回收他们占用的空间。以下是这部分的GC日志。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2021-07-15T01:04:08.778-0800: 5.070: [CMS-concurrent-sweep-start]<br>2021-07-15T01:04:08.779-0800: 5.071: <br>        [CMS-concurrent-sweep: 0.000/0.000 secs] <br>    [Times: <span class="hljs-attribute">user</span>=0.00 <span class="hljs-attribute">sys</span>=0.00, <span class="hljs-attribute">real</span>=0.00 secs]<br></code></pre></td></tr></table></figure><p>简单解读：</p><blockquote><ol><li><code>CMS-concurrent-sweep</code> 这是这个阶段的名字“concurrent-sweep”，并发清除老年代中所有未被标记的对象，也就是不再使用的对象，以释放内存空间。</li><li><code>0.000/0.000 secs</code> 此阶段的持续时间和实际占用的时间，这是一个四舍五入的值，只精确到小数点后3位。</li></ol></blockquote><h5 id="阶段7：Concurrent-Reset（并发重置）"><a href="#阶段7：Concurrent-Reset（并发重置）" class="headerlink" title="阶段7：Concurrent Reset（并发重置）"></a>阶段7：Concurrent Reset（并发重置）</h5><p>此阶段与应用程序线程并发执行，重置CMS算法相关的内部数据结构，下一次触发GC时就可以直接使用。这个阶段的日志如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2021-07-15T01:04:08.779-0800: 5.071: [CMS-concurrent-reset-start]<br>2021-07-15T01:04:08.779-0800: 5.071: <br>        [CMS-concurrent-reset: 0.000/0.000 secs] <br>    [Times: <span class="hljs-attribute">user</span>=0.00 <span class="hljs-attribute">sys</span>=0.00, <span class="hljs-attribute">real</span>=0.00 secs]<br></code></pre></td></tr></table></figure><p>简单解读如下：</p><blockquote><ol><li><code>CMS-concurrent-reset</code> 此阶段的名称，“Concurrent Reset”，重置CMS算法的内部数据结构，为以下此GC循环做准备。</li><li><code>0.000/0.000 secs</code> 此阶段的持续时间和实际占用时间。</li></ol></blockquote><p>总之，CMS垃圾收集器在减少停顿时间上做出了很多给力的工作，很大一部分GC线程与应用线程并发运行的，不需要暂停应用线程，这样就可以在一般情况下每次暂停的时间较少。当然，CMS也有一些缺点，其中最大的问题就是老年代的内存碎片问题，在某个情况下GC会有不可预测的暂停时间，特别是堆内存比较大的情况下。CMS 的原理与解析可以看我们复习我们前面的垃圾收集器(上)。</p><h3 id="G1-日志解读"><a href="#G1-日志解读" class="headerlink" title="G1 日志解读"></a>G1 日志解读</h3><p>如果对于G1的垃圾收集器的收集过程和原理不熟悉的同学也可以复习我们前面总结的垃圾收集器(上)。使用如下JVM参数启动。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">-XX:+UseG1GC -Xloggc:gc.<span class="hljs-built_in">log</span> -XX:+PrintGCDetails -XX:+PrintGCDateStamps<br></code></pre></td></tr></table></figure><p>使用GC垃圾收集器我们可以得到如下的日志：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs tcl">ava HotSpot(TM) <span class="hljs-number">64</span>-Bit Server VM (<span class="hljs-number">25.231</span>-b11) <span class="hljs-keyword">for</span> bsd-amd64 JRE (<span class="hljs-number">1.8</span><span class="hljs-number">.0</span>_231-b11), built on Oct  <span class="hljs-number">5</span> <span class="hljs-number">2019</span> <span class="hljs-number">03</span>:<span class="hljs-number">15</span>:<span class="hljs-number">25</span> by <span class="hljs-string">&quot;java_re&quot;</span> with gcc <span class="hljs-number">4.2</span><span class="hljs-number">.1</span> (Based on Apple Inc. build <span class="hljs-number">5658</span>) (LLVM build <span class="hljs-number">2336.11</span><span class="hljs-number">.00</span>)<br>Memory: <span class="hljs-number">4</span>k page, physical <span class="hljs-number">16777216</span>k(<span class="hljs-number">588376</span>k free)<br><br>/<span class="hljs-keyword">proc</span>/meminfo:<br><br>CommandLine<span class="hljs-title"> flags:</span> -XX:InitialHeapSize=536870912 -XX:MaxHeapSize=536870912 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC <br>2021-07-21T00:45:17.323-0800: 0.077: [GC<span class="hljs-title"> pause</span> (G1<span class="hljs-title"> Evacuation</span> Pause) (young), 0.0035596<span class="hljs-title"> secs]</span><br><span class="hljs-title"></span>   [Parallel<span class="hljs-title"> Time:</span> 2.8<span class="hljs-title"> ms,</span> GC<span class="hljs-title"> Workers:</span> 8]<br>      [GC<span class="hljs-title"> Worker</span> Start (ms):<span class="hljs-title"> Min:</span> 77.4,<span class="hljs-title"> Avg:</span> 77.5,<span class="hljs-title"> Max:</span> 77.5,<span class="hljs-title"> Diff:</span> 0.1]<br>      [Ext<span class="hljs-title"> Root</span> Scanning (ms):<span class="hljs-title"> Min:</span> 0.1,<span class="hljs-title"> Avg:</span> 0.2,<span class="hljs-title"> Max:</span> 0.8,<span class="hljs-title"> Diff:</span> 0.7,<span class="hljs-title"> Sum:</span> 1.8]<br>      [Update<span class="hljs-title"> RS</span> (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.0]<br>         [Processed<span class="hljs-title"> Buffers:</span> Min: 0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0,<span class="hljs-title"> Diff:</span> 0,<span class="hljs-title"> Sum:</span> 0]<br>      [Scan<span class="hljs-title"> RS</span> (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.0]<br>      [Code<span class="hljs-title"> Root</span> Scanning (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.0]<br>      [Object<span class="hljs-title"> Copy</span> (ms):<span class="hljs-title"> Min:</span> 1.5,<span class="hljs-title"> Avg:</span> 1.7,<span class="hljs-title"> Max:</span> 1.8,<span class="hljs-title"> Diff:</span> 0.3,<span class="hljs-title"> Sum:</span> 13.5]<br>      [Termination (ms):<span class="hljs-title"> Min:</span> 0.3,<span class="hljs-title"> Avg:</span> 0.7,<span class="hljs-title"> Max:</span> 0.8,<span class="hljs-title"> Diff:</span> 0.4,<span class="hljs-title"> Sum:</span> 5.3]<br>         [Termination<span class="hljs-title"> Attempts:</span> Min: 1,<span class="hljs-title"> Avg:</span> 4.4,<span class="hljs-title"> Max:</span> 7,<span class="hljs-title"> Diff:</span> 6,<span class="hljs-title"> Sum:</span> 35]<br>      [GC<span class="hljs-title"> Worker</span> Other (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.1]<br>      [GC<span class="hljs-title"> Worker</span> Total (ms):<span class="hljs-title"> Min:</span> 2.5,<span class="hljs-title"> Avg:</span> 2.6,<span class="hljs-title"> Max:</span> 2.7,<span class="hljs-title"> Diff:</span> 0.2,<span class="hljs-title"> Sum:</span> 20.8]<br>      [GC<span class="hljs-title"> Worker</span> End (ms):<span class="hljs-title"> Min:</span> 80.0,<span class="hljs-title"> Avg:</span> 80.0,<span class="hljs-title"> Max:</span> 80.2,<span class="hljs-title"> Diff:</span> 0.2]<br>   [Code<span class="hljs-title"> Root</span> Fixup: 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Code<span class="hljs-title"> Root</span> Purge: 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Clear<span class="hljs-title"> CT:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Other: 0.6<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Choose<span class="hljs-title"> CSet:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Ref<span class="hljs-title"> Proc:</span> 0.2<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Ref<span class="hljs-title"> Enq:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Redirty<span class="hljs-title"> Cards:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Humongous<span class="hljs-title"> Register:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Humongous<span class="hljs-title"> Reclaim:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Free<span class="hljs-title"> CSet:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Eden: 25.0M(25.0M)-&gt;0.0B(27.0M)<span class="hljs-title"> Survivors:</span> 0.0B-&gt;4096.0K<span class="hljs-title"> Heap:</span> 28.6M(512.0M)-&gt;8908.2K(512.0M)]<br> [Times:<span class="hljs-title"> user=0.01</span> sys=0.01,<span class="hljs-title"> real=0.00</span> secs] <br>......<br>2021-07-21T00:45:17.538-0800: 0.292: [GC<span class="hljs-title"> pause</span> (G1<span class="hljs-title"> Humongous</span> Allocation) (young) (initial-mark), 0.0044054<span class="hljs-title"> secs]</span><br><span class="hljs-title"></span>   [Parallel<span class="hljs-title"> Time:</span> 4.0<span class="hljs-title"> ms,</span> GC<span class="hljs-title"> Workers:</span> 8]<br>      [GC<span class="hljs-title"> Worker</span> Start (ms):<span class="hljs-title"> Min:</span> 292.0,<span class="hljs-title"> Avg:</span> 292.1,<span class="hljs-title"> Max:</span> 292.1,<span class="hljs-title"> Diff:</span> 0.1]<br>      [Ext<span class="hljs-title"> Root</span> Scanning (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.1,<span class="hljs-title"> Max:</span> 0.2,<span class="hljs-title"> Diff:</span> 0.1,<span class="hljs-title"> Sum:</span> 0.6]<br>      [Update<span class="hljs-title"> RS</span> (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.2]<br>         [Processed<span class="hljs-title"> Buffers:</span> Min: 1,<span class="hljs-title"> Avg:</span> 1.2,<span class="hljs-title"> Max:</span> 2,<span class="hljs-title"> Diff:</span> 1,<span class="hljs-title"> Sum:</span> 10]<br>      [Scan<span class="hljs-title"> RS</span> (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.0]<br>      [Code<span class="hljs-title"> Root</span> Scanning (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.0]<br>      [Object<span class="hljs-title"> Copy</span> (ms):<span class="hljs-title"> Min:</span> 3.6,<span class="hljs-title"> Avg:</span> 3.7,<span class="hljs-title"> Max:</span> 3.7,<span class="hljs-title"> Diff:</span> 0.1,<span class="hljs-title"> Sum:</span> 29.2]<br>      [Termination (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.1,<span class="hljs-title"> Max:</span> 0.2,<span class="hljs-title"> Diff:</span> 0.2,<span class="hljs-title"> Sum:</span> 0.6]<br>         [Termination<span class="hljs-title"> Attempts:</span> Min: 1,<span class="hljs-title"> Avg:</span> 1.0,<span class="hljs-title"> Max:</span> 1,<span class="hljs-title"> Diff:</span> 0,<span class="hljs-title"> Sum:</span> 8]<br>      [GC<span class="hljs-title"> Worker</span> Other (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.1]<br>      [GC<span class="hljs-title"> Worker</span> Total (ms):<span class="hljs-title"> Min:</span> 3.8,<span class="hljs-title"> Avg:</span> 3.8,<span class="hljs-title"> Max:</span> 3.9,<span class="hljs-title"> Diff:</span> 0.1,<span class="hljs-title"> Sum:</span> 30.8]<br>      [GC<span class="hljs-title"> Worker</span> End (ms):<span class="hljs-title"> Min:</span> 295.9,<span class="hljs-title"> Avg:</span> 295.9,<span class="hljs-title"> Max:</span> 296.0,<span class="hljs-title"> Diff:</span> 0.1]<br>   [Code<span class="hljs-title"> Root</span> Fixup: 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Code<span class="hljs-title"> Root</span> Purge: 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Clear<span class="hljs-title"> CT:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Other: 0.3<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Choose<span class="hljs-title"> CSet:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Ref<span class="hljs-title"> Proc:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Ref<span class="hljs-title"> Enq:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Redirty<span class="hljs-title"> Cards:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Humongous<span class="hljs-title"> Register:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Humongous<span class="hljs-title"> Reclaim:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Free<span class="hljs-title"> CSet:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Eden: 2048.0K(71.0M)-&gt;0.0B(116.0M)<span class="hljs-title"> Survivors:</span> 33.0M-&gt;1024.0K<span class="hljs-title"> Heap:</span> 307.5M(512.0M)-&gt;305.7M(512.0M)]<br> [Times:<span class="hljs-title"> user=0.02</span> sys=0.00,<span class="hljs-title"> real=0.01</span> secs] <br>2021-07-21T00:45:17.542-0800: 0.296: [GC<span class="hljs-title"> concurrent-root-region-scan-start]</span><br><span class="hljs-title">2021-07-21T00:45:17.542-0800:</span> 0.296: [GC<span class="hljs-title"> concurrent-root-region-scan-end,</span> 0.0000326<span class="hljs-title"> secs]</span><br><span class="hljs-title">2021-07-21T00:45:17.542-0800:</span> 0.296: [GC<span class="hljs-title"> concurrent-mark-start]</span><br><span class="hljs-title">2021-07-21T00:45:17.544-0800:</span> 0.298: [GC<span class="hljs-title"> concurrent-mark-end,</span> 0.0019507<span class="hljs-title"> secs]</span><br><span class="hljs-title">2021-07-21T00:45:17.544-0800:</span> 0.299: [GC<span class="hljs-title"> remark</span> 2021-07-21T00:45:17.544-0800: 0.299: [Finalize<span class="hljs-title"> Marking,</span> 0.0002050<span class="hljs-title"> secs]</span> 2021-07-21T00:45:17.544-0800: 0.299: [GC<span class="hljs-title"> ref-proc,</span> 0.0000344<span class="hljs-title"> secs]</span> 2021-07-21T00:45:17.544-0800: 0.299: [Unloading, 0.0003887<span class="hljs-title"> secs],</span> 0.0010297<span class="hljs-title"> secs]</span><br><span class="hljs-title"></span> [Times:<span class="hljs-title"> user=0.00</span> sys=0.00,<span class="hljs-title"> real=0.00</span> secs] <br>2021-07-21T00:45:17.545-0800: 0.300: [GC<span class="hljs-title"> cleanup</span> 319M-&gt;319M(512M), 0.0007032<span class="hljs-title"> secs]</span><br><span class="hljs-title"></span> [Times:<span class="hljs-title"> user=0.01</span> sys=0.00,<span class="hljs-title"> real=0.00</span> secs] <br>2021-07-21T00:45:17.569-0800: 0.323: [GC<span class="hljs-title"> pause</span> (G1<span class="hljs-title"> Evacuation</span> Pause) (young) (to-space<span class="hljs-title"> exhausted),</span> 0.0032034<span class="hljs-title"> secs]</span><br><span class="hljs-title"></span>   [Parallel<span class="hljs-title"> Time:</span> 2.3<span class="hljs-title"> ms,</span> GC<span class="hljs-title"> Workers:</span> 8]<br>      [GC<span class="hljs-title"> Worker</span> Start (ms):<span class="hljs-title"> Min:</span> 323.3,<span class="hljs-title"> Avg:</span> 323.4,<span class="hljs-title"> Max:</span> 323.4,<span class="hljs-title"> Diff:</span> 0.2]<br>      [Ext<span class="hljs-title"> Root</span> Scanning (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.1,<span class="hljs-title"> Max:</span> 0.2,<span class="hljs-title"> Diff:</span> 0.2,<span class="hljs-title"> Sum:</span> 0.7]<br>      [Update<span class="hljs-title"> RS</span> (ms):<span class="hljs-title"> Min:</span> 0.1,<span class="hljs-title"> Avg:</span> 0.2,<span class="hljs-title"> Max:</span> 0.3,<span class="hljs-title"> Diff:</span> 0.2,<span class="hljs-title"> Sum:</span> 1.4]<br>         [Processed<span class="hljs-title"> Buffers:</span> Min: 0,<span class="hljs-title"> Avg:</span> 2.4,<span class="hljs-title"> Max:</span> 3,<span class="hljs-title"> Diff:</span> 3,<span class="hljs-title"> Sum:</span> 19]<br>      [Scan<span class="hljs-title"> RS</span> (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.1]<br>      [Code<span class="hljs-title"> Root</span> Scanning (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.0]<br>      [Object<span class="hljs-title"> Copy</span> (ms):<span class="hljs-title"> Min:</span> 1.6,<span class="hljs-title"> Avg:</span> 1.8,<span class="hljs-title"> Max:</span> 1.8,<span class="hljs-title"> Diff:</span> 0.2,<span class="hljs-title"> Sum:</span> 14.3]<br>      [Termination (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.1,<span class="hljs-title"> Diff:</span> 0.1,<span class="hljs-title"> Sum:</span> 0.2]<br>         [Termination<span class="hljs-title"> Attempts:</span> Min: 1,<span class="hljs-title"> Avg:</span> 1.0,<span class="hljs-title"> Max:</span> 1,<span class="hljs-title"> Diff:</span> 0,<span class="hljs-title"> Sum:</span> 8]<br>      [GC<span class="hljs-title"> Worker</span> Other (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.1]<br>      [GC<span class="hljs-title"> Worker</span> Total (ms):<span class="hljs-title"> Min:</span> 2.0,<span class="hljs-title"> Avg:</span> 2.1,<span class="hljs-title"> Max:</span> 2.2,<span class="hljs-title"> Diff:</span> 0.2,<span class="hljs-title"> Sum:</span> 16.9]<br>      [GC<span class="hljs-title"> Worker</span> End (ms):<span class="hljs-title"> Min:</span> 325.5,<span class="hljs-title"> Avg:</span> 325.5,<span class="hljs-title"> Max:</span> 325.5,<span class="hljs-title"> Diff:</span> 0.0]<br>   [Code<span class="hljs-title"> Root</span> Fixup: 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Code<span class="hljs-title"> Root</span> Purge: 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Clear<span class="hljs-title"> CT:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Other: 0.8<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Evacuation<span class="hljs-title"> Failure:</span> 0.5<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Choose<span class="hljs-title"> CSet:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Ref<span class="hljs-title"> Proc:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Ref<span class="hljs-title"> Enq:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Redirty<span class="hljs-title"> Cards:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Humongous<span class="hljs-title"> Register:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Humongous<span class="hljs-title"> Reclaim:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Free<span class="hljs-title"> CSet:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Eden: 116.0M(116.0M)-&gt;0.0B(10.0M)<span class="hljs-title"> Survivors:</span> 1024.0K-&gt;15.0M<span class="hljs-title"> Heap:</span> 455.3M(512.0M)-&gt;412.4M(512.0M)]<br> [Times:<span class="hljs-title"> user=0.01</span> sys=0.01,<span class="hljs-title"> real=0.01</span> secs] <br>2021-07-21T00:45:17.574-0800: 0.328: [GC<span class="hljs-title"> pause</span> (G1<span class="hljs-title"> Evacuation</span> Pause) (mixed), 0.0028130<span class="hljs-title"> secs]</span><br><span class="hljs-title"></span>   [Parallel<span class="hljs-title"> Time:</span> 2.4<span class="hljs-title"> ms,</span> GC<span class="hljs-title"> Workers:</span> 8]<br>      [GC<span class="hljs-title"> Worker</span> Start (ms):<span class="hljs-title"> Min:</span> 328.6,<span class="hljs-title"> Avg:</span> 328.6,<span class="hljs-title"> Max:</span> 328.7,<span class="hljs-title"> Diff:</span> 0.1]<br>      [Ext<span class="hljs-title"> Root</span> Scanning (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.1,<span class="hljs-title"> Max:</span> 0.1,<span class="hljs-title"> Diff:</span> 0.1,<span class="hljs-title"> Sum:</span> 0.6]<br>      [Update<span class="hljs-title"> RS</span> (ms):<span class="hljs-title"> Min:</span> 0.1,<span class="hljs-title"> Avg:</span> 0.2,<span class="hljs-title"> Max:</span> 0.2,<span class="hljs-title"> Diff:</span> 0.1,<span class="hljs-title"> Sum:</span> 1.3]<br>         [Processed<span class="hljs-title"> Buffers:</span> Min: 0,<span class="hljs-title"> Avg:</span> 2.2,<span class="hljs-title"> Max:</span> 3,<span class="hljs-title"> Diff:</span> 3,<span class="hljs-title"> Sum:</span> 18]<br>      [Scan<span class="hljs-title"> RS</span> (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.1]<br>      [Code<span class="hljs-title"> Root</span> Scanning (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.0]<br>      [Object<span class="hljs-title"> Copy</span> (ms):<span class="hljs-title"> Min:</span> 1.9,<span class="hljs-title"> Avg:</span> 1.9,<span class="hljs-title"> Max:</span> 2.0,<span class="hljs-title"> Diff:</span> 0.2,<span class="hljs-title"> Sum:</span> 15.5]<br>      [Termination (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.1,<span class="hljs-title"> Max:</span> 0.2,<span class="hljs-title"> Diff:</span> 0.2,<span class="hljs-title"> Sum:</span> 0.7]<br>         [Termination<span class="hljs-title"> Attempts:</span> Min: 1,<span class="hljs-title"> Avg:</span> 1.0,<span class="hljs-title"> Max:</span> 1,<span class="hljs-title"> Diff:</span> 0,<span class="hljs-title"> Sum:</span> 8]<br>      [GC<span class="hljs-title"> Worker</span> Other (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.1]<br>      [GC<span class="hljs-title"> Worker</span> Total (ms):<span class="hljs-title"> Min:</span> 2.2,<span class="hljs-title"> Avg:</span> 2.3,<span class="hljs-title"> Max:</span> 2.3,<span class="hljs-title"> Diff:</span> 0.1,<span class="hljs-title"> Sum:</span> 18.3]<br>      [GC<span class="hljs-title"> Worker</span> End (ms):<span class="hljs-title"> Min:</span> 330.9,<span class="hljs-title"> Avg:</span> 330.9,<span class="hljs-title"> Max:</span> 331.0,<span class="hljs-title"> Diff:</span> 0.1]<br>   [Code<span class="hljs-title"> Root</span> Fixup: 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Code<span class="hljs-title"> Root</span> Purge: 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Clear<span class="hljs-title"> CT:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Other: 0.3<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Choose<span class="hljs-title"> CSet:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Ref<span class="hljs-title"> Proc:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Ref<span class="hljs-title"> Enq:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Redirty<span class="hljs-title"> Cards:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Humongous<span class="hljs-title"> Register:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Humongous<span class="hljs-title"> Reclaim:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Free<span class="hljs-title"> CSet:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Eden: 10.0M(10.0M)-&gt;0.0B(21.0M)<span class="hljs-title"> Survivors:</span> 15.0M-&gt;4096.0K<span class="hljs-title"> Heap:</span> 425.6M(512.0M)-&gt;365.1M(512.0M)]<br> [Times:<span class="hljs-title"> user=0.01</span> sys=0.00,<span class="hljs-title"> real=0.00</span> secs] <br>......<br>021-07-21T00:45:22.278-0800: 5.032: [GC<span class="hljs-title"> pause</span> (G1<span class="hljs-title"> Evacuation</span> Pause) (young), 0.0006462<span class="hljs-title"> secs]</span><br><span class="hljs-title"></span>   [Parallel<span class="hljs-title"> Time:</span> 0.3<span class="hljs-title"> ms,</span> GC<span class="hljs-title"> Workers:</span> 8]<br>      [GC<span class="hljs-title"> Worker</span> Start (ms):<span class="hljs-title"> Min:</span> 5032.5,<span class="hljs-title"> Avg:</span> 5032.6,<span class="hljs-title"> Max:</span> 5032.6,<span class="hljs-title"> Diff:</span> 0.0]<br>      [Ext<span class="hljs-title"> Root</span> Scanning (ms):<span class="hljs-title"> Min:</span> 0.1,<span class="hljs-title"> Avg:</span> 0.1,<span class="hljs-title"> Max:</span> 0.1,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.7]<br>      [Update<span class="hljs-title"> RS</span> (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.1,<span class="hljs-title"> Diff:</span> 0.1,<span class="hljs-title"> Sum:</span> 0.2]<br>         [Processed<span class="hljs-title"> Buffers:</span> Min: 0,<span class="hljs-title"> Avg:</span> 0.9,<span class="hljs-title"> Max:</span> 1,<span class="hljs-title"> Diff:</span> 1,<span class="hljs-title"> Sum:</span> 7]<br>      [Scan<span class="hljs-title"> RS</span> (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.0]<br>      [Code<span class="hljs-title"> Root</span> Scanning (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.0]<br>      [Object<span class="hljs-title"> Copy</span> (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.0]<br>      [Termination (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.2,<span class="hljs-title"> Max:</span> 0.2,<span class="hljs-title"> Diff:</span> 0.2,<span class="hljs-title"> Sum:</span> 1.3]<br>         [Termination<span class="hljs-title"> Attempts:</span> Min: 1,<span class="hljs-title"> Avg:</span> 1.0,<span class="hljs-title"> Max:</span> 1,<span class="hljs-title"> Diff:</span> 0,<span class="hljs-title"> Sum:</span> 8]<br>      [GC<span class="hljs-title"> Worker</span> Other (ms):<span class="hljs-title"> Min:</span> 0.0,<span class="hljs-title"> Avg:</span> 0.0,<span class="hljs-title"> Max:</span> 0.0,<span class="hljs-title"> Diff:</span> 0.0,<span class="hljs-title"> Sum:</span> 0.0]<br>      [GC<span class="hljs-title"> Worker</span> Total (ms):<span class="hljs-title"> Min:</span> 0.2,<span class="hljs-title"> Avg:</span> 0.3,<span class="hljs-title"> Max:</span> 0.3,<span class="hljs-title"> Diff:</span> 0.1,<span class="hljs-title"> Sum:</span> 2.3]<br>      [GC<span class="hljs-title"> Worker</span> End (ms):<span class="hljs-title"> Min:</span> 5032.8,<span class="hljs-title"> Avg:</span> 5032.8,<span class="hljs-title"> Max:</span> 5032.9,<span class="hljs-title"> Diff:</span> 0.1]<br>   [Code<span class="hljs-title"> Root</span> Fixup: 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Code<span class="hljs-title"> Root</span> Purge: 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Clear<span class="hljs-title"> CT:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Other: 0.2<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Choose<span class="hljs-title"> CSet:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Ref<span class="hljs-title"> Proc:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Ref<span class="hljs-title"> Enq:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Redirty<span class="hljs-title"> Cards:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Humongous<span class="hljs-title"> Register:</span> 0.1<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Humongous<span class="hljs-title"> Reclaim:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>      [Free<span class="hljs-title"> CSet:</span> 0.0<span class="hljs-title"> ms]</span><br><span class="hljs-title"></span>   [Eden: 0.0B(25.0M)-&gt;0.0B(25.0M)<span class="hljs-title"> Survivors:</span> 0.0B-&gt;0.0B<span class="hljs-title"> Heap:</span> 405.6M(512.0M)-&gt;405.6M(512.0M)]<br> [Times:<span class="hljs-title"> user=0.00</span> sys=0.00,<span class="hljs-title"> real=0.00</span> secs] <br>2021-07-21T00:45:22.279-0800: 5.033: [Full<span class="hljs-title"> GC</span> (Allocation<span class="hljs-title"> Failure)</span>  405M-&gt;378M(512M), 0.0339622<span class="hljs-title"> secs]</span><br><span class="hljs-title"></span>   [Eden: 0.0B(25.0M)-&gt;0.0B(25.0M)<span class="hljs-title"> Survivors:</span> 0.0B-&gt;0.0B<span class="hljs-title"> Heap:</span> 405.6M(512.0M)-&gt;378.8M(512.0M)], [Metaspace: 2565K-&gt;2565K(1056768K)]<br> [Times:<span class="hljs-title"> user=0.03</span> sys=0.00,<span class="hljs-title"> real=0.04</span> secs] <br>2021-07-21T00:45:22.313-0800: 5.067: [GC<span class="hljs-title"> concurrent-mark-abort]</span><br><span class="hljs-title">Heap</span><br><span class="hljs-title"></span> garbage-first<span class="hljs-title"> heap</span> <span class="hljs-title">  total</span> 524288K,<span class="hljs-title"> used</span> 387912K [0x00000007a0000000, 0x00000007a0101000, 0x00000007c0000000)<br><span class="hljs-title">  region</span> size 1024K, 1<span class="hljs-title"> young</span> (1024K), 0<span class="hljs-title"> survivors</span> (0K)<br><span class="hljs-title"> Metaspace</span> <span class="hljs-title">      used</span> 2571K,<span class="hljs-title"> capacity</span> 4486K,<span class="hljs-title"> committed</span> 4864K,<span class="hljs-title"> reserved</span> 1056768K<br><span class="hljs-title">  class</span> space<span class="hljs-title">    used</span> 276K,<span class="hljs-title"> capacity</span> 386K,<span class="hljs-title"> committed</span> 512K,<span class="hljs-title"> reserved</span> 1048576K<br></code></pre></td></tr></table></figure><p>以上是一部分G1的GC日志信息，实际上我们程序运行了几秒中却生成了1MB多的日志数据，由此可见G1输出的日志真的很多。其中我们主要能看到以下几种GC类型。</p><h4 id="Evacuation-Pause：young（纯年轻代模式转移暂停）"><a href="#Evacuation-Pause：young（纯年轻代模式转移暂停）" class="headerlink" title="Evacuation Pause：young（纯年轻代模式转移暂停）"></a>Evacuation Pause：young（纯年轻代模式转移暂停）</h4><p>当年轻代空间用满后，应用线程会被暂停，年轻代内存块中的存活对象被拷贝到存活区。如果还没有存活区，则任意选择一部分空闲内存块作为存活区。拷贝的过程被称为转移（Evacuation），这和前面介绍的其他年轻代收集器是一样的工作原理。由于日志记录非常多，所以并行阶段和“其他”阶段的日志将拆分多个部分解析。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">2021-07-21T00:45:17.323-0800: 0.077:</span> [<span class="hljs-string">GC</span> <span class="hljs-string">pause</span> <span class="hljs-string">(G1</span> <span class="hljs-string">Evacuation</span> <span class="hljs-string">Pause)</span> <span class="hljs-string">(young)</span>, <span class="hljs-number">0.0035596</span> <span class="hljs-string">secs</span>]<br>   [<span class="hljs-attr">Parallel Time:</span> <span class="hljs-number">2.8</span> <span class="hljs-string">ms</span>, <span class="hljs-attr">GC Workers:</span> <span class="hljs-number">8</span>]<br>      <span class="hljs-string">...GC</span> <span class="hljs-string">work</span> <span class="hljs-string">thread</span><br>   [<span class="hljs-attr">Code Root Fixup:</span> <span class="hljs-number">0.0</span> <span class="hljs-string">ms</span>]<br>   [<span class="hljs-attr">Code Root Purge:</span> <span class="hljs-number">0.0</span> <span class="hljs-string">ms</span>]<br>   [<span class="hljs-attr">Clear CT:</span> <span class="hljs-number">0.1</span> <span class="hljs-string">ms</span>]<br>   [<span class="hljs-attr">Other:</span> <span class="hljs-number">0.6</span> <span class="hljs-string">ms</span>]<br>        <span class="hljs-string">...other</span> <span class="hljs-string">job</span><br>   [<span class="hljs-attr">Eden:</span> <span class="hljs-number">25.</span><span class="hljs-string">0M(25.0M)-&gt;0.0B(27.0M)</span> <span class="hljs-attr">Survivors:</span> <span class="hljs-number">0.</span><span class="hljs-string">0B-&gt;4096.0K</span> <span class="hljs-attr">Heap:</span> <span class="hljs-number">28.</span><span class="hljs-string">6M(512.0M)-&gt;8908.2K(512.0M)</span>]<br> [<span class="hljs-attr">Times:</span> <span class="hljs-string">user=0.01</span> <span class="hljs-string">sys=0.01</span>, <span class="hljs-string">real=0.00</span> <span class="hljs-string">secs</span>] <br></code></pre></td></tr></table></figure><blockquote><p>日志分析如下：</p><ol><li><code>[GC pause (G1 Evacuation Pause) (young), 0.0035596 secs]</code> G1转移暂停，纯年轻代模式：只清理年轻空间。这次暂停在JVM启动之后77ms开始，持续的系统时间为：<code>0.0035596 secs</code>，也就是<code>3.5ms</code>。</li><li><code>[Parallel Time: 2.8 ms, GC Workers: 8]</code> 表明后面的活动由8个Worker 线程并行执行，消耗时间为<code>2.8ms</code>（real time）；<code>worker</code>是一种模式，类似于一个老板指挥多个工人干活，类似与Netty的 BossGroup 和 WorkerGroup。</li><li><code>[Code Root Fixup: 0.0 ms]</code> 释放用于管理并行活动的内部数据，一般都接近于零。这个过程是串行执行的。</li><li><code>[Code Root Purge: 0.0 ms]</code> 清理其他部分数据，也是非常快的，如非必要基本上等于零，也是串行的执行的过程。</li><li><code>[Other: 0.6 ms]</code> 其他活动消耗的时间，其中大部分都是并行的。</li><li><code>[Eden: 25.0M(25.0M)-&gt;0.0B(27.0M)</code> 暂停之前和暂停之后，Eden区的使用量/总容量。</li><li><code>Survivors: 0.0B-&gt;4096.0K</code> GC暂停前后，存活区的使用量。<code>Heap: 28.6M(512.0M)-&gt;8908.2K(512.0M)]</code> 暂停前后整个堆内存的使用量和总容量。</li><li><code>[Times: user=0.01 sys=0.01, real=0.00 secs]</code> GC事件的持续事件。</li></ol><p>系统事件（wall clock time/elapsed time），是指一段程序从运行到终止，系统时钟走过的时间，一般系统时间比CPU时间略微长一点。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">[Parallel Time: <span class="hljs-number">2.3</span> ms, GC Workers: <span class="hljs-number">8</span>]<br>[GC Worker Start (ms): Min: <span class="hljs-number">323.3</span>, Avg: <span class="hljs-number">323.4</span>, Max: <span class="hljs-number">323.4</span>, Diff: <span class="hljs-number">0.2</span>]<br>[Ext Root Scanning (ms): Min: <span class="hljs-number">0.0</span>, Avg: <span class="hljs-number">0.1</span>, Max: <span class="hljs-number">0.2</span>, Diff: <span class="hljs-number">0.2</span>, Sum: <span class="hljs-number">0.7</span>]<br>[Update RS (ms): Min: <span class="hljs-number">0.1</span>, Avg: <span class="hljs-number">0.2</span>, Max: <span class="hljs-number">0.3</span>, Diff: <span class="hljs-number">0.2</span>, Sum: <span class="hljs-number">1.4</span>]<br>[Processed Buffers: Min: <span class="hljs-number">0</span>, Avg: <span class="hljs-number">2.4</span>, Max: <span class="hljs-number">3</span>, Diff: <span class="hljs-number">3</span>, Sum: <span class="hljs-number">19</span>]<br>[Scan RS (ms): Min: <span class="hljs-number">0.0</span>, Avg: <span class="hljs-number">0.0</span>, Max: <span class="hljs-number">0.0</span>, Diff: <span class="hljs-number">0.0</span>, Sum: <span class="hljs-number">0.1</span>]<br>[Code Root Scanning (ms): Min: <span class="hljs-number">0.0</span>, Avg: <span class="hljs-number">0.0</span>, Max: <span class="hljs-number">0.0</span>, Diff: <span class="hljs-number">0.0</span>, Sum: <span class="hljs-number">0.0</span>]<br>[Object Copy (ms): Min: <span class="hljs-number">1.6</span>, Avg: <span class="hljs-number">1.8</span>, Max: <span class="hljs-number">1.8</span>, Diff: <span class="hljs-number">0.2</span>, Sum: <span class="hljs-number">14.3</span>]<br>[Termination (ms): Min: <span class="hljs-number">0.0</span>, Avg: <span class="hljs-number">0.0</span>, Max: <span class="hljs-number">0.1</span>, Diff: <span class="hljs-number">0.1</span>, Sum: <span class="hljs-number">0.2</span>]<br>[Termination Attempts: Min: <span class="hljs-number">1</span>, Avg: <span class="hljs-number">1.0</span>, Max: <span class="hljs-number">1</span>, Diff: <span class="hljs-number">0</span>, Sum: <span class="hljs-number">8</span>]<br>[GC Worker Other (ms): Min: <span class="hljs-number">0.0</span>, Avg: <span class="hljs-number">0.0</span>, Max: <span class="hljs-number">0.0</span>, Diff: <span class="hljs-number">0.0</span>, Sum: <span class="hljs-number">0.1</span>]<br>[GC Worker Total (ms): Min: <span class="hljs-number">2.0</span>, Avg: <span class="hljs-number">2.1</span>, Max: <span class="hljs-number">2.2</span>, Diff: <span class="hljs-number">0.2</span>, Sum: <span class="hljs-number">16.9</span>]<br>[GC Worker End (ms): Min: <span class="hljs-number">325.5</span>, Avg: <span class="hljs-number">325.5</span>, Max: <span class="hljs-number">325.5</span>, Diff: <span class="hljs-number">0.0</span>]<br></code></pre></td></tr></table></figure><blockquote><p>上面这段日志是省略的工作线程的日志信息，简单的解读如下：</p><ol><li><code>[Parallel Time: 2.3 ms, GC Workers: 8]</code> 前面介绍过，这表明下列活动由8个线程并行执行，消耗的时间为2.3ms(real time)。</li><li><code>GC Worker Start(ms)</code> GC的worker线程开始启动时，相当于 pause 开始时间的毫秒间隔，如果<code>Min</code>和<code>Max</code>差别很大，则表明本机其他进程所使用的线程数量过多，挤占了GC的可用CPU时间。</li><li><code>Ext Root Scanning(ms)</code> 用了多长时间来扫描堆外内存(non-heap) 的GC ROOT，如classloader，JNI引用，JVM系统ROOT等。后面显示了运行时间，“Sum”指的是CPU时间。</li><li><code>Update RS</code>，<code>Processed Buffers</code>，<code>Scan RS</code>这三部分也是类似的，<code>RS</code>是<code>Remember Set</code>的缩写。</li><li><code>Code Root Scanning(ms)</code> 扫描实际代码中的 root 用了多长时间：例如线程栈中的局部变量。</li><li><code>Object Copy(ms)</code> 用了多长时间来拷贝回收集中的存活对象。</li><li><code>Tremination(ms)</code> GC 的worker线程用了多长时间来确保自身可以安全地停止，这段时间内什么都不做，完成后GC线程就终止了，所以叫终止等待。</li><li><code>Termination Attempts</code> GC的 woker 线程尝试多少次 try 和 teminate。如果 worker 发现还有一些任务没有处理完，则这一次尝试就是失败的，暂时还不能终止。</li><li><code>GC Worker Other (ms)</code> 其他的一些小任务，因为时间很短，在GC日志将他们归结在一起。</li><li><code>GC Worker Total (ms)</code> GC的worker线程工作总计。</li><li><code>GC Worker End (ms)</code> GC的worker线程完成作业的时刻，相对于此次GC暂停开始时间的毫秒数。通常来说这部分数字应该大致相等，否则就说明有太多的线程被挂起。</li></ol></blockquote><p>除此之外，在转移暂停期间还有一些琐碎的小任务。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">[Other: <span class="hljs-number">0.6</span> ms]<br>  [Choose CSet: <span class="hljs-number">0.0</span> ms]<br>  [Ref Proc: <span class="hljs-number">0.2</span> ms]<br>  [Ref Enq: <span class="hljs-number">0.0</span> ms]<br>  [Redirty Cards: <span class="hljs-number">0.1</span> ms]<br>  [Humongous Register: <span class="hljs-number">0.0</span> ms]<br>  [Humongous Reclaim: <span class="hljs-number">0.0</span> ms]<br>  [Free CSet: <span class="hljs-number">0.0</span> ms]<br></code></pre></td></tr></table></figure><blockquote><p>其他琐碎任务，这里只介绍其中一部分：</p><ol><li><code>[Other: 0.6 ms]</code> 其他活动消耗的时间，其中很多是并行执行的。</li><li><code>[Choose CSet: 0.0 ms]</code> 选择CSet消耗的时间，CSet 是Colletion Set 的缩写。</li><li><code>[Ref Proc: 0.2 ms]</code> 处理非强引用（non-strong）的时间：进行清理或者决定是否需要清理。</li><li><code>[Ref Enq: 0.0 ms]</code> 用来将剩下的 non-strong 引用排序到合适的 <code>ReferenceQueue</code> 中。</li><li><code>[Humongous Register: 0.0 ms]</code>，<code>[Humongous Reclaim: 0.0 ms]</code> 大对象相关部分。</li><li><code>[Free CSet: 0.0 ms]</code> 将回收集中被释放的小堆归还所消耗的时间，以便给他们能用来分配新对象。</li></ol></blockquote><h4 id="Concurrent-Marking（并发标记）"><a href="#Concurrent-Marking（并发标记）" class="headerlink" title="Concurrent Marking（并发标记）"></a>Concurrent Marking（并发标记）</h4><p>当堆内存的总体使用达到一定的数值时，就会触发并发标记。这个默认比例<code>是45%</code>，但也可以通过JVM参数<code>InitialtingHeapOccupancyPercent</code> 来设置。和CMS一样，G1的并发标记也是由多个阶段组成，其中一些阶段是完成并发的，还有一些阶段则会暂停应用线程。如下是并发标记的日志信息：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs subunit">2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.538<span class="hljs-string">-0800</span>: 0.292: [GC pause (G1 Humongous Allocation) (young) (initial-mark), 0.0044054 secs]<br>   ...<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.542<span class="hljs-string">-0800</span>: 0.296: [GC concurrent-root-region-scan-start]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.542<span class="hljs-string">-0800</span>: 0.296: [GC concurrent-root-region-scan-end, 0.0000326 secs]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.542<span class="hljs-string">-0800</span>: 0.296: [GC concurrent-mark-start]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.544<span class="hljs-string">-0800</span>: 0.298: [GC concurrent-mark-end, 0.0019507 secs]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.544<span class="hljs-string">-0800</span>: 0.299: [GC remark 2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.544<span class="hljs-string">-0800</span>: 0.299: [Finalize Marking, 0.0002050 secs] <br>2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.544<span class="hljs-string">-0800</span>: 0.299: [GC ref-proc, 0.0000344 secs] <br>2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.544<span class="hljs-string">-0800</span>: 0.299: [Unloading, 0.0003887 secs], 0.0010297 secs]<br> [Times: user=0.00 sys=0.00, real=0.00 secs] <br>2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.545<span class="hljs-string">-0800</span>: 0.300: [GC cleanup 319M-&gt;319M(512M), 0.0007032 secs]<br> [Times: user=0.01 sys=0.00, real=0.00 secs] <br></code></pre></td></tr></table></figure><h5 id="阶段1：Initial-Mark（初始标记）-1"><a href="#阶段1：Initial-Mark（初始标记）-1" class="headerlink" title="阶段1：Initial Mark（初始标记）"></a>阶段1：Initial Mark（初始标记）</h5><p>以下是这次GC事件的开始，我们不难发现这是因为大对象的分配导致的GC。初始标记日志如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2021</span>-<span class="hljs-number">07-21T00:45</span>:<span class="hljs-number">17</span>.<span class="hljs-number">538-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">292</span>: <br>        [GC pause (G1 Humongous Allocation) (young) (initial-mark), <span class="hljs-number">0.0044054</span> secs]<br></code></pre></td></tr></table></figure><h5 id="阶段2：Root-Region-Scan（Root区扫描）"><a href="#阶段2：Root-Region-Scan（Root区扫描）" class="headerlink" title="阶段2：Root Region Scan（Root区扫描）"></a>阶段2：Root Region Scan（Root区扫描）</h5><p>此阶段从Root开始标记扫描可达对象。以下是对应的日志信息。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.542<span class="hljs-string">-0800</span>: 0.296: <br>        [GC concurrent-root-region-scan-start]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.542<span class="hljs-string">-0800</span>: 0.296: <br>        [GC concurrent-root-region-scan-end, 0.0000326 secs]<br></code></pre></td></tr></table></figure><h5 id="阶段3：Concurrent-Mark（并发标记）"><a href="#阶段3：Concurrent-Mark（并发标记）" class="headerlink" title="阶段3：Concurrent Mark（并发标记）"></a>阶段3：Concurrent Mark（并发标记）</h5><p>以下是并发标记阶段的日志输出。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.542<span class="hljs-string">-0800</span>: 0.296: <br>        [GC concurrent-mark-start]<br>2021<span class="hljs-string">-07</span><span class="hljs-string">-21</span>T00:45:17.544<span class="hljs-string">-0800</span>: 0.298: <br>        [GC concurrent-mark-end, 0.0019507 secs]<br></code></pre></td></tr></table></figure><h5 id="阶段4：Final-mark（最终标记）"><a href="#阶段4：Final-mark（最终标记）" class="headerlink" title="阶段4：Final mark（最终标记）"></a>阶段4：Final mark（最终标记）</h5><p>对应的日志信息。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2021</span>-<span class="hljs-number">07-21T00:45</span>:<span class="hljs-number">17</span>.<span class="hljs-number">544-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">299</span>: <br>    [GC remark <br>    <span class="hljs-number">2021</span>-<span class="hljs-number">07-21T00:45</span>:<span class="hljs-number">17</span>.<span class="hljs-number">544-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">299</span>: <br>    [Finalize Marking, <span class="hljs-number">0.0002050</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-21T00:45</span>:<span class="hljs-number">17</span>.<span class="hljs-number">544-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">299</span>: <br>    [GC ref-proc, <span class="hljs-number">0.0000344</span> secs] <br><span class="hljs-number">2021</span>-<span class="hljs-number">07-21T00:45</span>:<span class="hljs-number">17</span>.<span class="hljs-number">544-0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">299</span>: <br>    [Unloading, <span class="hljs-number">0.0003887</span> secs], <span class="hljs-number">0.0010297</span> secs]<br> [Times: user=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sys=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>, real=<span class="hljs-number">0</span>.<span class="hljs-number">00</span> secs] <br></code></pre></td></tr></table></figure><h5 id="阶段5：Cleanup（清理）"><a href="#阶段5：Cleanup（清理）" class="headerlink" title="阶段5：Cleanup（清理）"></a>阶段5：Cleanup（清理）</h5><p>最后这个清理阶段为即将到来的转移阶段作准备，统计小堆块中所有存活的对象，并将小堆块进行排序，以提高GC效率。这个阶段也为下一次标记执行必需的所有整理工作(house-keeping activites)：维护并发标记的内部状态。要注意的是，所有包括存活对象的小堆块在此阶段都被回收了。有一部分任务是并发的，例如空堆区的回收，还有大部分的存活率计算，此阶段也需要一个短暂的STW，才能不受应用线程的影响并完成作业，对应日志如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2021</span>-<span class="hljs-number">07</span>-<span class="hljs-number">21</span>T<span class="hljs-number">00</span>:<span class="hljs-number">45</span>:<span class="hljs-number">17</span>.<span class="hljs-number">545</span>-<span class="hljs-number">0800</span>: <span class="hljs-number">0</span>.<span class="hljs-number">300</span>:<span class="hljs-meta"> [GC cleanup 319M-&gt;319M(512M), 0.0007032 secs]</span><br></code></pre></td></tr></table></figure><h4 id="Evacuation-Pause-mixed-转移暂停：混合模式"><a href="#Evacuation-Pause-mixed-转移暂停：混合模式" class="headerlink" title="Evacuation Pause(mixed)(转移暂停：混合模式)"></a>Evacuation Pause(mixed)(转移暂停：混合模式)</h4><p>并发标记完成之后，G1将执行一次混合收集（mixed collection），不只清理年轻代，还将一部分老年代区域也加入到collection set中。混合模式的转移暂停（Evacuation pause）不一定紧跟并发标记阶段。在并发标记与混合转移暂停之间，很可能会存在多次 young 模式的转移暂停。</p><blockquote><p><code>混合模式</code> 就是指这次GC事件混合着处理年轻代和老年代的region。这也是G1等增量垃圾收集器的特色。而ZGC等最新的垃圾收集器则不使用分代算法。</p></blockquote><p>混合模式下的日志，和纯年轻代模式相比，还是有一些区别的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">2021-07-21T00:45:17.574-0800: 0.328:</span> <br>    [<span class="hljs-string">GC</span> <span class="hljs-string">pause</span> <span class="hljs-string">(G1</span> <span class="hljs-string">Evacuation</span> <span class="hljs-string">Pause)</span> <span class="hljs-string">(mixed)</span>, <span class="hljs-number">0.0028130</span> <span class="hljs-string">secs</span>]<br>   [<span class="hljs-attr">Parallel Time:</span> <span class="hljs-number">2.4</span> <span class="hljs-string">ms</span>, <span class="hljs-attr">GC Workers:</span> <span class="hljs-number">8</span>]<br>        <span class="hljs-string">......</span><br>      [<span class="hljs-string">Update</span> <span class="hljs-string">RS</span> <span class="hljs-string">(ms):</span> <span class="hljs-attr">Min:</span> <span class="hljs-number">0.0</span>, <span class="hljs-attr">Avg:</span> <span class="hljs-number">0.0</span>, <span class="hljs-attr">Max:</span> <span class="hljs-number">0.1</span>, <span class="hljs-attr">Diff:</span> <span class="hljs-number">0.1</span>, <span class="hljs-attr">Sum:</span> <span class="hljs-number">0.2</span>]<br>         [<span class="hljs-attr">Processed Buffers: Min:</span> <span class="hljs-number">0</span>, <span class="hljs-attr">Avg:</span> <span class="hljs-number">0.9</span>, <span class="hljs-attr">Max:</span> <span class="hljs-number">1</span>, <span class="hljs-attr">Diff:</span> <span class="hljs-number">1</span>, <span class="hljs-attr">Sum:</span> <span class="hljs-number">7</span>]<br>      [<span class="hljs-string">Scan</span> <span class="hljs-string">RS</span> <span class="hljs-string">(ms):</span> <span class="hljs-attr">Min:</span> <span class="hljs-number">0.0</span>, <span class="hljs-attr">Avg:</span> <span class="hljs-number">0.0</span>, <span class="hljs-attr">Max:</span> <span class="hljs-number">0.0</span>, <span class="hljs-attr">Diff:</span> <span class="hljs-number">0.0</span>, <span class="hljs-attr">Sum:</span> <span class="hljs-number">0.0</span>]<br>      <span class="hljs-string">......</span><br>   [<span class="hljs-attr">Code Root Fixup:</span> <span class="hljs-number">0.0</span> <span class="hljs-string">ms</span>]<br>   [<span class="hljs-attr">Code Root Purge:</span> <span class="hljs-number">0.0</span> <span class="hljs-string">ms</span>]<br>   [<span class="hljs-attr">Clear CT:</span> <span class="hljs-number">0.1</span> <span class="hljs-string">ms</span>]<br>   [<span class="hljs-attr">Other:</span> <span class="hljs-number">0.3</span> <span class="hljs-string">ms</span>]<br>      [<span class="hljs-attr">Choose CSet:</span> <span class="hljs-number">0.0</span> <span class="hljs-string">ms</span>]<br>      [<span class="hljs-attr">Ref Proc:</span> <span class="hljs-number">0.1</span> <span class="hljs-string">ms</span>]<br>      [<span class="hljs-attr">Ref Enq:</span> <span class="hljs-number">0.0</span> <span class="hljs-string">ms</span>]<br>      [<span class="hljs-attr">Redirty Cards:</span> <span class="hljs-number">0.1</span> <span class="hljs-string">ms</span>]<br>      [<span class="hljs-attr">Humongous Register:</span> <span class="hljs-number">0.0</span> <span class="hljs-string">ms</span>]<br>      [<span class="hljs-attr">Humongous Reclaim:</span> <span class="hljs-number">0.0</span> <span class="hljs-string">ms</span>]<br>      [<span class="hljs-attr">Free CSet:</span> <span class="hljs-number">0.0</span> <span class="hljs-string">ms</span>]<br>   [<span class="hljs-attr">Eden:</span> <span class="hljs-number">10.</span><span class="hljs-string">0M(10.0M)-&gt;0.0B(21.0M)</span> <br>        <span class="hljs-attr">Survivors:</span> <span class="hljs-number">15.</span><span class="hljs-string">0M-&gt;4096.0K</span> <br>      <span class="hljs-attr">Heap:</span> <span class="hljs-number">425.</span><span class="hljs-string">6M(512.0M)-&gt;365.1M(512.0M)</span>]<br> [<span class="hljs-attr">Times:</span> <span class="hljs-string">user=0.01</span> <span class="hljs-string">sys=0.00</span>, <span class="hljs-string">real=0.00</span> <span class="hljs-string">secs</span>] <br></code></pre></td></tr></table></figure><blockquote><p>简单解读如下（部分概念和名称，可以参考前面的G1的日志分析）：</p><ol><li><code>Update RS (ms)</code> 因为 Remember Sets 是并发处理的，必须确保在实际的垃圾收集之前，缓冲区中的card 的得到处理，如果card数量很多，则GC并发线程的负载可能就会很高。可能的原因是修改的字段过多，或CPU资源受限。</li><li><code>Processed Buffers</code> 各个worker 线程处理了多个本地缓冲区（local buffer）。</li><li><code>Scan RS (ms)</code> 用了多长时间扫描来自RSet的引用。</li><li><code>[Clear CT: 0.1 ms]</code> 清理 card table 中的 cards 的时间。清理工作只是简单地删除“脏”状态，此状态用来标识一个字段是否被更新，供Remebered Sets 使用。</li><li><code>[Redirty Cards: 0.1 ms]</code> 将 card table 中适当的位置标记为 dirty 所花费的时间。</li></ol></blockquote><h4 id="Full-GC（Allocation-Failure）"><a href="#Full-GC（Allocation-Failure）" class="headerlink" title="Full GC（Allocation Failure）"></a>Full GC（Allocation Failure）</h4><p>G1 是一款自适应的增量垃圾收集器。一般来说，只有在内存严重不足的情况下才会发生 FullGC，以下即是这部分的日志输出结果。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-number">2021</span>-<span class="hljs-number">07</span>-<span class="hljs-number">21</span>T00:<span class="hljs-number">45</span>:<span class="hljs-number">22.279</span>-<span class="hljs-number">0800</span>: <span class="hljs-number">5.033</span>: <br>        [F<span class="hljs-function"><span class="hljs-title">ull</span> GC (Allocation Failure)  405M-&gt;</span><span class="hljs-number">378</span>M(<span class="hljs-number">512</span>M), <span class="hljs-number">0.0339622</span> secs]<br>    [E<span class="hljs-function"><span class="hljs-title">den</span>: 0.0B(25.0M)-&gt;</span><span class="hljs-number">0.0</span>B(<span class="hljs-number">25.0</span>M) <br>        S<span class="hljs-function"><span class="hljs-title">urvivors</span>: 0.0B-&gt;</span><span class="hljs-number">0.0</span>B H<span class="hljs-function"><span class="hljs-title">eap</span>: 405.6M(512.0M)-&gt;</span><span class="hljs-number">378.8</span>M(<span class="hljs-number">512.0</span>M)], <br>      [M<span class="hljs-function"><span class="hljs-title">etaspace</span>: 2565K-&gt;</span><span class="hljs-number">2565</span>K(<span class="hljs-number">1056768</span>K)]<br>[Times: user=<span class="hljs-number">0.03</span> sys=<span class="hljs-number">0.00</span>, <span class="hljs-keyword">real</span>=<span class="hljs-number">0.04</span> secs] <br></code></pre></td></tr></table></figure><h2 id="GC调优"><a href="#GC调优" class="headerlink" title="GC调优"></a>GC调优</h2><p>我们的GC有很多的默认参数，基本能满足我们大多数的场景下的性能需求。但是在一些场景下我们的硬件条件并不是那么充足，或者说是在一些默认的场景下JVM不能满足我们的个别性能点需求。因此我们需要通过观察分析GC日志调整GC参数的方式，让JVM在特定的场景表现出最优的性能表现。那么GC调优我们该怎么开始呢？</p><blockquote><p>我刚接触GC调优的时候，我对GC调优无从下手，面对那么多参数，怎么才算是调优了呢？换一个垃圾收集器，堆空间改大一点？一脸懵。。</p></blockquote><h3 id="调优的基本流程"><a href="#调优的基本流程" class="headerlink" title="调优的基本流程"></a>调优的基本流程</h3><p>刚接触调优的新手面对200多个GC参数基本上都会一脸懵逼，然后随便调几个参数试试结果或者改几行代码试试，但是这样的操作基本上是徒劳的。<strong>GC调优和其他的其他的性能调优其实是同样的道理</strong>，只要按照一下的步骤操作，基本能保证我们调优的大方向不会错。</p><ol><li><strong>列出性能调优指标（State your performance goals）</strong></li><li><strong>执行测试（Run tests）</strong></li><li><strong>检查结果（Measure the results）</strong></li><li><strong>与目标进行对比（Compare the results with goals）</strong></li><li><strong>如果达不到指标，修改配置参数，然后继续测试（go back to running tests）</strong></li></ol><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>第一步，我们需要做的事情是：制定明确的GC性能指标。对所有的性能监控和管理来看，有三个纬度是通用的：</p><ul><li><strong>Latency（延迟）</strong></li><li><strong>Throughput（吞吐量）</strong></li><li><strong>Capacity（系统容量）</strong></li></ul><h4 id="Latency（延迟）"><a href="#Latency（延迟）" class="headerlink" title="Latency（延迟）"></a>Latency（延迟）</h4><p>GC的延迟率指标由一般的延迟需求决定。延迟指标的描述一般如下：</p><ul><li>所有的交易必须在10秒内得到响应。</li><li>90%的订单付款操作必须在3秒内处理完成。</li><li>推荐商品必须在 100ms 内展示到用户面前。</li></ul><p>面对这类性能指标时，需要保证在交易过程中，<strong>GC暂停时间不能占用太多的时间</strong>，否则满足不了指标，但是我们知道在GC过程中是必定会进行STW的，那么这里的“不能占用太多”的意思是需要视具体情况而定，还要考虑其他的因素，比如外部数据源的交互时间（round-trips），锁竞争（lock contention），以及其他的安全点等。</p><blockquote><p>在CMS之前的垃圾收集器，垃圾收集工作周期都是需要全程暂停应用线程的，因此之前GC的延迟，在GC暂停期间就是一个几乎没有优化的空间的硬伤。</p></blockquote><p>假设性能需求为：<code>90%</code> 的交易要在<code>1000ms</code> 以内完成，每次交易最长不能超过<code>10s</code>。根据经验，假设GC暂停时间比例不能超过10%，也就是90%的GC暂停必须在<code>100ms</code>内结束，也不能超过<code>1000ms</code>的GC暂停。为了简单期间，我们忽略在同一次交易过程中发生多次的GC的停顿可能性。下面是一段GC日志片段。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2015</span>‐<span class="hljs-number">06</span>‐<span class="hljs-number">04</span><span class="hljs-variable">T13</span><span class="hljs-operator">:</span><span class="hljs-number">34</span><span class="hljs-operator">:</span><span class="hljs-number">16.974</span>‐<span class="hljs-number">0200</span><span class="hljs-operator">:</span> <span class="hljs-number">2.578</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">93677</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">70109</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">254976</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">499597</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">511230</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">761856</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">593275</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">581339</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1016832</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2936</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">2936</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-number">0.0713174</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.21</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.07</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>上面的这段日志表示一次Parallel GC暂停，发生在<code>2015‐06‐04T13:34:16.974‐0200</code> ，对应着JVM启动后的第<code>2.578</code>秒。本次应用线程暂停了<code>0.0713174</code>秒。这次是一次 FullGC 暂停，花费的总时间<code>210ms</code>，但因为是多核CPU机器，所有最后重要的数字是应用线程被暂停的总时间<code>real</code>，这里使用的是并行GC，所以暂停的总时间是<code>70ms</code>，这里我们的性能要是90%的GC暂停必须在100ms内结束，这里的暂停时间是70ms，满足要求。</p><h4 id="Throughput（吞吐量）"><a href="#Throughput（吞吐量）" class="headerlink" title="Throughput（吞吐量）"></a>Throughput（吞吐量）</h4><p>吞吐量和延迟指标有很大区别。当然两者都是根据一般吞吐量需求而得出的。一般吞吐量需求（Generic requirements for throughput）类似下面这样：</p><ul><li>解决方案必须每天处理100万个订单。</li><li>解决方案必须支持1000个登录用户，同时在5～10秒内执行某个操作：A、B或C。</li><li>每周对所有客户进行统计，时间不超过6小时，时间窗口为每周日晚12点到次日6点之间。</li></ul><p>可以看出，<strong>吞吐量需求不是针对单个操作的，而是给定的时间内，系统必须完成多少个操作</strong>。和延迟需求类似，GC调优也需要去定GC行为所消耗的总时间。每个系统能接受的时间不同，一般来说，GC占用的总时间比不能超过 <code>10%</code>。</p><p>假设选在需求为：每分钟处理 1000 笔交易。同时，每分钟GC暂停的总时间不能超过6秒（即10%）。有了正式的需求，通过分析GC日志，我们可以得到下面这些信息。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2015</span>‐<span class="hljs-number">06</span>‐<span class="hljs-number">04</span><span class="hljs-variable">T13</span><span class="hljs-operator">:</span><span class="hljs-number">34</span><span class="hljs-operator">:</span><span class="hljs-number">16.974</span>‐<span class="hljs-number">0200</span><span class="hljs-operator">:</span> <span class="hljs-number">2.578</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">93677</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">70109</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">254976</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">499597</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">511230</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">761856</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">593275</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">581339</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1016832</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2936</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">2936</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-number">0.0713174</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.21</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.07</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>此时我们对<code>用户耗时（user）</code>和<code>系统耗时（sys）</code>感兴趣而不关心<code>实际耗时（real）</code>。这里我们关心的时间为<code>0.23s</code>（user + sys = 0.21s + 0.02s），这段时间内，GC暂停会占用CPU资源。重要的是<strong>系统运行在多核心的机器上，转换到实际的停顿时间（stop-the-world）</strong>为<code>0.07131474秒</code>。提取出这些有用的信息之后，剩下的就是要统计每分钟内GC暂停的总时间。看看是否满足需求。每分钟内暂停时间不超过<code>6000毫秒</code>（<code>6秒</code>）。</p><blockquote><p>其实对与吞吐量的优化还是围绕着GC吞吐量公示来的，即：<strong>吞吐量 = 运行应用代码时间/(运行应用代码时间+ 运行垃圾收集时间)**。其实我们可以发现，只要缩短单位时间内垃圾收集时间暂停时间就能增加吞吐量，因此在调优吞吐量我们还是需要关心</strong>单位时间内暂停的总时长**。</p><p>关于 GCTime 中的 user、sys、real。这个问题之前困扰了我很久很久，他们之间的关系是什么？为什么会 user + sys = real？</p><p>我之前是知道user、sys、real 分别代表 用户耗时、系统耗时、实际耗时。但是他们之间的关系看的不是很明白。难道单次GC的用户耗时还能比实际耗时还要久？这次梳理我又去重新找了资料理解这几个时间背后的意思。</p><ul><li><strong>user</strong> 进程执行用户态代码（核心之外）所有的时间。这是执行此进程此线程所使用的实际CPU时间。其他进程和此阻塞线程的时间并不包括在内。在是垃圾收集的情况下，表示GC线程执行所使用的CPU总时间。</li><li><strong>sys</strong> 进程在内核态消耗的 CPU 时间，即在内核执行系统调用或者等待系统事件所使用的 CPU 时间。</li><li><strong>real</strong> 程序从开始到结束所用的时钟时间。这个时间包括其他进程使用的时间片和进程阻塞的时间（比如等待I/O完成）。</li></ul><p>user + sys 时间告诉我们，程序实际执行使用的CPU时间，这里是指<strong>所有的CPU</strong>，因此<strong>有多个线程的话，这个时间会超过 real 所表示的时钟时间</strong>。</p><p>通常情况下我们只需要参考<code>real</code>时间来进行优化，如果我们想通过<strong>增加线程或者增加CPU数量来减少GC停顿时间</strong>，我们可以参考<code>user</code>和<code>sys</code>。</p></blockquote><h4 id="Capacity（系统容量）"><a href="#Capacity（系统容量）" class="headerlink" title="Capacity（系统容量）"></a>Capacity（系统容量）</h4><p>系统容量（Capacity）需求，是达成吞吐量和延迟指标的情况下，对硬件环境的额外约束。这类需求大多数都是源于计算资源或者预算方面的原因。例如：</p><ul><li>系统必须能部署到小于512MB内存的Android设备上。</li><li>系统必须部署在配置不超过4核8GB的ECS上。</li><li>每个月云ECS的账单不超过10000元。</li></ul><p>因此，在满足延迟和吞吐量需求的基础上<strong>必须考虑系统容量</strong>。如果有无限的计算资源可以挥霍，那么任何延迟和吞吐量的指标都可以满足，但是<strong>现实是预算和其他约束限制了可用的资源。</strong></p><blockquote><p><strong>没有资源的限制也就没有调优。</strong></p></blockquote><h3 id="针对指标的简单调优示例"><a href="#针对指标的简单调优示例" class="headerlink" title="针对指标的简单调优示例"></a>针对指标的简单调优示例</h3><p>介绍完上面的三个指标，我们对下面的程序进行实际分析操作以达成GC指标。测试代码如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//imports skipped for brevity </span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span> &#123;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ScheduledExecutorService executorService = Executors.newScheduledThreadPool(<span class="hljs-number">2</span>); <br>    <span class="hljs-keyword">private</span> Deque&lt;<span class="hljs-keyword">byte</span>[]&gt; <span class="hljs-built_in">deque</span>; <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> objectSize; <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> queueSize; <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Producer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> objectSize, <span class="hljs-keyword">int</span> ttl)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.<span class="hljs-built_in">deque</span> = <span class="hljs-keyword">new</span> ArrayDeque&lt;<span class="hljs-keyword">byte</span>[]&gt;();<br>        <span class="hljs-keyword">this</span>.objectSize = objectSize;<br>        <span class="hljs-keyword">this</span>.queueSize = ttl * <span class="hljs-number">1000</span>; <br>    &#125;<br>    <br>    @Override <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123; <br>            <span class="hljs-built_in">deque</span>.add(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[objectSize]);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">deque</span>.<span class="hljs-built_in">size</span>() &gt; queueSize) &#123; <br>                <span class="hljs-built_in">deque</span>.poll();<br>            &#125; <br>        &#125; <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws InterruptedException </span>&#123; <br>        executorService.scheduleAtFixedRate( <span class="hljs-keyword">new</span> Producer(<span class="hljs-number">200</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> / <span class="hljs-number">1000</span>, <span class="hljs-number">5</span>), <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, TimeUnit.MILLISECONDS ); <br>        executorService.scheduleAtFixedRate( <span class="hljs-keyword">new</span> Producer(<span class="hljs-number">50</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> / <span class="hljs-number">1000</span>, <span class="hljs-number">120</span>), <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, TimeUnit.MILLISECONDS); <br>        TimeUnit.MINUTES.sleep(<span class="hljs-number">10</span>); executorService.shutdownNow(); <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码每100ms提交两个作业（job），每个作业都模拟特定的生命周期：创建对象，然后在特定的时间释放，接着就不管了，由GC来自动回收占用的内存。我们通过下面的JVM参数打开GC日志信息，并通过加上JVM参数<code>-Xloggc</code> 来指定GC日志的存储位置。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">-XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -Xloggc:gc.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>这样我们可以得到如下的一些日志输出信息：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">04</span><span class="hljs-variable">T17</span><span class="hljs-operator">:</span><span class="hljs-number">03</span><span class="hljs-operator">:</span><span class="hljs-number">12.320</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.284</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">65442</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">10721</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">76288</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">65442</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">63175</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">251392</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0429520</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.08</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">04</span><span class="hljs-variable">T17</span><span class="hljs-operator">:</span><span class="hljs-number">03</span><span class="hljs-operator">:</span><span class="hljs-number">12.518</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.482</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">76078</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">10710</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">141824</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">128531</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">128246</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">316928</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0607000</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.07</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.06</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">04</span><span class="hljs-variable">T17</span><span class="hljs-operator">:</span><span class="hljs-number">03</span><span class="hljs-operator">:</span><span class="hljs-number">12.579</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">0.542</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">10710</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">141824</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">117535</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">128105</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">275968</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">128246</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">128105</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">417792</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2729</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2729</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0303548</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.10</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">04</span><span class="hljs-variable">T17</span><span class="hljs-operator">:</span><span class="hljs-number">03</span><span class="hljs-operator">:</span><span class="hljs-number">13.114</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">1.077</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">131072</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">10748</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">141824</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">259177</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">259140</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">417792</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.1061217</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.06</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.11</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.11</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-operator">...</span><br></code></pre></td></tr></table></figure><p>基于日志中的信息，我们可以通过三个优化目标来提升性能：</p><ol><li>确保最坏情况下，GC暂停时间不超过预定阈值。</li><li>确保线程暂停的总时间不超过预定阈值。</li><li>在确保达到延迟和吞吐量的指标下，降低硬件配置以及成本。</li></ol><p>为此我们使用三种不同配置，将代码运行10分钟，得到了三种不同的结果，汇总如下：</p><table><thead><tr><th>堆内存大小（Heap）</th><th>GC算法（GC Algorithm）</th><th>有效时间比（Useful work）</th><th>最长暂停时间（Longest pause）</th></tr></thead><tbody><tr><td>-Xmx12g</td><td>-XX:+UseConcMarkSweepGC</td><td>89.8%</td><td>560ms</td></tr><tr><td>-Xmx12g</td><td>-XX:+UseParallelGC</td><td>91.5%</td><td>1104ms</td></tr><tr><td>-Xmx8g</td><td>-XX:UseConcMarkSweepGC</td><td>66.3%</td><td>1610ms</td></tr></tbody></table><p>使用不同的GC算法和不同的内存配置，运行相同的代码，以测量GC暂停时间与延迟、吞吐量的关系。</p><blockquote><p>⚠️为了尽可能简单，示例中只改变了很少的输入参数，此实验也灭有在不同的CPU数量或者不同的堆布局下进行测试</p></blockquote><h4 id="调优延迟指标（Tuning-for-Latancy）"><a href="#调优延迟指标（Tuning-for-Latancy）" class="headerlink" title="调优延迟指标（Tuning for Latancy）"></a>调优延迟指标（Tuning for Latancy）</h4><p>假设我们有一个需求，每次作业必须在 1000ms 内处理完成。我们知道，实际的作业处理只需要100ms，简化后，两者相减我们就可以算出对GC暂停的延迟要求。现在需求变成：GC暂停时间不能超过900ms。这个问题就很容易找到答案，只要分析GC日志文件，并找出GC暂停中最大的那个暂停时间即可。</p><table><thead><tr><th>堆内存大小（Heap）</th><th>GC算法（GC Algorithm）</th><th>有效时间比（Useful work）</th><th>最长暂停时间（Longest pause）</th></tr></thead><tbody><tr><td>-Xmx12g</td><td>-XX:+UseConcMarkSweepGC</td><td>89.8%</td><td>560ms</td></tr><tr><td>-Xmx12g</td><td>-XX:+UseParallelGC</td><td>91.5%</td><td>1104ms</td></tr><tr><td>-Xmx8g</td><td>-XX:UseConcMarkSweepGC</td><td>66.3%</td><td>1610ms</td></tr></tbody></table><p>从上表中，其中我们可以看到有一个配置达到了要求，当堆内存大小为<code>-Xmx12g -XX:+UseConcMarkSweepGC</code>是最大的暂停时间为560ms，满足最大暂停时间小于900ms的目标，如果没有其他的关于吞吐量和系统容量的要求的话，目标达成调优结束。其运行配置参数为：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-Xmx12g -XX:+UseConcMarkSweepGC</span><br></code></pre></td></tr></table></figure><h4 id="吞吐量调优（Tuning-for-Throughout）"><a href="#吞吐量调优（Tuning-for-Throughout）" class="headerlink" title="吞吐量调优（Tuning for Throughout）"></a>吞吐量调优（Tuning for Throughout）</h4><p>假定吞吐量指标为：每小时完成1300万次操作处理。同样是上面的配置，其中有一种配置满足了需求：</p><table><thead><tr><th>堆内存大小（Heap）</th><th>GC算法（GC Algorithm）</th><th>有效时间比（Useful work）</th><th>最长暂停时间（Longest pause）</th></tr></thead><tbody><tr><td>-Xmx12g</td><td>-XX:+UseConcMarkSweepGC</td><td>89.8%</td><td>560ms</td></tr><tr><td>-Xmx12g</td><td>-XX:+UseParallelGC</td><td><strong>91.5%</strong></td><td>1104ms</td></tr><tr><td>-Xmx8g</td><td>-XX:UseConcMarkSweepGC</td><td>66.3%</td><td>1610ms</td></tr></tbody></table><p>从上面的表格的数据不难得出，这里<code>-Xmx12g -XX:+UseParallelGC</code>是唯一有效的解。这里的GC占用的8.5%的时间，剩下91.5%都是有效的计算时间。为了简单起见，我们忽略示例中的其他安全点。现在需要考虑：</p><ol><li>每个CPU核心处理一次作业需要耗时<code>100ms</code>。</li><li>因此，一分钟内每个核心可以执行60000次操作（每个job完成100次操作）。</li><li>一小时内，一个核心可以执行360万次。</li><li>有四个CPU内核，则每小时可以执行：4 * 3.6M = 1440万次操作。</li></ol><p>理论上，通过简单的计算就可以得出结论，每小时可以执行的操作数为：<code>14.4M * 91.5% = 13176000</code>次，满足需求。值得一提的是，假若还要满足延迟指标，那就有问题了，最坏的情况下，GC暂停时间为<code>1104ms</code>，最大延迟时间是前一种配置的两倍。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-Xmx12g -XX:+UseParallelGC</span><br></code></pre></td></tr></table></figure><h4 id="调优系统容量（Tuning-for-Capacity）"><a href="#调优系统容量（Tuning-for-Capacity）" class="headerlink" title="调优系统容量（Tuning for Capacity）"></a>调优系统容量（Tuning for Capacity）</h4><p>假设需要将软件部署到服务器上，配置为<code>4核10G</code>。这样的话，系统容量的要求就变成，最大的堆内存空间不能超过<code>8G</code>。有了这个需求，我们的三套配置只有最后一个满足条件。</p><table><thead><tr><th>堆内存大小（Heap）</th><th>GC算法（GC Algorithm）</th><th>有效时间比（Useful work）</th><th>最长暂停时间（Longest pause）</th></tr></thead><tbody><tr><td>-Xmx12g</td><td>-XX:+UseConcMarkSweepGC</td><td>89.8%</td><td>560ms</td></tr><tr><td>-Xmx12g</td><td>-XX:+UseParallelGC</td><td>91.5%</td><td>1104ms</td></tr><tr><td><strong>-Xmx8g</strong></td><td>-XX:UseConcMarkSweepGC</td><td>66.3%</td><td>1610ms</td></tr></tbody></table><p>因此在这个需求下的运行配置</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-Xmx8g -XX:+UseConcMarkSweepGC</span><br></code></pre></td></tr></table></figure><h3 id="日志分析工具"><a href="#日志分析工具" class="headerlink" title="日志分析工具"></a>日志分析工具</h3><p>之前我们梳理过一些监控诊断工具，其中有很多工具都可以很好的监控GC，其中命令行工具 <code>jstat -gc</code>，<code>jvisulvm</code>，<code>jmc</code>都是可以很有效的监控堆空间使用以及GC工作情况。这里就详细介绍了，如果有不太记得了的朋友，可以回去看看😏。其中最主要用于分析GC的GC信息还是GC日志，日志中包含了GC最全面的描述，就是GC事实上的标准，可以作为GC性能评估的最真实数据来源。GC日志一般输出到文件之中，是纯text格式的，当然也可以打印到控制台。有多个可以控制GC日志的JVM参数，例如可以打印每次GC的持续时间，以及程序暂停时间（<code>-XX:+PrintGCApplicationStoppedTime</code>），还有GC清理了多少引用类型（<code>-XX:+PrintReferenceGC</code>）。</p><p>其中最基础的要打印出GC日志，需要在启动参数中指定以下参数（将所有GC事件打印到日志文件中，输出每次GC的日期和时间戳。不同GC算法输出的内容略有不同）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">‐XX:+PrintGCTimeStamps ‐XX:+PrintGCDateStamps ‐XX:+PrintGCDetails ‐Xloggc:<span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下面是一段GC的日志信息，其中记录了5次GC信息，其中包括了1次youngGC，还包括了4次FullGC。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">04</span><span class="hljs-variable">T17</span><span class="hljs-operator">:</span><span class="hljs-number">03</span><span class="hljs-operator">:</span><span class="hljs-number">30.892</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">18.775</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">920064</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">189402</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1143808</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2723073</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2722965</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3912704</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.3732643</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.52</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.37</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.37</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">04</span><span class="hljs-variable">T17</span><span class="hljs-operator">:</span><span class="hljs-number">03</span><span class="hljs-operator">:</span><span class="hljs-number">31.266</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">19.148</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">189402</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1143808</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">2533562</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">1984964</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">2796544</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2722965</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">1984964</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3940352</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2764</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2764</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.1733963</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">1.04</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.17</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">04</span><span class="hljs-variable">T17</span><span class="hljs-operator">:</span><span class="hljs-number">03</span><span class="hljs-operator">:</span><span class="hljs-number">34.496</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">22.378</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">954368</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1143808</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">1984964</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2171912</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">2796544</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2939332</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2171912</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3940352</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2777</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2777</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.2171111</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">1.14</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.22</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">04</span><span class="hljs-variable">T17</span><span class="hljs-operator">:</span><span class="hljs-number">03</span><span class="hljs-operator">:</span><span class="hljs-number">38.196</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">26.078</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">954368</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1143808</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">2171912</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2361421</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">2796544</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3126280</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2361421</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3940352</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2780</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2780</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.2804937</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">1.44</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.28</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2021</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">04</span><span class="hljs-variable">T17</span><span class="hljs-operator">:</span><span class="hljs-number">03</span><span class="hljs-operator">:</span><span class="hljs-number">41.895</span><span class="hljs-operator">-</span><span class="hljs-number">0800</span><span class="hljs-operator">:</span> <span class="hljs-number">29.777</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">954368</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1143808</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">2361421</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2550111</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">2796544</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3315789</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2550111</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3940352</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2782</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2782</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.2061000</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">1.25</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.21</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br></code></pre></td></tr></table></figure><p>在上面的日志信息中记录了如下的信息：</p><ul><li>这一段日志截取自JVM后启动的18秒到30秒的区间。</li><li>young区域的空间大小是 1143808K 即 1117MB，老年代空间 2796544K 即 2731MB，这个堆空间大小3940352K 即 3848MB，Metaspace空间大小1032MB。</li><li>在这一段GC日志中，应用总共运行了 11.0002s，期间发生了4次GC（不算最后一次GC）其中3次FullGC和一次YoungGC，其中GC总暂停时间为1.25s，占总运行时间的～=8.8%。</li><li>在第一次youngGC之后，后续的GC全部为FullGC，并且在每次FullGC，整个堆空间的占用依旧呈现上升趋势，可以看出内存空间并不能及时的释放。</li></ul><p>通过对这些日志的简单分析，我们基本可以得出，目前JVM的GC是病态的，JVM频繁地进行FullGC，并且FullGC后，堆内存仍然呈上升的趋势。可以预见的是当增长的内存空间超过堆空间大小，应用将会出现OOM或持续GC无法正常工作的情况。</p><p>当然我们还可以从GC日志中得到更多的信息，比如在某个时间段内内存的分配速率和垃圾收集速率，在每次垃圾youngGC后对象的晋升速率等等。但是如果一般系统会产生大量的GC日志，纯靠人工很难进行完全地阅读和分析。</p><p>这个时候我们就要合理的利用我们的GC日志分析工具来帮助我们充分分析诊断GC，这里我们主要介绍两个工具在GC调优过程中的使用，一个是GCViewer，另外一个是 GCEasy。</p><h4 id="GCViewer"><a href="#GCViewer" class="headerlink" title="GCViewer"></a>GCViewer</h4><p>GCViewer 是一个开源工具的GC日志分析工具。项目在 GitHub 主页各项指标进行了完整的描述。下面我们介绍一些常用指标。第一步获取GC日志文件，并且使用以下命令打开 GCViewer，并且得到下面的界面。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>gcviewer<span class="hljs-number">-1</span>.<span class="hljs-number">36</span>.<span class="hljs-keyword">jar </span>gc.log<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210707002631.png"></p><p>如果不想打开界面，我们也可以使用下面的命令将GC数据导出到 summary.cvs 和 chart.png 中</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java -jar gcviewer-<span class="hljs-number">1.36</span><span class="hljs-selector-class">.jar</span> gc<span class="hljs-selector-class">.log</span> <span class="hljs-selector-tag">summary</span><span class="hljs-selector-class">.csv</span> chart.png<br></code></pre></td></tr></table></figure><p>我们一起来简单看下分析下GCViewer输出的数据，我们先从左侧的第一个tab页图表（Chart）开始。GCViewer使用折线向我们展示了内存空间以及垃圾收集器的工作情况。其中黑色的线代表的是<code>FullGC</code>，深紫色的线表示堆空间的使用，绿色的线表示<code>GC时间</code>。图中两种颜色对应的区域，其中黄色的代表年轻代，紫色代表老年代。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210707004548.png"></p><p>第二个tab页面是事件详情（Event details）其中记录了GC暂停事件（GC pauses）、FullGC暂停事件（Full gc pauses）和并发GC其中在GC暂停事件中，我们能看到这些GC事件的<code>名称（name）</code>、<code>次数（n）</code>、<code>最小值（min）</code>、<code>最大值（max）</code>、<code>平均值（avg）</code>、<code>标准差（stddev）</code>、<code>总时间（sum(s)）</code>、<code>分项总时间占比（sum(%)）</code>。我们可以看到GC暂停（GC pauses）记录的是YoungGC的暂停时间，而FullGC暂停（Full GC pauses）记录了两类暂停，一类是分配失败的FullGC（Allocation Failure），另一类是自适应（Ergonomics）产生的FullGC。其中我们不难发现绝大多数大部分的FullGC是由自适应调整带来的FullGC。我们测试的是 ParallelGC ，GC时会全程暂停应用线程，因此没有并发GC的数据。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210707234907.png"><br>最后一个tab 语法分析程序（Parser）这个部分是一个类似日志输出的窗口，但输出的信息是GCViewer版本，JVM版本，内存大小，执行参数等信息。右侧我们有同样也有三个tab页，这里详细的收集记录了JVM这段时间内的堆空间信息，和GC暂停信息。第一个tab页是一个汇总（summary)信息，其中堆空间的使用情况，总暂停时间，总暂停次数、吞吐量等常用的统计数据一目了然。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210708000947.png"></p><p>第二个tab页是内存有关信息（Memory），这里包括各个分代内存的使用情况、GC后的内存释放信息和对西那个的晋升速率的信息，可以帮助我们有效的分析堆空间中对象的存活与回收情况。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210725173205.png"></p><p>最后一个tab页是暂停有关信息（pause）从总暂停、FullGC暂停、GC暂停这三个纬度统计了GC的最大、最小和平均暂停时间、GC间隔时间的数据，这些数据可以帮助我们全面分析GC的暂停情况。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210708001650.png"></p><p>以上就是GCViewer对一次GC日志的分析结果，GCViewer通过GC日志对GC的内存和暂停进行了充分的分析，数据分析地非常全面。但如果要说缺点的话，GCViewer的UI设计还有很大的提升空间。</p><h4 id="GCEasy"><a href="#GCEasy" class="headerlink" title="GCEasy"></a>GCEasy</h4><p>GCEasy在前面的文章中我们做过简单的介绍，今天介绍GC的分析结果。通过GCEasy输出的图表数据，帮助大家快速有效的分析GC日志。第一个图表是JVM的内存概览图，左侧是图表包括分配内存量，和内存最大值，右侧是数据的柱状图。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210708231952.png"></p><p>第二个图表是关键性能指标（Key Performance Indicators），其中主要记录的指标是吞吐量和GC暂停的图表数据。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210708232336.png"></p><p>第三张图是交互图表（Interactive Graphs），其中<code>Heap after GC</code>表示GC后的堆空间大小，<code>Heap before GC</code>表示GC前的堆空间大小，</p><p><code>GC Duration</code>是GC的持续时间，<code>Reclaimed Bytes</code>表示GC后回收的字节大小，<code>Young Gen</code>表示young区的内存使用情况，同理<code>Old Gen</code>表示老年代的内存使用情况，<code>Meta Space</code> 表示Meta区的内存使用情况最后一个<code>A &amp; P</code>表示对象从新生代晋升到老年代的晋升速率。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210708232943.png"></p><p>第四张图表是GC的统计数据（GC Statistics），按照各个不同的纬度统计GC的数据，可以帮助我们从各个角度详细的分析GC。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210708234008.png"></p><p>最后的两张图是对象统计（Object Stats）和 GC产生原因（GC Causes）分析，其中对象统计计算了对象创建数量和对象晋升的数据。而GC产生原因分析造成GC的原因以及相关的一些GC产生时的一些数据统计。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210708234450.png"><img src="https://gitee.com/realDaiwei/img/raw/master/20210708234435.png"></p><p>以上就是GCEasy对“普通”用户上传的GC日志进行分析的结果，如果想要获得更多的数据可以进行充值，但是这么多纬度和这么数据分析足以让我们完成GC问题定位和GC调优目标达成判定。相较于GCViewer，GCEasy的图表更加丰富，结果展示更加直观，并且不用额外下载软件。如果遇到此类需求，我更倾向使用GCEasy🙈。</p><h3 id="GC调优实战"><a href="#GC调优实战" class="headerlink" title="GC调优实战"></a>GC调优实战</h3><p>这一小节我们介绍导致性能问题的典型情况，这些示例都是来自于生产环境，为演示做了一定长度的精简。</p><blockquote><p><code>Allocation Rate</code> 翻译过来就是<code>分配速率</code>，而不是分配率；因为不是百分比，而是单位时间内分配的量。</p><p><code>Promotion Rate</code> 翻译为 <code>提成速率</code>，即从新生代提升到老年代的速率。</p></blockquote><h4 id="高分配速率（High-Allocation-Rate）"><a href="#高分配速率（High-Allocation-Rate）" class="headerlink" title="高分配速率（High Allocation Rate）"></a>高分配速率（High Allocation Rate）</h4><p>分配速率（<code>Allocation rate</code>）表示单位时间内分配的内存量。通常使用<code>MB/sec</code>作为单位，也可以使用<code>PB/year</code> 等。分配率过高就会严重影响程序的性能，在JVM中会导致巨大的GC开销。</p><h5 id="如何测量分配速率"><a href="#如何测量分配速率" class="headerlink" title="如何测量分配速率"></a>如何测量分配速率</h5><p>在测试分配速率之前，我们需要设置JVM参数：<code>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps</code>，通过GC日志来计算分配速率，GC日志如下所示：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">0.291</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <br>            <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">33280</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">5088</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">38400</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">33280</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">24360</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">125952</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0365286</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>      <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.11</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">0.446</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <br>            <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">38368</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">5120</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">71680</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">57640</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">46240</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">159232</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0456796</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>      <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.15</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.02</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.04</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">0.829</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <br>            <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">71680</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">5120</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">71680</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">112800</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">81912</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">159232</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0861795</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>      <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.23</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.03</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.09</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>计算<code>上一次垃圾收集之后</code>，与<code>下一次GC开始之前</code>的年轻代使用量，两者的差值除以时间，就是分配速率。痛殴上面的日志，可以计算出以下的信息：</p><ul><li>JVM启动之后<code>291ms</code>，共创建了<code>33280KB</code>的对象。第一次 Minor GC（小型GC）完成后，年轻代中还有<code>5088KB</code>的对象存活。</li><li>在启动之后<code>446ms</code>，年轻代的使用量增加到<code>38368KB</code>，触发第二次GC，触发第二次GC，完成后年轻代的使用量减少到<code>5129KB</code>。</li><li>在启动之后<code>829ms</code>，年轻代的使用量为<code>71680KB</code>，GC后变为<code>5120KB</code>。</li></ul><p>通过使用年轻代的使用量我们可以计算分配速率（Allocation druing/ time），如下表所示：</p><table><thead><tr><th>Event</th><th>TIme</th><th>Young before</th><th>Young after</th><th>Allocation during</th><th>Allocation rate</th></tr></thead><tbody><tr><td>1st GC</td><td>291ms</td><td>33280KB</td><td>5088KB</td><td>33280KB</td><td>144MB/sec</td></tr><tr><td>2nd GC</td><td>446ms</td><td>38368KB</td><td>5120KB</td><td>33280KB</td><td>215MB/sec</td></tr><tr><td>3rd GC</td><td>829ms</td><td>71680KB</td><td>5120KB</td><td>66560KB</td><td>173MB/sec</td></tr><tr><td>Total</td><td>829ms</td><td>N/A</td><td>N/A</td><td>133120KB</td><td>161MB/sec</td></tr></tbody></table><p>通过这些信息可以知道，在测量期间，该程序的内存分配速率为<code>161MB/sec</code>。</p><h5 id="分配速率的意义"><a href="#分配速率的意义" class="headerlink" title="分配速率的意义"></a>分配速率的意义</h5><p>分配速率的的变化，会增加或降低GC暂停的频率，从而影响吞吐量。但只有年轻代的<code>minor GC</code>受分配速率的影响，老年代GC的频率和持续时间不受<code>分配速率（allocation rate）</code>的直接影响，而收到<code>提升速率（promotion rate）</code>的影响。</p><p>现在我们只关心 Minor GC的暂停，查看年轻代的3个内存池。因为对象在Eden区分配。所以我们一起来看 Eden 区的大小和分配速率的关系，看看增加 Eden 区的容量，能不能减少Minor GC 暂停次数，从而使程序能够维持更高的分配速率。进过我们的实验，通过参数 <code>-XX:NewSize</code>、<code>-XX:MaxNewSize</code>以及<code>-XX:SurvivorRatio</code> 设置不同的Eden空间，运行同一程序时，可以发现：</p><ul><li>Eden 空间为<code>100MB</code> 时，分配速率低于<code>100MB/sec</code>。</li><li>将 Eden 区增加为<code>1G</code>，分配速率也随之增长，大约等于<code>200MB/sec</code>。</li></ul><p>为什么会这样？<strong>因为减少GC暂停，就等价于减少了任务线的暂停，就可以更多的工作了</strong>，也就可以创建更多的对象，所以对同一应用来说，分配速率越高越好。通过这个结论我们可以得出<strong>“**</strong>Eden区越大越好**<strong>”</strong>这个结论前，我们注意到，分配速率可能会也可能不会影响程序的实际吞吐量。吞吐量和分配速率有一定关系，因为分配速率会影响MinorGC暂停，但对于总体吞吐量的影响，还要考虑<code>MajorGC</code>暂停，而且吞吐量的单位不是<code>MB/s</code>，而是系统所处理的业务量。</p><h5 id="高分配率对JVM的影响及解决方案"><a href="#高分配率对JVM的影响及解决方案" class="headerlink" title="高分配率对JVM的影响及解决方案"></a>高分配率对JVM的影响及解决方案</h5><p>首先，我们应该检查程序的吞吐量是否降低，如果创建了过多的临时对象，minorGC的次数将会增加。如果并发较大，则GC可能会严重影响吞吐量。遇到这种情况时，MinorGC会非常频繁，GC日志将会像下面这样，JVM的启动参数为<code>-XX+PringGCDetails -XX:PringGCTimeStamps -Xmx32m</code>。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2.808</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9760</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">32</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0003076</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.819</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9760</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">32</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0003079</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.830</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9760</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">32</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0002968</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.842</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9760</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">32</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0003374</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.853</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9760</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">32</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0004672</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.864</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9760</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">32</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0003371</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.875</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9760</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">32</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0003214</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.886</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9760</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">32</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0003374</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.896</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9760</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">32</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0003588</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>很显然minGC 的频率太高了，这说明创建了大量的对象。另外年轻在GC之后的使用量又很低，也没有FullGC发生，种种迹象表明，GC对吞吐量造成了严重的影响。那么我们要如何处理这些问题呢？其实在某些情况下，<strong>只要增加年轻代的大小，即可降低分配速率过高所造成的影响</strong>，增加年轻代并不会降低分配速率，但是会减少GC的频率，如果每次GC剩余的对象很少，GC的持续时间也不会明显的增长。增加年轻代是开源的方式解决，我们还可以节流。我们可以在代码中<strong>尽量使用基础类型代替包装类型，从而减少对象的创建。</strong></p><h4 id="过早提升（Premature-Promotion）"><a href="#过早提升（Premature-Promotion）" class="headerlink" title="过早提升（Premature Promotion）"></a>过早提升（Premature Promotion）</h4><p><code>提升速率（promotion rate）</code>，用于<strong>衡量单位时间内从年轻代提升到老年代的数据量</strong>，一般用<code>MB/sec</code>作为单位和分配速率类似。JVM会将长时间存活的对象从年轻代提升到老年代。根据分代假设，可能存在一种情况，老年代中不仅有存活时间长的对象，也可能存在存活时间短的对象。因此<strong>过早提升即对象存活时间还不够长的时候就被提升到老年代。</strong>majorGC 不是为频繁回收而设计的，但 majorGC现在也要清理这些生命短暂的对象，就会导致GC暂停时间过长，这会<strong>严重影响系统的吞吐量**</strong>。**</p><h5 id="如何测量提升速率"><a href="#如何测量提升速率" class="headerlink" title="如何测量提升速率"></a>如何测量提升速率</h5><p>可以指定JVM参数<code>-XX:+PrintGCTimeStamps</code>，通过GC日志来测量提升速率，JVM记录的GC暂停信息如下所示：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2.176</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <br>                                <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9216</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10752</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <br>                <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">10020</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">9042</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">12288</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">19236</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">9042</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">23040</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0036840</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.394</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <br>                                <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9216</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10752</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <br>                <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9042</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">8064</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">12288</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">18258</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">8064</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">23040</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0032855</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.611</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <br>                                <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9216</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10752</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <br>                                <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">8064</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">7085</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">12288</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">17280</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">7085</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">23040</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0031675</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.817</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <br>                                <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9216</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10752</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <br>                <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">7085</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">6107</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">12288</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">16301</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">6107</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">23040</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0030652</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>从上面的日志可以得知：GC之前和之后的年轻代使用量以及堆内存使用量。这样就可以通过差值算出老年代的使用量，GC日志中的信息可以表述为：</p><table><thead><tr><th>Event</th><th>TIme</th><th>Young descreased</th><th>Total descreased</th><th>Promoted</th><th>Promotion rate</th></tr></thead><tbody><tr><td>事件</td><td>耗时</td><td>年轻减少</td><td>整个堆内存减少</td><td>提升量</td><td>提升速率</td></tr><tr><td>1st GC</td><td>291ms</td><td>28192K</td><td>8920K</td><td>19272K</td><td>66.2MB/sec</td></tr><tr><td>2nd GC</td><td>446ms</td><td>33248K</td><td>11400K</td><td>21848K</td><td>140.95MB/sec</td></tr><tr><td>3rd GC</td><td>829ms</td><td>66560K</td><td>30888K</td><td>35672K</td><td>93.14MB/sec</td></tr><tr><td>Total</td><td>829ms</td><td></td><td></td><td>76792K</td><td>92.63MB/sec</td></tr></tbody></table><p>乍一看似乎不是过早提升的问题。事实上，在每次GC之后老年代的使用率似乎在减少。但反过来想，要是没有对象提升或提升率很小，也就不会看到那么多的FullGC了。简单解释一下这里的GC行为：有<strong>很多对象提升到老年代，同时老年代中也有很多对象被回收了，这就是造成了老年代使用量减少的假性，但事实是大量的对象不断地被提升到老年代，并触发 fullGC。</strong></p><h5 id="提升速率的意义"><a href="#提升速率的意义" class="headerlink" title="提升速率的意义"></a>提升速率的意义</h5><p>和分配速率一样，提升速率也会影响GC暂停的频率。但是分配速率主要影响 MinorGC，而提升速率则直接影响 Major GC的频率。有大量的对象提升，自然很快将老年代塞满，老年代填充的越快，则Major GC事件的频率也就越高。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210723234555.png"></p><p>此前我们介绍过，fullGC 通常需要更多的时间，因为需要处理更多的对象，还需要执行碎片整理等额外的复杂过程。通常过早提升的症状表现为以下的形式：</p><ul><li><strong>短时间内频繁地执行FullGC。</strong></li><li><strong>每次FullGC后老年代的使用率都非常低，都在10%～20%或以下。</strong></li><li><strong>提升速率接近于分配速率。</strong></li></ul><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>简单来说，要解决这类问题，需要让年轻代存放得下暂存的数据。有两种简单的方法：</p><ul><li><strong>增加年轻代的大小。</strong>设置JVM启动参数，类似这样：<code>-Xmx64m -XX:NewSize=32m</code>，程序在执行时，Full GC 的次数自然会减少很多，只会 minorGC 的持续时间产生影响：</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2.251</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <br>                    <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">28672</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">3872</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">28672</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">37126</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">12358</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">61440</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0008543</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><span class="hljs-number">2.776</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <br>                    <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">28448</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">4096</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">28672</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">36934</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">16974</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">61440</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0033022</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><ul><li><strong>减少每次批处理的数量</strong>。也能得到类似的结果，至于选用那个方案，要根据业务需求决定。在某些情况下，业务逻辑不允许减少批处理的数量，那就只能增加堆内存，或者重新指定年轻代的大小。</li></ul><p>如果都不可行，就只能优化数据结构，减少内存消耗。但总体目标依然是一致的，让临时数据能够在年轻代存放的下。</p><blockquote><p>能在年轻代就尽量不要提升到老年代，从而避免过早提升。</p></blockquote><h4 id="Weak，Soft-及-Phantom-引用"><a href="#Weak，Soft-及-Phantom-引用" class="headerlink" title="Weak，Soft 及 Phantom 引用"></a>Weak，Soft 及 Phantom 引用</h4><p>另一类影响GC的问题是程序中中的<code>non-strong引用</code>。虽然这类引用在很多情况下可以避免出现<code>OutOfMemoryError</code>，但过量使用也会对GC造成严重的影响，反而降低系统性能。</p><h5 id="弱引用的缺点"><a href="#弱引用的缺点" class="headerlink" title="弱引用的缺点"></a>弱引用的缺点</h5><p>首先，<code>弱引用(weak reference)</code> 是可以被GC强制回收的。当垃圾收集器发现一个弱可达对象(weakly reachable 即指向该对象的引用只剩下弱引用) 时，就会将其置入相应的<code>ReferenceQueue</code>中，变成可终结的对西那个，之后可能遍历这个 reference queue，并执行相应的清理。典型的示例是清除缓存中不再引用的KEY。当然，在这个时候，我们还可以将该对象赋值给新的强引用，在最后终结和回收前，GC会在此确认该对象是否可以安全回收。因此，弱引用对象的回收过程是横跨多个GC周期的。实际上<strong>弱引用使用的很多，大部分缓存框架(caching solution) 都是基于弱引用实现的</strong>，所以虽然业务代码中没有直接使用弱引用，但是程序中依然大量存在。其次，<code>软引用</code>(soft reference)<strong>比弱引用更难被垃圾收集器回收，回收软引用没有确切的时间点，由JVM自己决定，一般只会在即将耗尽可用内存时，才会回收软引用，以作最后手段</strong>。这意味着，可能会有更频繁的 fullGC，暂停时间也比预期更长，因为老年代中的存活对象会很多。最后，<strong>使用虚引用（phantom reference）时，必须手动进行内存管理，以标识这些对象是否可以安全地回收</strong>，表面上看起来很正常，但实际上并不是。javadoc 中写到：</p><blockquote><p>In order to ensure that a reclaimable object remains so, the referent of a phantom reference may not be </p><p>retrieved: The get method of a phantom reference always returns null. (为了防止可回收对象的残留，虚引用对象不应该被获取<code>phantom reference</code> 的 <code>get</code> 方法返回值永远是<code>null</code>)。</p></blockquote><p>令人惊讶的是，很多开发这更容易忽略下面一段内容（这才是重点）：</p><blockquote><p>Unlike soft and weak references, phantom references are not automatically cleared by the garbage collector as they are enqueued. An object that is reachable via phantom references will remain so until all such references are cleared or themselves become unreachable.(与软引用和弱引用不同，虚引用不会被被GC自动清除，因为他们被存放在队列中，通过虚引用可达对象会继续存在内从中，直到调此引用的 clear 方法，或者引用自身变为不可达)。</p></blockquote><p>也就是说，<strong>我们必须手动调用 clear() 来清除虚引用，否则可能造成OutOfMemeoryError 而导致JVM挂掉</strong>，使用虚引用的理由是，对于用编程手段来跟踪某个对象何时变为不可达对象，这是唯一的常规手段。<strong>和软引用/弱引用不同的是，我们不能复活虚可达（phantom-reachable）对象</strong>。</p><h5 id="使用非强引用的影响"><a href="#使用非强引用的影响" class="headerlink" title="使用非强引用的影响"></a>使用非强引用的影响</h5><p>建议使用JVM参数 <code>-XX:+PrintReferenceGC</code> 来看看各种引用对GC的影响，如果将此参数用于启动，将会看到：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2.173</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <br>        <span class="hljs-number">2.234</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">SoftReference</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000151</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.234</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">WeakReference</span><span class="hljs-operator">,</span> <span class="hljs-number">2648</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0001714</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.234</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">FinalReference</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000037</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.234</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PhantomReference</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000039</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.234</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">JNI</span> <span class="hljs-variable">Weak</span> <span class="hljs-variable">Reference</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000027</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>   <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9216</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">8676</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10752</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <br>   <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">12115</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">12115</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">12288</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">21331</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">20792</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">23040</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <br>   <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">3725</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">3725</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0766685</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>   <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.49</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.08</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>   <br><span class="hljs-number">2.250</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <br>        <span class="hljs-number">2.307</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">SoftReference</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000173</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.307</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">WeakReference</span><span class="hljs-operator">,</span> <span class="hljs-number">2298</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0001535</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.307</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">FinalReference</span><span class="hljs-operator">,</span> <span class="hljs-number">3</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000043</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.307</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PhantomReference</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000042</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.307</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">JNI</span> <span class="hljs-variable">Weak</span> <span class="hljs-variable">Reference</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000029</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>   <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9215</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">8747</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10752</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br>   <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">12115</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">12115</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">12288</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">21331</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">20863</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">23040</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <br>   <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">3725</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">3725</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0734832</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>   <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.52</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.07</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>   <br><span class="hljs-number">2.323</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span> <br>        <span class="hljs-number">2.383</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">SoftReference</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000161</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.383</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">WeakReference</span><span class="hljs-operator">,</span> <span class="hljs-number">1981</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0001292</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.383</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">FinalReference</span><span class="hljs-operator">,</span> <span class="hljs-number">16</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000049</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.383</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">PhantomReference</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span> <span class="hljs-variable">refs</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000040</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>    <span class="hljs-number">2.383</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">JNI</span> <span class="hljs-variable">Weak</span> <span class="hljs-variable">Reference</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0000027</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>   <span class="hljs-punctuation">[</span><span class="hljs-variable">PSYoungGen</span><span class="hljs-operator">:</span> <span class="hljs-number">9216</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">8809</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10752</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <br>   <span class="hljs-punctuation">[</span><span class="hljs-variable">ParOldGen</span><span class="hljs-operator">:</span> <span class="hljs-number">12115</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">12115</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">12288</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-number">21331</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">20925</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">23040</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <br>   <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">3725</span><span class="hljs-built_in">K</span>‐<span class="hljs-operator">&gt;</span><span class="hljs-number">3725</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0738414</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br>   <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.52</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.01</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.08</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>只有确认了GC对应的吞吐量和延迟造成影响之后，才应该花心思来分析这些信息，审查这部分日志，通常情况下，每次GC清理的引用数据都是很少的，发部分情况下为<code>0</code>，如果GC花了较多的时间来清理这类引用，或者清理了很多的此类引用，就需要进一步观察分析了。</p><h5 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h5><p>如果程序确实碰到了<code>mis-</code>, <code>ab-</code> 问题或者滥用 week，soft，phantom引用，一般都要修改程序的实现逻辑。每个系统不一样，因此很难提供通用的知道建议，但是有一些通用的办法：</p><ul><li><code>弱引用(week reference)</code> 如果某个内存池的使用量增大，造成了性能问题，那么增加内存池的大小（可能也要增加堆内存的最大容量）。如示例中可以看到，增加堆内存大小，以及年轻代的大小，可以减轻症状。</li><li><code>软引用(soft reference)</code> 如果确定问题的根源是软引用，唯一的解决办法是修改程序源码，改变内部实现逻辑。</li><li><code>虚引用(Phantom reference)</code> 请确保在程序中调用了虚引用的<code>clear</code>方法。编程中很容易忽略某些虚引用，或者清理的速度跟不上生产的速度，又或者清楚引用队列的线程挂了，就会对GC造成很大压力，最终引起<code>OutOfMemeoryError</code>。</li></ul><h4 id="巨无霸对象的分配-Humongous-Allocation"><a href="#巨无霸对象的分配-Humongous-Allocation" class="headerlink" title="巨无霸对象的分配(Humongous Allocation)"></a>巨无霸对象的分配(Humongous Allocation)</h4><p>如果使用G1垃圾收集算法；会产生一种巨无霸对象引起的GC性能问题。</p><blockquote><p>说明 在G1中，巨无霸对象是指所占空间超过一个小堆区(region) <code>50%</code> 的对象。</p></blockquote><p>频繁创建巨无霸对象，无疑会造成GC的性能问题，我们先看看G1的处理方式：</p><ul><li>如果 region 中含有巨无霸对象，则巨无霸对象后面的空间将不会进行分配。如果所有巨无霸对象都超过某个比例，则未使用空间就会引发内存碎片问题。</li><li>G1 没有对巨无霸对象进行优化。这在JDK8以前是一个特别棘手的问题——在Java1.8u4.0之前的版本中，巨无霸对象所在region的回收只能在fullGC中进行。最新版本的Hotspot JVM，在marking 阶段之后的 cleanup 阶段中释放巨无霸区间，所以这个问题在新版本JVM中的影响已大大降低。</li></ul><p>如果存在巨无霸对象分配问题会输出如下日志：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">0.106:</span> [<span class="hljs-string">G1Ergonomics</span> <span class="hljs-string">(Concurrent</span> <span class="hljs-string">Cycles)</span> <br>                <span class="hljs-string">request</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">cycle</span> <span class="hljs-string">initiation</span>, <br>        <span class="hljs-attr">reason:</span> <span class="hljs-string">occupancy</span> <span class="hljs-string">higher</span> <span class="hljs-string">than</span> <span class="hljs-string">threshold</span>, <br>        <span class="hljs-attr">occupancy:</span> <span class="hljs-number">60817408</span> <span class="hljs-string">bytes</span>, <span class="hljs-attr">allocation request:</span> <span class="hljs-number">1048592</span> <span class="hljs-string">bytes</span>, <br>        <span class="hljs-attr">threshold:</span> <span class="hljs-number">60397965</span> <span class="hljs-string">bytes</span> <span class="hljs-string">(45.00</span> <span class="hljs-string">%)</span>, <span class="hljs-attr">source:</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">humongous</span> <span class="hljs-string">allocation</span>] <br><span class="hljs-attr">0.106:</span> [<span class="hljs-string">G1Ergonomics</span> <span class="hljs-string">(Concurrent</span> <span class="hljs-string">Cycles)</span> <span class="hljs-string">request</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">cycle</span> <span class="hljs-string">initiation</span>, <br>                <span class="hljs-attr">reason:</span> <span class="hljs-string">requested</span> <span class="hljs-string">by</span> <span class="hljs-string">GC</span> <span class="hljs-string">cause</span>, <span class="hljs-attr">GC cause:</span> <span class="hljs-string">G1</span> <span class="hljs-string">Humongous</span> <span class="hljs-string">Allocation</span>] <br><span class="hljs-attr">0.106:</span> [<span class="hljs-string">G1Ergonomics</span> <span class="hljs-string">(Concurrent</span> <span class="hljs-string">Cycles)</span> <span class="hljs-string">initiate</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">cycle</span>, <br>                <span class="hljs-attr">reason:</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">cycle</span> <span class="hljs-string">initiation</span> <span class="hljs-string">requested</span>] <br><span class="hljs-attr">0.106:</span> [<span class="hljs-string">GC</span> <span class="hljs-string">pause</span> <span class="hljs-string">(G1</span> <span class="hljs-string">Humongous</span> <span class="hljs-string">Allocation)</span> <span class="hljs-string">(young)</span> <span class="hljs-string">(initial‐mark)</span> <br><span class="hljs-attr">0.106:</span> [<span class="hljs-string">G1Ergonomics</span> <span class="hljs-string">(CSet</span> <span class="hljs-string">Construction)</span> <span class="hljs-string">start</span> <span class="hljs-string">choosing</span> <span class="hljs-string">CSet</span>, <br>                <span class="hljs-attr">_pending_cards:</span> <span class="hljs-number">0</span>, <span class="hljs-attr">predicted base time:</span> <span class="hljs-number">10.00</span> <span class="hljs-string">ms</span>, <br>        <span class="hljs-attr">remaining time:</span> <span class="hljs-number">190.00</span> <span class="hljs-string">ms</span>, <span class="hljs-attr">target pause time:</span> <span class="hljs-number">200.00</span> <span class="hljs-string">ms</span>]<br></code></pre></td></tr></table></figure><p>这样的日志表明程序中确实创建了巨无霸对象，可以看到<code>G1 Humongous Allocation</code> 是GC暂停的原因。再看前面一点的<code>allocation request: 1048592 bytes</code>，可以发现程序试图分配一个<code>1048592</code> 字节的对象，这要比巨无霸区域(<code>2MB</code>)的50%多出16字节。第一中解决方式是修改 region size，以使得大多数的对象大小不超过<code>50%</code>，也就不进行巨无霸对象区域的分配。 region 的默认大小在启动时根据堆内存的大小算出。但也可以指定参数来覆盖默认设置，<code>-XX:G1HeapRegionSize=XX</code>。指定region size必须在<code>1～32MB</code>之间，还必须是2的幂大小，所以region size 只能是：<code>1m</code>，<code>2m</code>，<code>4m</code>，<code>8m</code>，<code>16m</code>，<code>32m</code>。 这种方式也有副作用，<strong>增加region 的大小也就变相减少了region 的数量，所以需要谨慎使用</strong>。更好的方式是，<strong>如果可以的话在程序中限制对象大小</strong>。避免大对象问题的出现。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一小节我们总结梳理了JVM目前主要使用中的GC的日志分析解读和GC调优，其中我们分析了SerialGC、ParallelGC、CMS 和 G1的日志，通过这段日志信息的解读为后面的GC调优打下基础。第二个部分我们介绍了GC调优。GC调优分为以下几步：<code>列出性能调优指标</code>、<code>执行测试</code>、<code>检查结果</code>、<code>与目标进行对比</code>、<code>如果达不到指标，修改指标，调整参数继续测试</code>。接下来我们介绍了几个核心参数概念：<code>Latency</code>、<code>Throughput</code>、<code>Capacity</code>。</p><p>我们可以针对这几个参数进行调优。当然手动人工的去分析一行行GC日志，效率必然很低也很容易漏掉一些参数，我们介绍了可视化GC工具——GCViewer 和 GCEasy。最后我们分析了线上的几种常见的GC问题的日志分析和解决方案。</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>Java 垃圾收集必备手册 （github项目地址：<a href="https://github.com/cncounter/gc-handbook%EF%BC%89">https://github.com/cncounter/gc-handbook）</a></li><li>GC 日志的解读与分析（上、中、下）</li><li><a href="https://cloud.tencent.com/developer/article/1491229">如何选择合适的 GC 时间 —— USER, SYS, REAL？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM GC篇 — 垃圾收集器（下）</title>
    <link href="/2021/06/27/garbage-collector-2/"/>
    <url>/2021/06/27/garbage-collector-2/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面一小节中，我们梳理了经典的垃圾收集器。从单线程的Serial串行垃圾收集器开始，聊到了CMS最后到G1，并着重的分析了CMS和G1并发垃圾收集流程和部分实现原理。这些垃圾收集器经过数千台服务器的验证淬炼，已经变得相当的成熟可靠，但是真的就是完美的垃圾收集器吗？答案是否定的。今天我们一起来看看相较于“经典”垃圾收集器的全新一代垃圾收集器 Shenandoah 和 ZGC。这种垃圾收集器能够实现超大堆的容量下，轻松实现垃圾收集停顿不超过10ms的目标，但是目前还处于实验状态，官方命名为“低延迟垃圾收集器”（Low-Latency Garbage Collector 或者 Low-Pause-Time Garbage Collector）。</p><h2 id="不可能的三角"><a href="#不可能的三角" class="headerlink" title="不可能的三角"></a>不可能的三角</h2><p>我们一路走过来也看过很多的垃圾收集器，我们的垃圾收集器也在不断的进化，并发停顿时间稳定性各方面都变得越来越好，但是我们一直没有回答一个问题，什么的垃圾收集才是一个完美的垃圾收集器呢？其实衡量一个垃圾收集器我们一般有三个重要的指标：<code>内存占用（footprint）</code>、<code>吞吐量（Throughput）</code>和<code>延迟（Latency）</code>。这三者构成了一个<strong>“不可能三角”</strong>。这三个全部具备卓越表现的“完美”收集器是几乎不可能的，只要一款垃圾收集器能达到其中的两项，它就是一款优秀的垃圾收集器。</p><p>在内存占用、吞吐量和延迟这三项指标中，延迟的重要性日益凸显出来，其中GC发展过程中的后来者CMS和G1也是往这方向发展的产物。因为随着计算机硬件的发展、性能提升，我们越来越能容忍收集器多占用一些内存。硬件性能提升，对系统处理的能力也有直接的提升也就是吞吐量会提升。但是延迟不是这样的，随着内存的扩大，延迟的时间没有减少反而会带来负面的收益，由此不难看出延迟成为垃圾收集器的主要优化目标。</p><p>Serial 串行GC 和 Parallel 并行GC在进行垃圾回收的时候都必须全程需要STW，CMS和G1对于初始标记和最终标记阶段需要STW。G1虽然可以按照更小的粒度进行回收，从而抑制复制转移阶段的长时间停顿，但还是需要暂停。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210627220309.png"></p><h2 id="Shenandoah"><a href="#Shenandoah" class="headerlink" title="Shenandoah"></a>Shenandoah</h2><p><strong>Shenandoah 是一款超低延迟垃圾收集器（Ultra-Low-pause-TIme Garbage Collector），其设计目标是管理大型的多核服务器上超大型堆内存，GC线程与应用线程并发执行使得暂停时间非常短暂。</strong>Shenandoah 是由RedHat公司独立发展的新型垃圾收集器，在2014年 RedHat 把Shenandoah贡献给了OpenJDK，并且推动它成为 OpenJDK 12的重要特性。但是这款垃圾收集器，也是<strong>最孤独的一款垃圾收集器</strong>。由于Shenandoah 不是由Oracle公司领导开发的HotSpot垃圾收集器，<strong>不可避免的受到一些来自官方的排挤</strong>。Oracle 明确拒绝在OracleJDK 12中支持Shenandoah收集器，因此Shenandoah是一款只有在 OpenJDK中才包含而OracleJDK中反而不存在的垃圾收集器。</p><h3 id="对G1的致敬"><a href="#对G1的致敬" class="headerlink" title="对G1的致敬"></a>对G1的致敬</h3><p>相比于有“正宗血统”的ZGC而言，Shenandoah更像是G1的继承者，它们都有着相似的内存布局，在初始标记、并发标记的处理思路都是高度的相同一致，甚至还有一些共享代码。它继承了G1的优点，反过来也促进G1打磨改进和bug修复，我们都知道G1当垃圾收集速度小于分配速度并且剩余堆空间不足时。G1会像CMS一样，并发失败并进行串行的FullGC来释放空间。而Shenandoah则促成了 Parallel Full GC for G1。</p><blockquote><p>Shenandoah继承了G1独特的设计思路，在G1原来的道路上又进行了拓展创新，同时反过来又推动了G1的打磨和bug修复，在我看来Shenandoah 理应成为 G1 的继承人，但是因为“血统不纯”而遭到排挤，属实有些无奈。</p></blockquote><h3 id="Shenandoah-的创新"><a href="#Shenandoah-的创新" class="headerlink" title="Shenandoah 的创新"></a>Shenandoah 的创新</h3><p>Shenandoah 从 G1 上继承来很有优秀的特点，但是自身也有创新发展的点。主要集中但不仅限于下面三点<strong>：</strong></p><ul><li><strong>支持并发整理</strong>。前面我们梳理G1的垃圾收集流程，其中有初始标记（Init Mark）、最终标记（Final Mark）和最后的复制转移暂停（Evacuation Pause）阶段需要 STW，其他阶段都可以并发执行。Shenandoah 实现了并发的内存空间整理，具体细节我们在后面进行详细梳理。</li><li><strong>不使用分代收集</strong>。不会有专门的新生代的Region或老年代Region。在前面的小节中我们提到了<strong>每次垃圾收集会统计每个Region的回收成本</strong>，计算出平均值，标准差等，并通过最新的数据尽大地影响Region的回收收益。让统计出来的结果更加反应当前的Region的回收收益。整个堆内存有一个完善的回收评估，因此GC可以在不依赖分代理论的前提下，实现垃圾回收收益的最大化。</li><li><strong>使用“连接矩阵”代替跨Region引用记忆集</strong>。为了维护各个跨Region之间的引用关系，G1耗费了大量的内存和计算资源去维护记忆集，而在Shenandoah中，使用名为<strong>“链接矩阵”</strong>的数据结构来记录跨Region间的引用关系。降低了跨Region间引用记录消耗。“链接矩阵”可以理解为一张二维表格。如果Region N 有对象指向 Region M，就在表格的N行M列打上一个标记。例如下面的例子：<strong>Region9指向Region6，Region7指向Region4，Region5指向Region3，Region3又指向Region1。</strong>通过一个链接矩阵来代替各个Region自带的RSet来维护Region间的引用关系，极大的减少了内存消耗。</li></ul><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210617233319.png"></p><p>得益于这些创新的设计，Shenandoah 相较于G1对系统的资源占用更小。因此在系统负载发生变化时，Shenandoah 的延迟相较于其他垃圾收集器也能保持在极度稳定的水平。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210627013808.png"></p><h3 id="垃圾收集工作周期"><a href="#垃圾收集工作周期" class="headerlink" title="垃圾收集工作周期"></a>垃圾收集工作周期</h3><p>Shenandoah 是并发的垃圾收集器，它的垃圾收集周期与CMS、G1类似，但是 Shenandoah 创新的支持并发整理，进一步提高了垃圾收集的并发度。以下是Shenandoah的一个工作周期的9个步骤：</p><ul><li><strong>初始标记阶段（Init Mark）</strong>：与G1一样，为堆和应用程序准备并发标记，然后扫描根对象集。这是GC周期的第一次暂停，持续时间取决与根对象集的大小。因为根对象集很小，所以速度很快，暂停时间非常短。</li><li><strong>并发标记阶段（Concurrent Mark）</strong>：与G1一样，并发标记遍历堆，并跟踪可达的对象，该阶段与应用程序并发执行，持续时间取决于存活对象数据以及堆中对象图的结构。由于这个阶段并没有垃圾收集，且应用程序可以在此阶段自由分配新数据，因此并发标记阶段堆占用率会上升。</li><li><strong>最终标记阶段（Final Mark）</strong>：与G1一样，处理剩余的 SATB 扫描，并在这个阶段统计出回收价值高的Region，将这些Region构成一组回收集（Collection Set）。这个阶段也会有小阶段的暂停。</li><li><strong>并发清理阶段（Concurrent Cleanup）</strong>：这个阶段用于清理那些整个区域连一个存活对象都没找到的区域。</li><li><strong>并发转移阶段（Concurrent Evacuation）</strong>：这个阶段是 Shenandoah 与之前 HotSpot 中其他收集器的核心差异。在这个阶段Shenandoah要把回收集中的存活对象先复制到一份其他未被使用的Region之中。<strong>这个过程在G1 中是会进行暂停执行的，但是在Shenandoah中这个过程是并发进行的。</strong>在移动对象的过程中引用地址会发生变化，此时又不能影响对象的正常访问，这就是一个很复杂的问题了。这里是通过<strong>读屏障和“Brooks Pointers”的转发指针</strong>来解决的，后面我们会详细介绍。这个阶段的持续时间取决于要复制的集合大小。</li><li><strong>初始引用更新阶段（Init Update Reference）</strong>：并发回收阶段复制对象结束后，还<strong>需要把堆中所有指向旧对象的引用修正到复制后的新地址，这个操作称为引用更新</strong>。引用更新的初始化阶段实际上并未做什么具体的处理，设立这个阶段只是为了建立一个线程集合点，确保所有并发回收阶段中进行的收集器线程都已完成分配给他们的对象移动任务而已。初始引用更新时间很短，会产生一个非常短暂的停顿。</li><li><strong>并发引用更新（Concurrent Update References）</strong>： 真正开始进行引用更新操作，还要修正存在GC Roots中的引用。这个阶段是与应用线程一起并发执行的，时间的长短取决于内存中涉及的引用数量的多少。并发引用更新与并发标记不同，它不再需要沿着对象图来搜索，只需要按照内存物理地址的顺序，线性地搜索出引用类型，把旧值改成新值而已。</li><li><strong>最终引用更新（Final Update Reference）</strong>：解决了堆中的引用更新之后，还要修正存在与GC Roots中的引用。这个阶段是 Shenandoah 的最后一次停顿，停顿时间只与 GC Roots 的数量相关。</li><li><strong>并发清理（Concurrent Cleanup）</strong>：经过并发回收和引用更新之后，整个回收周集中所有的Region已无存活对象，这些 Region 都变成了 Immediate Garbage Regions了，最后在调用一次并发清理过程，供后面分配新的对象使用。</li></ul><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210620002550.png"></p><p>以上是Shenandoah垃圾收集的详细的9个步骤，同样也可以简化为4个步骤：<strong>初始标记，并发标记、最终标记、并发整理</strong>。而在并发整理中，并发引用更新又可以分为4个步骤，<strong>并发转移、初始引用更新、并发引用更新、最终引用更新</strong>。Shenandoah 一个垃圾回收周期中会有4次STW，虽然在STW次数上比G1还要多，但是<strong>整体暂停时间也比G1短。</strong></p><blockquote><p>G1一次垃圾回收周期，平均算下来会有2次半STW。其中初始标记和最终标记阶段都会各有一次STW，其中在最后垃圾回收阶段，如果发生转移暂停（Evacuation pause）将会产生一次STW，因此我认为G1的再一次垃圾回收的暂停时间为2次半。</p></blockquote><p>下面的表格是 RedHat 官方在2016年所发表在 Shenandoah 实现论文中给出的实测数据，测试内容是ElasticSearch 对 200G 的维基百科数据进行索引。这个时候的Shenandoah，还没有发展到完全体，但是从数据来看，暂停时间已经有了质的飞跃。</p><table><thead><tr><th>收集器</th><th>运行时间</th><th>总停顿</th><th>最大停顿</th><th>平均停顿</th></tr></thead><tbody><tr><td>Shenandoah</td><td>387.602s</td><td>320ms</td><td>89.79ms</td><td>53.01ms</td></tr><tr><td>G1</td><td>312.052s</td><td>11.7s</td><td>1.24s</td><td>450.12ms</td></tr><tr><td>CMS</td><td>285.264s</td><td>12.78s</td><td>4.39s</td><td>852.26ms</td></tr><tr><td>Parallel Scavenge</td><td>260.092s</td><td>6.59s</td><td>3.04s</td><td>823.75ms</td></tr></tbody></table><h3 id="Shenandoah并发整理实现—转发指针（Brooks-Pointer）"><a href="#Shenandoah并发整理实现—转发指针（Brooks-Pointer）" class="headerlink" title="Shenandoah并发整理实现—转发指针（Brooks Pointer）"></a>Shenandoah并发整理实现—转发指针（Brooks Pointer）</h3><p>前面我们提到 Shenandoah 相较于 G1 最大的变化之一就是支持并发整理，在G1中是通过复制算法转移暂停（Evacuation pause），这个复制过程需STW，并且这是G1垃圾回收中最长的一次暂停。而 shenandoah 通过两次短暂的暂停替代一次长时间暂停，来实现复制转移的并发执行。其中<strong>最核心的概念——Brooks Pointer</strong>。“Brooks”是一个人的名字。1984年，Rodney A. Brooks 在论文《Trading Data Space for Reduced Time and Code Space in Real-Time Garbage</p><p> Collection on Stock Hardware》中提出使用转发指针（Forwarding Pointer，也常被称为 Indirection Pointer）来实现对象移动与用户线程并发的一种解决方案。</p><p>Brooks提出的转发指针其实很简单，就是在<strong>原有对象布局前面统一增加一个新的引用字段，在正常不处于并发移动的情况下，该指针指向自己，在并发移动后指针指向移动后的对象。</strong></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210620151116.png"></p><p>从结构上来看， Brooks 提出的转发之前与某些早期 Java 虚拟机使用过的句柄定位有一些相似之处，两者都是一种间接性的对象访问方式，差别是句柄通常是统一存储在专门的句柄池中，而转发指针是分散在每个对象头前面。再使用了转发指针之后，能实现并发的进行对象复制转移，但是带来的问题也是很明显的，在每次访问对象时，都会带来一次额外的转发开销，虽然这个开销已经被优化到一条汇编命令的程度，但是<strong>对象定位命令被频繁使用到，这仍然是一笔不能忽视的性能开销。</strong></p><blockquote><p>计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。</p></blockquote><p>这样的设计虽然好，但是会带来一个比较棘手的问题即<strong>多用户线程并发操作和GC线程之间的并发竞争问题。</strong>如果是应用线程并发读操作的场景，问题都不是很大，因为Brooks Poniter，都可以指向新的对象，但是如果是写入线程操作和GC线程并发的场景下，会发生什么呢？不妨想象一下这三个事件同时发生：</p><ol><li>GC线程复制了新的对象副本。</li><li>应用线程更新对象某个字段。</li><li>GC线程更新转发指针的引用值为新对象副本。</li></ol><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210620152740.png"></p><p>如果不做任何保护措施，按照事件1，事件2，事件3顺序发生，那么就会出现应用线程将更新写入到复制前的旧对象中，且新对象中还不含应用线程的更新，这显然是不正确的。这个问题我们只要保证GC线程在执行过程中，不被应用线程穿插执行就可以解决，即事件按照1、3、2或者 2、1、3的顺序执行。 了解过并发编程的同学肯定能很自然的想到解决办法：GC线程和应用线程加锁访问。实际上 <strong>Shenandoah 也是通过CAS的方式来实现这里的并发控制。</strong></p><p>Shenandoah 还有要解决的问题——<code>读屏障</code>的性能问题，前面的我们提到写屏障，其他垃圾收集器用写屏障来维护卡表，亦或者用来实现并发标记，写屏障已经积累了一部分的处理任务了。一部分读屏障在Shenandoah中会被继续使用，同时 Shenandoah 还需要往读写屏障中加入额外的转发处理，尤其是使用读屏障的代价会比写屏障大得多，因为读屏障会被更加频繁的使用，因此读屏障的使用也需要更加的小心，不允许任何的重量级操作。<strong>Shenandoah 是目前第一个使用到读屏障的收集器。</strong>它的开发者也意识到了数量庞大的读屏障带来性能开销会是 Shenandoah 被诟病的关键点之一。所以计划在 JDK 13 中将Shenandoah的内存屏障模型改进为<strong>基于引用访问屏障（Load Reference Barrier）的实现</strong>，所谓“引用访问屏障”是值内存屏障指拦截对象类型为引用类型的读写操作，而不去处理原生数据类型和其他非引用字段的读写，这能省去大量的成本。</p><blockquote><p>可以把<code>读屏障</code>理解为一段代码，或者是一个指令, 后面挂着对应的处理函数。例如下面的代码中，两行load操作对应的代码都插入了读屏障，但ZGC在第一个读屏障触发之后，不但将a的值更新为最新的，通过 self healing 机制使得 obj.x 的指针也会被修正，第二个读屏障再触发时就直接进入FastPath，基本上没有什么性能损耗了； 而Shenandoah 则不会修正obj.x的值，所以第二个读屏障又要进行一次SlowPath。 </p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Object a = obj.x<span class="hljs-comment">;</span><br>Object b = obj.x<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="启发式参数"><a href="#启发式参数" class="headerlink" title="启发式参数"></a>启发式参数</h3><p>启发式参数告知 Shenandoah GC何时开始GC处理，以及确定要归集的堆块。可以使用<code>-XX:ShenandoahGCHeuristics=</code> 来选择不同的启发模式，有些启发模式可以配置一些参数，帮 助我们更好地使用GC。可用的启发模式如下: </p><ul><li>自适应模式（<strong>adaptive</strong>）此为默认参数，通过观察之前的一些GC周期，以便在堆耗尽之前尝试启动下一个GC周期。</li></ul><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby"><span class="hljs-symbol">XX:</span>ShenandoahInitFreeThreshold=<span class="hljs-comment"># :触发“学习”集合的初始阈值</span></span><br><span class="ruby">-<span class="hljs-symbol">XX:</span>ShenandoahMinFreeThreshold=<span class="hljs-comment"># :启发式无条件触发GC的可用空间阈值</span></span><br><span class="ruby">-<span class="hljs-symbol">XX:</span>ShenandoahAllocSpikeFactor=<span class="hljs-comment"># :要保留多少堆来应对内存分配峰值</span></span><br><span class="ruby">-<span class="hljs-symbol">XX:</span>ShenandoahGarbageThreshold=<span class="hljs-comment"># :设置在将区域标记为收集之前需要包含的垃圾百分比</span></span><br></code></pre></td></tr></table></figure><ul><li>静态模式（<strong>static</strong>） 根据堆使用率和内存分配压力决定是否启动GC周期。</li></ul><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby"><span class="hljs-symbol">XX:</span>ShenandoahFreeThreshold=<span class="hljs-comment"># : 设置空闲堆百分比阈值；</span></span><br><span class="ruby">-<span class="hljs-symbol">XX:</span>ShenandoahAllocationThreshold=<span class="hljs-comment"># : 设置内存分配量百分比阈值；</span></span><br><span class="ruby">-<span class="hljs-symbol">XX:</span>ShenandoahGarbageThreshold=<span class="hljs-comment"># : 设置小堆块标记为可回收的百分比阈值</span></span><br><span class="ruby">-<span class="hljs-symbol">XX:</span>ShenandoahFreeThreshold=<span class="hljs-comment"># :设置启动GC周期时的可用堆百分比阈值；</span></span><br><span class="ruby">-<span class="hljs-symbol">XX:</span>ShenandoahAllocationThreshold=<span class="hljs-comment"># :设置从上一个GC周期到新的GC周期开始之前的内存分配百分比阈值；</span></span><br><span class="ruby">-<span class="hljs-symbol">XX:</span>ShenandoahGarbageThreshold=<span class="hljs-comment"># :设置在将区域标记为收集之前需要包含的垃圾百分比阈值；</span></span><br></code></pre></td></tr></table></figure><ul><li>紧凑模式（<strong>compact</strong>） 只要有内存分配，就会连续运行GC回收，并在上一个周期结束后立即开始下一个周期。此模式通常会有吞 吐量开销，但能提供最迅速的内存空间回收。</li></ul><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby"><span class="hljs-symbol">XX:</span>ConcGCThreads=<span class="hljs-comment"># :设置并发GC线程数，可以减少并发GC线程的数量，以便为应用程序运行 留出更多空间</span></span><br><span class="ruby">-<span class="hljs-symbol">XX:</span>ShenandoahAllocationThreshold=<span class="hljs-comment"># :设置从上一个GC周期到新的GC周期开始之前的内 存分配百分比</span></span><br></code></pre></td></tr></table></figure><ul><li>被动模式（<strong>passive</strong>） 内存一旦用完，则发生STW，用于系统诊断和功能测试。 </li><li>积极模式（<strong>aggressive</strong>）它将尽快在上一个GC周期完成时启动新的GC周期（类似于“紧凑型”）， 并且将全部的存活对象归集到一 块，这会严重影响性能，但是可以被用来测试GC本身。有时候启发式模式会在判断后把更新引用阶段和并发标记阶段合并。可以通过<code>-XX:ShenandoahUpdateRefsEarly=[on|off]</code>强制启用和禁用这个特性。 同时针对于内存分配失败时的策略，可以通过调节 ShenandoahPacing 和 ShenandoahDegeneratedGC 参数，对线程进行一定的调节控制。如果还是没有足够的内存，最坏的情 况下可能会产生Full GC，以使得系统有足够的内存不至于发生OOM。 更多有关如何配置、调试 Shenandoah 的参数信息，请参阅Shenandoah官方wiki页面。 前面我们也提到 Shenandoah 是垃圾收集器中的”孤儿“，只有OpenJDK 中才包含它，下图是各版本JDK对Shenandoah的集成情况：</li></ul><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210620165241.png"></p><p>这张图展示了Shenandoah GC目前在各个JDK版本上的进展情况，可以看到OpenJDK12和13上都可以用。 在Red Hat Enterprise Linux、Fedora系统中则可以在JDK8和JDK11版本上使用（肯定的，这两个Linux发行 版都是Red Hat的，谁让这个GC也是Red Hat开发维护的呢）。 默认情况下，OpenJDK 12+发布版本通常包括Shenandoah； Fedora 24+中OpenJDK 8+发布版本包括Shenandoah； RHEL 7.4+中OpenJDK 8+发布版本中包括Shenandoah作为技术预览版； 基于RHEL/Fedora的发行版或其他使用它们包装的发行版也可能启用了Shenandoah（CentOS、 Oracle Linux、Amazon Linux中也带了Shenandoah）。</p><h2 id="ZGC"><a href="#ZGC" class="headerlink" title="ZGC"></a>ZGC</h2><p>我们前面梳理了 Shenandoah 有关知识点，Shenandoah 是一款在任何堆大小下都非常优秀的低延迟垃圾收集器。但是由于这款垃圾收集器不是由HotSpot主导设计的，Shenandoah 不免一直受到官方的排挤。直至目前为止，Shenandoah 是唯一一款仅存在 OpenJDK 的垃圾收集器。Shenandoah 已经如此的优秀了，那有着“正宗血统”的ZGC有什么秘密武器呢？ZGC（Z Garbage collector）是一款在2011年加入的具有实现性质的低延迟垃圾收集器，由Oracle公司主持研发。并且Oracle于2018年将ZGC提交给 OpenJDK，推动其进入OpenJDK 11的发布清单中。ZGC和Shenandoah的目标高度相似，<strong>都希望在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停顿时间限制在10ms以内的低延迟。</strong>但是他们的实现方式却有很大的差别。RedHat开发的Shenandoah像是G1的继承者的话，那Oracle开发的ZGC则更像是 Azul System开发的PGC（pauseless GC）和 C4（Concurrent Continuously Compacting Collector）的同胞兄弟。</p><h3 id="ZGC的内存布局"><a href="#ZGC的内存布局" class="headerlink" title="ZGC的内存布局"></a>ZGC的内存布局</h3><p>ZGC的内存分布和Shenandoah、G1的一致，都是采用基于 Region 的内存布局，ZGC与他们稍微有些不同的是在一些官方资料中，ZGC的Region被称为Page或ZPage。ZGC的Region有一个很不一样的特点，它具有动态性—动态的创建和销毁，以及以及动态的区域容量大小。在x86的平台架构下，<strong>ZGC的Region可以具有大、中、小三种类型容量</strong>：</p><ul><li>小型Region（Small Region）：容量固定为<code>2MB</code>，用于放置<strong>小于256KB</strong>的小对象。</li><li>中型Region（Medium Region）：容量固定为<code>32MB</code>，用于放置<strong>大于等于256KB但小于4MB</strong>的对象。</li><li>大型Region（Large Region）：容量<code>不固定</code>，可以动态变化，但必须为<strong>2MB的整数倍</strong>，用于放置 4MB 或以上的大对象，每个大型 Region 中只会存放一个大象，他的<strong>实际容量可能小于中型Region</strong>，最小容量可低至4MB。大型Region在ZGC的实现中是不会被重分配（重分配是ZGC的一个处理动作，用于收集器并发复制阶段，后面会介绍到），因为复制一个大对象的代价非常高昂。</li></ul><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210622000726.png"></p><h3 id="ZGC并发整理实现—染色指针（Colored-Pointer）"><a href="#ZGC并发整理实现—染色指针（Colored-Pointer）" class="headerlink" title="ZGC并发整理实现—染色指针（Colored Pointer）"></a>ZGC并发整理实现—染色指针（Colored Pointer）</h3><p>新一代低延迟垃圾收集器，相较于以G1为代表的后经典垃圾收集器的最大的不同就是实现了并发整理。前面我们介绍<strong>Shenandoah是通过转发指针（Brooks Pointer）和读屏障</strong>来实现。这个实现方案虽然能解决并发复制问题，但整体上还是会带来一些性能和内存上的小瑕疵，不是那么完美。不同于Shenandoah 的解决方案，ZGC选择了另外一条复杂精巧的解决方案—<strong>染色指针技术</strong>（Color Pointer，其他类似的技术中可能称它为Tag Pointer或Version Pointer）。</p><p> 前面提到，计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。shenandoah 是通过增加一个 Brooks Pointer作为中间层实现转发，而ZGC就是通过染色指针作为中间层。 那这个对象是否移动的信息，即又是哪个指针被染色了呢？在JVM中，我们通常在对象头上增加额外存储一些对象信息，其中对象的hashCode、分代年龄、锁记录等就是这样存储的。这种在能够访问到对象的场景下访问额外信息是很自然流畅的。但是在这个场景，它明显是不适用的。此时我们在访问对象的过程中，还未获取到对象又怎么能访问到对象头中的信息呢？这个信息<strong>ZGC放在了指向对象的引用指针上。</strong></p><blockquote><p>在64位系统中，理论上可以访问的内存高达16EB字节（2的64次幂），实际上基于需求、性能、成本的考虑实际上也用不了这么多，在AMD64架构中，只支持到了52位4PB的地址总线和48位（256TB）的虚拟地址空间，所以目前64位的硬件最大只能支持到256TB。此外操作系统一侧还会加上自己的约束，64位的Linux则分别支持47位（128TB）的虚拟内存地址和46位（64TB）物理内存地址。而windows只支持44位（16TB）物理内存地址。</p></blockquote><p>尽管Linux下64位指针的高18位不能用来寻址，但是剩余的46位指针所能支持的64TB的内存在今天仍然能充分满足大型服务器的需要，因此，ZGC的染色指针盯上这46位寻址地址，截取最高的4位来存储4个标识信息。通过这4个标记，判断对象当前状态，进而进行下一步寻址。但<strong>这4位的占用也进一步压缩了地址空间，让原本的46位空间变成了44位，即ZGC最大可管理的内存空间减少到4TB。</strong></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210625010703.png"></p><p>虽然染色指针有4TB的内存限制，不能支持32位平台，不能支持压缩指针等约束，但它带来的收益却是非常可观的。其中染色包括下面的三大主要优势：</p><ul><li><strong>染色指针可以使得一旦某个Region的存活对象被移走之后，这个Region立即就能被释放重用，而不用等待整个堆中的所有指向该Region的引用都被修正之后才能被清理。</strong>这一点相比起Shenandoah是一个颇大的优势。使得只要理论上还有一个空闲的Region，ZGC就能完成收集，而Shenandoah需要等待所有的引用更新完成才能释放回收集中的Region，这意味着如果堆中几乎所有的对象都存活，那么需要1:1的空闲Region完成对象的复制。相较于这一点ZGC有绝对的优势，为什么会有这样的效果，这全部归功于ZGC“自愈”的特性。</li><li><strong>染色指针可以大幅度减少在垃圾收集过程中内存屏障的使用数量</strong>，设置内存屏障，尤其是写屏障的目的是为了记录对象引用的变动情况，如果将这些信息直接维护在指针中，则可以省下一些专门的记录操作，ZGC没有使用任何的读屏障，只使用了部分的写屏障。没有了读屏障，ZGC的吞吐量自然也更高一些。</li><li><strong>染色指针可以作为一种扩展数据结构用来记录更多的信息，以便日后提高性能</strong>。但是同时我们也需要占用更多寻址位置。Linux下寻址的指针的前18位是没有使用的，这个时候如果扩展利用，不仅可以扩展ZGC可管理的最大堆4TB上限，还可以扩展更多的功能提高垃圾回收效率。</li></ul><h3 id="垃圾收集工作周期-1"><a href="#垃圾收集工作周期-1" class="headerlink" title="垃圾收集工作周期"></a>垃圾收集工作周期</h3><p>上面我们简单介绍了ZGC 的内存布局和染色指针技术，接下来我们一起来看看ZGC的垃圾回收工作周期。ZGC的工作周期大致可以分为4个大阶段，并且这个4个阶段全部都是可以并发执行的，仅是两个阶段中间会存在短暂的停顿小阶段。以下ZGC的回收阶段：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210626231527.png"></p><ul><li><strong>并发标记（Concurrent Mark）</strong>：与G1、Shenandoah 一样，并发标记是遍历对象图做可达性分析的阶段，前后也要经过类似于G1、shenandoah 的初始标记、最终标记的短暂停顿，而且这些停顿阶段所做的事情在目标上也是相类似的。不同的是，ZGC的标记是在指针上而不是在对象上进行，标记阶段会更新染色指针中的<code>Marked0</code>、<code>Marked1</code>。</li><li><strong>并发预备重分配（Concurrent Prepare for Relocate）</strong>：这个阶段需要根据特定的查询条件统计得出本次收集过程要清理哪些 Region，将这些 Region 组成重分配集（Relocation Set）。重分配集与G1收集器的回收集（Collection Set）还是有区别的，ZGC 划分Region的目的并不是像G1那样做收益优先的增量回收。相反ZGC每次回收都会扫描所有的Region，用更大范围的扫描成本换取G1中记忆集的维护成本。ZGC的重分配集只是决定了里面的存活对象会被重新复制到其他的Region中，里面的 Region 会被释放，而并不能说回收行为就只是针对这个集合中的Region进行的。因为标记的过程是针对全堆的。</li><li><strong>并发重分配（Concurrent Relocate）</strong>：重分配是ZGC执行过程中的核心阶段，这个过程要把重分配集中的存活对象复制到新的Region上，并重分配集中的某个Region维护一张转发表（Forward Table），记录从旧对象到新对象的转向关系。得益于染色指针的支持，<strong>ZGC收集器能仅从引用上就明确得知一个对象是否处于重分配集合中，如果用户线程此时并发访问位于重分配集中的对象，这次访问将会被遇到的内存屏障截获，然后立即根据Region上的转发记录将访问转发到新复制的对象上，并且同时修正更新该引用的值使其直接指向新对象。</strong>ZGC将这种行为称为指针的“<code>自愈</code>”（Self-Healing）能力。</li></ul><blockquote><p>这种自愈能力相较于Shenandoah的Brooks Pointer，只有第一次会和Brooks需要进行一次转发，而后续的访问都是直接访问。</p></blockquote><ul><li><strong>并发重映射（Concurrent Remap）</strong>：重映射所做的就是修正堆中执行重分配集中旧对象的所有引用，这一点从目标角度看是与Shenandoah 并发引用更新阶段一样的，但是ZGC的并发重映射并不是一个“迫切”要去完成的任务。因为ZGC的引用是可以“自愈”的，最多只是多使用一次转发操作。<strong>重映射的主要目的是为了不变慢，当然还有清理转发表这样的附带的收益</strong>。因此<strong>并发重映射放在了下一次垃圾收集工作周期中的并发标记阶段处理</strong>。这样就减少了一次遍历对象图的开销。</li></ul><p>得益于这些优秀的设计，ZGC的性能相较于上一代Parallel 、G1也是异常的出众，表现用“<strong>令人震惊，革命性的ZGC</strong>”来描述毫不为过。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210626231827.png"></p><h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><p>我们可以使用<code>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC</code> 参数可以用来启用，ZGC一些常用参数如下：</p><ul><li><code>-XX:ZCollectionInterval</code> :固定时间间隔进行gc，默认值为0。</li><li><code>-XX:ZAllocationSpikeTolerance</code> :内存分配速率预估的一个修正因子，默认值为2，一般不需要更改。</li><li><code>-XX:ZProactive</code> :是否启用主动回收策略，默认值为true，建议开启。</li><li><code>-XX:ZUncommit</code> :将不再使用的内存还给OS，JDK13以后可以使用； JVM会让内存不会降到 Xms 以下，所以如果Xmx和Xms配置一样这个参数就会失效。</li><li><code>-XX:+UseLargePages -XX:ZPath</code> :使用大内存页。 Large Pages在Linux称为Huge Pages，配置 zgc使用Huge Pages可以获得更好的性能（吞吐量、延迟、启动时间）。 配置Huge Pages时，一般配合ZPath使用。配置方法可以见:<a href="https://wiki.openjdk.java.net/display/zgc/Main">https://wiki.openjdk.java.net/display/zgc/Main</a></li><li><code>-XX:UseNUMA</code> :启用NUMA支持【挂载很多CPU，每个CPU指定一部分内存条的系统】。 ZGC默认开启NUMA支持，意味着在分配堆内存时，会尽量使用NUMA-local的内存。开启和关闭可以使用 <code>-XX:+UseNUMA</code> 或者 <code>-XX:-UseNUMA</code> 。 </li><li><code>-XX:ZFragmentationLimit</code>:根据当前region已大于ZFragmentationLimit，超过则回收，默认为25。</li><li><code>-XX:ZStatisticsInterval</code> :设置打印ZStat统计数据(cpu、内存等log)的间隔。 </li></ul><p>此外还有前面提过的并发线程数参数 <code>-XX:ConcGCThreads=n</code> ，这个参数对于并发执行的GC 策略都很重要，需要根据CPU核心数考虑，配置太多导致线程切换消耗太大，配置太少导致回收垃圾速度跟不上系统使用的速度。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一节我们梳理了全新一代“低延迟垃圾回收器”垃圾处理器，即Shenandoah和ZGC，Shenandoah由RedHat主持开发，立项时间早于ZGC。整体设计上和G1类似，在G1的基础上创新的抛弃了分代整理，使用“链接矩阵”代替RSet并支持并整理，极大的缩短了shenandoah 的STW时间。Shenandoah的垃圾回收流程整体上和G1类似，在最后的整理阶段G1通过STW对象复制转移来进行堆空间整理，而Shenandoah 这是通过这个过程拆分成复制、并发引用更新，最终引用更新和清理这几个阶段，实现大部分情况下并发执行。只有在复制、最终引用更新时候需要进行短暂的STW。计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。同样，Shenandoah通过增加一个Brooks Pointer和读屏障来解决并发整理过程中的对象定位问题。正因为并发整理的引入，Shenadoah 的暂停时间相较于传统的垃圾收集器有了质的飞跃。</p><p>Shenandoah 由于不是Oracle官方开发的垃圾收集器，难免受到一些来自官方的排挤。“根正苗红”的ZGC也有非常亮眼的表现，从技术角度来看ZGC采用了一条完全不同的路线，ZGC使用染色指针来巧妙的实现这个中间层。ZGC通过在引用上做文章，它占用引用地址的4个高位来记录是否被标记，是否重映射等信息。但是这样的占用同时也给ZGC带来了诸如最大管理4TB，不能开启压缩指针等限制。最终实验数据证明这些“代价”换来的提升是完全值得的。ZGC的垃圾回收工作周期和G1、shenandoah是相似的，不同的点也是在最后并发整理上，得益于染色指针的优秀设计，ZGC能在并发整理重映射的过程中可以更快的释放Region，提高空间利用率，并且指针还具有自愈功能，这相较于Shenandoah每次访问次次转发又有了极大的性能提升。而延迟上ZGC也是把传统垃圾收集器秒的一塌糊涂。</p><p>这一路过来我们看了这么多垃圾收集器，我相信你也建立以对垃圾收集器全面的认知体系。每个垃圾收集器都很优秀，如果把Java比作一个女王，那么垃圾收集器就是她的权利的皇冠，而ZGC则是皇冠上最亮眼的那一颗宝石。我们垃圾收集器的梳理就暂时告一段落了，通过这两小节两万字的总结我很庆幸，我能如此细致全面的认识Java垃圾收集器。继续前进，加油！</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>深入理解Java虚拟机（第三版）</li><li>ZGC 和 Shenandoah 介绍</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM GC篇 — 垃圾收集器（上）</title>
    <link href="/2021/06/11/garbage-collector-1/"/>
    <url>/2021/06/11/garbage-collector-1/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面一小节我们介绍了介绍了GC的一般性原理和垃圾回收算法，通过对前面知识的学习，我们基本掌握了垃圾收集的一般理论知识。但是理论终究知识在之上，距离真正的实践还有一定的差距。前面我们提到了第一个带有内存动态分配和垃圾收集的编程语言并不是 Java 而是1960年诞生的Lisp。当然这一小节中我们并不会梳理 Lisp 实现的垃圾收集器。这一小节我们会先从经典垃圾收集器入手，梳理各个垃圾收集器的特性、优缺点和适用场景。当然随着垃圾收集器的效率的不断提升其实现的复杂度也在不断提升。我们会主要的篇幅去介绍CMS和G1原理及部分实现细节，升华对垃圾收集器的理解。今天是六一儿童节，各位朋友坐好来，我们的梳理开始了。😂</p><h2 id="经典垃圾收集器概述"><a href="#经典垃圾收集器概述" class="headerlink" title="经典垃圾收集器概述"></a>经典垃圾收集器概述</h2><p>这里的提到的“经典”并非出于情怀，只是他们的确挺经典，是出于讨论范围的限定。我们这里讨论的是在 JDK 7 Update 4 之后（这个版本中正式提供了商用的 G1 收集器，此前 G1 仍处于实验状态）、JDK 11 正式发布之前，OracleJDK 中提供的 HotSpot 虚拟机所包含的全部可用的垃圾收集器。使用“经典”来描述是为了区分开目前几款正处于实验状态，但执行效果却具有革命性改进的高性能低延迟的垃圾回收器。这些经典的垃圾回收器虽然已经不算是最先进的技术，但是这些经典的垃圾回收器都在生产环境经过千锤百炼，足够成熟，基本上可以认为现在到未来几年内可以在生产环境上放心使用的垃圾收集器，因此掌握他们的特点和配置细节很重要。下图是各个经典垃圾收集器之间的关系。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210602003646.png"></p><p>上面这张图展现了七种作用于不同分代的垃圾回收器，图中垃圾收集器所处的位置则表示他们工作的区域即年轻代或老年代。其中上面<code>Young Generation</code>表示年轻代，下面的<code>Old Generation</code>则代表老年代。如果两个垃圾回收器之间存在连线，则说明他们两个可以搭配使用。</p><blockquote><p>⚠️需要注意的是，这个关系并不是一成不变的，由于维护和兼容性测试的成本，在JDK8时将 Serial+CMS、ParNew+Serial Old这两个组合声明为废弃（JEP173），并在 JDK 9 中完全取消了这些组合的支持（JEP214）。</p></blockquote><p>接下来我们会围绕着这些垃圾回收器的目标、特性、原理和使用场景来了解与分析，并且会着重分析一些CMS和G1的实现细节。这里需要需要先明确一个观点，<strong>目前在 JVM 中没有一个在任何一个场景都表现的很完美的万能垃圾回收器</strong>，如果这样的垃圾回收器存在的话，也就不会出现 HotSpot 中这么多垃圾回收器并存的情况了。 </p><h2 id="Serial收集器（Serial-SerialOld）"><a href="#Serial收集器（Serial-SerialOld）" class="headerlink" title="Serial收集器（Serial + SerialOld）"></a>Serial收集器（Serial + SerialOld）</h2><p>Serial 收集器是最基础、也是历史最悠久的垃圾收集器。<strong>曾经（JDK1.3.1之前）是HotSpot收集器的唯一选择</strong>。从这个名字也不难猜到，这个垃圾收集器是一个<code>单线程工作</code>的垃圾收集器。“单线程”并不仅仅意味着他只会是会用一个处理器或是一个收集线程去完成垃圾收集，它更是要强调<strong>它在进行垃圾回收的时候，必须暂停其他的工作线程（STW）</strong>直到它工作结束。Serial垃圾收集器在年轻代工作使用的<code>标记复制算法（mark-copy）</code>，在工作在老年代的是 SerialOld 垃圾收集器使用<code>标记清除整理算法（mark-sweep-compact）</code>，它的特性和Serial一致都是<code>单线程</code>垃圾收集器。但是这样看似落后的垃圾收集器并没有被废弃。单线程真的就没有优点吗？实际上 Serial 依旧是HotSpot虚拟机运行在客户端模式下的默认垃圾收集器。单线程垃圾收集器虽然和多线程垃圾收集器相比显得低效，但是从另外一个角度来看意味着<strong>简单可靠</strong>，对于内存有限的环境来说<strong>它又是内存消耗最少</strong>的。 对于只有单核的环境活着CPU核心数少的环境来说，减少上下文的切换它又是高效的。因此对于<strong>内存小、CPU核心数少、不会频繁发生垃圾收集的环境，Serial收集器会是一个好的选择。</strong>使用下面的JVM参数即可使用 Serial 垃圾收集器。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-XX:+UseSerialGC</span><br></code></pre></td></tr></table></figure><h2 id="Parallel收集器（Parallel-Scavenge-Parallel-Old）"><a href="#Parallel收集器（Parallel-Scavenge-Parallel-Old）" class="headerlink" title="Parallel收集器（Parallel Scavenge + Parallel Old）"></a>Parallel收集器（Parallel Scavenge + Parallel Old）</h2><p>Parallel 收集器也叫做<code>并行收集器</code>，他能<strong>并行的进行垃圾收集</strong>。<code>Parallel Scavenge</code>是 Parallel 在新生代运行的垃圾收集器，采用的同样也是<code>标记复制算法（mark-copy）</code>，在老年代使用的是 Parallel Old 收集器，使用的也是<code>标记清除整理算法（mark-sweep-compact）</code>。<code>Parallel</code>和<code>Serial</code>一样进行垃圾收集时，<strong>Parallel 在新生代和老年代都会触发STW，但是 Parallel 是采用并行标记，并行垃圾收集，因此STW时间和垃圾收集时间会相较于Serial短很多，垃圾收集速递大幅度提高</strong>。后面我们会介绍 CMS 垃圾收集器，CMS 新生代使用的是 ParNew 这也是一款并行的垃圾收集器，那他们区别是什么呢？Parallel 侧重的更多是可控制<code>吞吐量（Throughput）</code>，而<strong>CMS侧重更短的STW时间</strong>。Parallel也是<code>JDK8的默认垃圾回收器</code></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210603011802.png"></p><p>Parallel 适用多核心处理处理器，主要目的是增加吞吐量。因为对系统资源的有效使用能达到更高的吞吐量。在GC期间<strong>所有的CPU内核都在并行清理垃圾</strong>，所以总暂停时间更短；在两次GC周期的间隔期，没有GC线程在运行，不会消耗任何系统资源。使用下面的JVM参数即可以开启ParallelGC。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">-XX:+UseParallelGC<br>-XX:+UseParallelOldGC<br>-XX:+UseParallelGC -XX:+UseParallelOldGC<br></code></pre></td></tr></table></figure><p><code>Parallel Scavenge</code>提供了两个参数用于精准控制吞吐量，分别是控制最大垃圾收集时间的<code>-XX:MaxGCPauseMillis</code> 参数，以及直接设置吞吐量大小的 <code>-XX:GCTimeRatio</code>。其中<code>-XX:MaxGCPauseMillis</code> 设置一个大于0的毫秒数，垃圾收集器尽量把垃圾收集时间控制在这个毫秒数内，如果设置过小那么收集器的吞吐量将下降。<code>-XX:GCTimeRatio</code> 这个参数设置一个大于0小于100的整数，<strong>也就是垃圾收集时间占总时间的比率。这个参数设置为N，那么用户代码执行时间与总执行时间之比为</strong><code>N:N+1</code>。例如 <code>—XX:GCTimeRatio=19</code>，那么垃圾收集时间占用总时间的比例为<code>5%(1/(1+ 19))</code>。默认值为99，即1%垃圾回收时间占用。Parallel垃圾收集器是一款高吞吐的垃圾收集器，那它有什么缺点吗？Parallel垃圾收集器工作期间必须暂停其他的工作线程（STW），多个垃圾回收工作线程同时工作，虽然垃圾清理效率很高，但是和其他追求短暂STW的垃圾收集器（CMS、G1、ZGC、Shenandoah）相比还是偏长。并且Parallel收集器的清理速度会随着堆的增大而变慢。</p><blockquote><p>什么是并行和什么又是并发，他们之间有什么区别？</p><p>并行是指利用多个处理器或者多核心处理器同时处理多个不同的任务。</p><p>并发是指一个处理器线程在多个不同的任务之间来回切换来实现“同时执行”。</p></blockquote><h2 id="CMS（ParNew-CMS）"><a href="#CMS（ParNew-CMS）" class="headerlink" title="CMS（ParNew + CMS）"></a>CMS（ParNew + CMS）</h2><p>CMS GC的官方名称为“<strong>Mostly Concurrent Mark and Sweep Garbage Collector</strong>”（最大并发标记清理垃圾收集器）。其中对年轻代使用的是并行的STW方式的标记复制算法（mark-copy），对老年代使用的是并发标记清除算法（标记-清除）。其中CMS的核心是放在老年代，而年轻代使用的 ParNew 垃圾收集器。<strong>ParNew 收集器实质上就是 Serial 收集器的多线程版本</strong>，除了使用多条线程进行垃圾收集之外，其余的行为包括 Serial 垃圾收集器的所有的控制参数、收集算法、STW、对象分配规则、回收策略等都和Serial收集器完全一致。虽然ParNew在不少运行在服务端HotSpot在新生代垃圾收集器的首选。其中一个非常重要的重要的原因就是，<strong>ParNew 是唯一一个除了Serial 之外能和CMS搭配工作的垃圾收集器</strong>。使用下面的JVM参数即可启用CMS：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">+XX:+UseConcMarkSweepGC <span class="hljs-meta">#同时新生代使用ParNew垃圾收集器。</span><br></code></pre></td></tr></table></figure><p>CMS的设计目标<strong>是为了避免在老年代进行垃圾收集时出现长时间卡顿</strong>。</p><blockquote><p>之前我考虑过一个问题，CMS 减少的是老年代的卡顿，但是并没有减少新生代的垃圾收集的卡顿。老年代的GC次数远远少于新生代，为了减少老年代设计的CMS是否有意义？</p><p>当然是有意义的。因为新生代使用的标记复制算法并且存活对象少，在标记和复制阶段的耗时都非常的短，这个时间基本上可以忽略不计。但是在之前的算法中，老年代使用的是标记清除整理算法，并且存活对象很多。这样会有大量的时间浪费在整理上。所以这个阶段的STW时间是很长的。</p></blockquote><p>避免老年代收集器长时间的卡顿，通过两种手段来达成此目标。</p><ul><li><strong>不对老年代进行整理，而是使用空闲列表（free-list）来管理内存空间的回收。</strong></li><li><strong>在标记清理阶段的大部分工作和并发线程一起完成。</strong></li></ul><p>在并发标记阶段并没有明显的应用线程暂停，但是值得注意的是它仍然和应用线程争抢 CPU 时间。默认情况下，<strong>CMS使用的是并发线程数等于 (CPU 核心数 + 3)/4。</strong></p><blockquote><p>这两个手段很好理解。不对老年代进行整理，也就避免了老年代整理带来的长时间STW。对于之前垃圾收集器不管是 Serial 还是 Parallel，在标记阶段或者清理整理阶段都会进行STW，CMS 采用的手段是通过一起并发执行来消除这个阶段的 STW。在解决问题的思路上可以说是很切中要点了。</p></blockquote><p>如果服务器是多核CPU，并且主要调优目标是降低 GC 停顿导致的系统延迟，那么使用 CMS是一个很明知的选择。通过减少每一次GC停顿的时间，能很大程度上改善用户体验。但是<strong>如果CPU资源不是很充足或是受限制的情况下，CMS的吞吐量会出现比较明显的问题</strong>。对于绝大部分系统，CMS 和 Parallel 的吞吐和延迟的差别并不大。</p><h3 id="CMS-垃圾收集阶段过程"><a href="#CMS-垃圾收集阶段过程" class="headerlink" title="CMS 垃圾收集阶段过程"></a>CMS 垃圾收集阶段过程</h3><p>上面提到通过两个主要的手段来达成垃圾收集时的长时间卡顿的目标。但是我们前面提到如果老年代只标记清理不整理这样会产生很多不可用的碎片空间。我们前面还提到并发清理的时候，为了避免引用的变化，其他工作线程都需要进入安全点等待直至垃圾收集结束。那 CMS 是怎样巧妙地处理这些矛盾点呢？我们一起来看看 CMS GC 的几个阶段。</p><h4 id="阶段1：初始标记阶段（inital-mark）（STW）"><a href="#阶段1：初始标记阶段（inital-mark）（STW）" class="headerlink" title="阶段1：初始标记阶段（inital mark）（STW）"></a>阶段1：初始标记阶段（inital mark）（STW）</h4><p>这个阶段<strong>伴随STW暂停</strong>。初始标记的目标是标记所有的根对象，包括根对象直接引用的对象，以及被新生代中所有存活对象所引用的对象（老年代单独回收）。</p><blockquote><p>我们前面提到对新生代进行垃圾收集标记阶段，会把脏卡中的对象（老年代指向新生代引用的对象）加入GC Roots，这里也是类似的处理方向，只不过方向反过来了，把新生代中指向老年代的对象加入GC Roots。</p></blockquote><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210605163034.png"></p><h4 id="阶段2：并发标记（Concurrent-Mark）"><a href="#阶段2：并发标记（Concurrent-Mark）" class="headerlink" title="阶段2：并发标记（Concurrent Mark）"></a>阶段2：并发标记（Concurrent Mark）</h4><p>在这个阶段，CMS GC遍历老年代，标记所有的存活对象，从前一阶段的“Initial Mark”找到的根对象开始算起。“并发标记阶段，就是与应用程序同时运行，不用暂停的阶段（这个阶段没有STW）。⚠️请注意并非所有的老年代中存活的对象都在此阶段被标记，因为在<strong>标记过程中对象的引用关系还在发生这变化。</strong></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210605164135.png"></p><p>在上面的图中，<code>当前处理对象</code>的一个引用被应用程序给断开了，即这个对象的应用关系发生了变化。那我们要怎么处理这种变化的引用关系呢？先<code>标记脏卡</code>。</p><h4 id="阶段3：并发预处理（Concurrent-Preclean）"><a href="#阶段3：并发预处理（Concurrent-Preclean）" class="headerlink" title="阶段3：并发预处理（Concurrent Preclean）"></a>阶段3：并发预处理（Concurrent Preclean）</h4><p>在这个阶段不需要STW停顿，因为前面一个阶段<code>并发标记</code>与程序一起运行，可能有一些对象的引用关系已经发生了变化。如果在并发标记中引用发生了变化，那么JVM 将通过 Card 的方式将发生改变的区域标记为“脏”卡，这是老年代清理过程中的<code>卡片标记</code>，并发标记在前面一小节有详细的介绍。 <strong>这个阶段还会处理在执行并发标记阶段新进入老年代的对象（新晋升的对象）。</strong></p><blockquote><p>这里的脏卡和我们前面在一般原理和垃圾收集中讲到的脏卡有一些不一样，前面<code>年轻代标记阶段</code>提到的脏卡，是为了避免每次新生代标记的时候避免扫描整个老年代，而是通过每次复制之后修改地址时，顺带标记出老年代对新生代有引用的对象所在的“卡”为脏卡。下次新生代GC时，将脏卡中的对象加入 GC Roots即可。</p><p>这里的<code>CMS中的脏卡</code>是指在CMS 并发标记的过程中引用发生变化卡，在后续垃圾收集过程中进行特别处理。</p><p><code>共同点</code>都是都是JVM老年代的卡片标记技术，标记某个内存块，为后续垃圾收集操作提供标识。</p></blockquote><p>​        <img src="https://gitee.com/realDaiwei/img/raw/master/20210605173345.png">                                       </p><p>在预清理阶段，这些<strong>脏对象会被统计出来，他们所引用的对象也会被标记</strong>，此阶段完成后，用以标记的 card 也会被清空。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210605231002.png"></p><p>这个阶段还会进行一些必要的细节处理，还会为<code>Final Remark</code>做一些准备工作。</p><h4 id="阶段4：可取消的并发预清理（Concurrent-Abortable-Preclean）"><a href="#阶段4：可取消的并发预清理（Concurrent-Abortable-Preclean）" class="headerlink" title="阶段4：可取消的并发预清理（Concurrent Abortable Preclean）"></a>阶段4：可取消的并发预清理（Concurrent Abortable Preclean）</h4><p>这个阶段也不会STW，这个阶段在 STW的Final Remark 之前尽可能地多做一些工作。这个阶段可显著影响STW停顿持续时间。</p><h4 id="阶段5：最终标记阶段（Final-Remark）（STW）"><a href="#阶段5：最终标记阶段（Final-Remark）（STW）" class="headerlink" title="阶段5：最终标记阶段（Final Remark）（STW）"></a>阶段5：最终标记阶段（Final Remark）（<strong>STW</strong>）</h4><p>最终标记阶段是本次GC时间中的第二次（也是最后一次）<strong>STW停顿</strong>。本阶段的目标是完成老年代中所有存活对象的标记。因为之前的预清理阶段是并发执行的，有可能GC线程跟不上应用程序的修改速度。所以需要一次STW暂停来说处理各种复杂的情况。通常 CMS 会尝试在年轻代尽可能空的情况下执行 Final Remark，以免连续触发多次 STW事件。在以上5个阶段完成之后，老年代中的所有存活对象都被标记了，然后GC将清除所有不使用的对象来回收老年代空间。 </p><h4 id="阶段6：并发清除（Concurrent-Sweep）"><a href="#阶段6：并发清除（Concurrent-Sweep）" class="headerlink" title="阶段6：并发清除（Concurrent Sweep）"></a>阶段6：并发清除（Concurrent Sweep）</h4><p>这个阶段不需要 STW停顿，JVM在此阶段清理不再使用的对象，并回收他们占用的内存空间。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210605235328.png"></p><h4 id="阶段7：并发重置（Concurrent-Reset）"><a href="#阶段7：并发重置（Concurrent-Reset）" class="headerlink" title="阶段7：并发重置（Concurrent Reset）"></a>阶段7：并发重置（Concurrent Reset）</h4><p>这个阶段与应用程序并发执行，重置 CMS 算法相关内置数据，并为下次GC循环做好准备。</p><h3 id="汇总四阶段"><a href="#汇总四阶段" class="headerlink" title="汇总四阶段"></a>汇总四阶段</h3><p>有的书上我看介绍 CMS 的垃圾回收步骤只有5步甚至是4步，书中梳理出来的4步分别为：</p><ul><li>初始标记：仅仅标识 GC Root 能直接关联到的对象。（STW）</li><li>并发标记：由初始标记的关联对象遍历标记整个对象图的过程。</li><li>重新标记：修正因为应用线程并发执行，导致的部分标记产生变动的对象的标记。（STW）</li><li>并发清理：清理删除标记阶段判断已经“死亡”的对象。</li><li>（并发重置：重置内部设置）。</li></ul><p>其实这上面的4（5）个阶段和我们前面梳理的七个步骤是差不多的，只是7个阶段多了2个并发预处理的过程，这两个流程都没有进行本质上的标记或者清理，要么是处理脏卡，要么是为最终标记做铺垫。还有最后一个书中是没有的提到的并发重置阶段，这3个阶段都没有做本质上的标记或清理。所以从7个阶段缩减到4个也是可以理解的。CMS 整个过程中也是需要STW的只不过STW的时间很短。大多数时间都是都在并发的进行垃圾回收。</p><h3 id="CMS-的缺点"><a href="#CMS-的缺点" class="headerlink" title="CMS 的缺点"></a>CMS 的缺点</h3><p>CMS是一款优秀的垃圾收集器，但是的优点也很明显并发收集、低停顿。在一些官方文档中也称之为“并发低停顿收集器”，CMS是HotSpot虚拟机追求低停顿的一次成功尝试，但是它还远远达不到成功的程度，至少它有下面三个缺点：</p><ol><li>对处理器资源非常敏感。面向并发设计的程序对处理器都很敏感。</li><li>无法处理<code>“浮动垃圾”（floating garbage）</code>，有可能会出现“Concurrent Mode failed”并发失败进而导致一次完整STW的Serail FullGC。</li></ol><blockquote><p>浮动垃圾指的是在 CMS 并发标记和清理期间，由于应用程序并没有停止运行，这个过程中会有垃圾不断的产生，但这一部分垃圾是出现在标记过程中之后的，因此 CMS 在当轮垃圾回收的过程中没法处理它们，所以这些垃圾只有到下一次垃圾收集时才能处理。这一部分垃圾就成为“浮动垃圾”（floating garbage）因此 CMS 不能等到老年代被填满了才进行垃圾收集，必须为可能产生的浮动垃圾预留一些空间。如果浮动垃圾堆满了预留的空间那就会出现并发失败的问题了。可以通过下面的参数设置当已经使用的空间达到多少时触发 CMS。你可以思考这个参数设置不当会造成什么后果😏。</p></blockquote><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby"><span class="hljs-symbol">XX:</span>CMSInitiatingOccupancyFraction=<span class="hljs-number">70</span> <span class="hljs-comment">#总使用空间达到70%触发CMS</span></span><br></code></pre></td></tr></table></figure><ol><li>内存碎片，因为CMS采用的是标记清除算法。内存碎片不可避免。内存碎片过多是将给大对象的分配带来麻烦。时常会会为了给大对象分配空间但由于内存碎片而不得不进行一次 FullGC。为了解决这个问题 CMS 提供了两个JVM 参数，但是在 JDK9开始废弃。</li></ol><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby"><span class="hljs-symbol">XX:</span>UseCMSCompactAtFullCollection <span class="hljs-comment">#默认开启，在CMS不得不FullGC的时候开启内存合并整理。</span></span><br><span class="ruby">-<span class="hljs-symbol">XX:</span>CMSFullGCsBeforeCompaction=n <span class="hljs-comment">#n次FullGC之后，下次FullGC前进行内存碎片整理，默认值0，每次进入FullGC都会进行内存碎片整理。</span></span><br></code></pre></td></tr></table></figure><h2 id="Garbage-First（G1）"><a href="#Garbage-First（G1）" class="headerlink" title="Garbage First（G1）"></a>Garbage First（G1）</h2><p>Garbage First 简称（G1）收集器是垃圾收集技术发展历史上的里程碑的成果，它开创了收集器面向局部收集的思路和<strong>基于Region的内存布局形式</strong>。G1是一款面向服务端的垃圾收集器，HotSpot 开发团队最初赋予它的期望是代替 CMS 垃圾收集器。<strong>在JDK9中G1已经代替 Parallel 收集器成为JDK的默认垃圾收集器</strong>。G1既然作为CMS的挑战者，G1对垃圾收集做出了哪些革命性的变革，G1又是否能很好的解决CMS中存在的问题呢？</p><h3 id="后来者的独门秘籍"><a href="#后来者的独门秘籍" class="headerlink" title="后来者的独门秘籍"></a>后来者的独门秘籍</h3><p>在前面梳理CMS的缺点中，我们发现无法处理<code>浮动垃圾</code>和<code>内存碎片</code>是CMS的硬伤。这些问题G1也要面对，但是G1采用了一种非常巧妙的方式去解决。浮动垃圾，这是与应用线程并发运行的垃圾收集器的通病，这个问题的根本矛盾是<strong>垃圾收集线程在不断进行垃圾收集，与此同时应用线程又在不断产生垃圾，是垃圾生产与垃圾回收之间的不平衡。</strong>这是一个不可调和的矛盾。如果我们用发展的眼光看问题，我们会发现如果浮动<code>垃圾的产生速度&gt;垃圾收集的速度</code>，那么再大的空间都会被迫触发一次FullGC，如果<code>垃圾产生的速度&lt;垃圾收集速度</code>，产生浮动垃圾对整个垃圾收集也不会产生太大的影响。</p><blockquote><p>这就像你妈在打扫房间而你又在一旁制造垃圾，这个时候你妈除了把你胖揍一顿拿你毫无办法。谁让这垃圾收集线程与应用线程之间是要并发的关系呢。解决的办法也很简单，只要你妈打扫卫生的速度大于你生产垃圾的速度，你妈就能把垃圾打扫完并把你胖揍一顿。因此只要<code>内存分配速率 &lt; 垃圾收集速率</code>那么一切都很完美，浮动垃圾随他去吧，。</p></blockquote><p>那么<code>内存碎片的问题</code>，G1是怎么处理的呢？<code>“化整为零”</code>，这个思路很特别，跳出原有的思维束缚。G1的内存结构和传统的内存结构非常的不同，每个内存块还是有Eden区，Survivor区和Old的区的划分。但不再分成年轻代和老年代，而是划分为多个（通常是2048个）可以存放对象的<code>小块内存区域（smaller heap regions）</code>。每一个小块，可能一会被定位为Eden、Survivor或Old区，所有的Eden区拼在一起就是年轻代，所有的Old区拼在一起就是老年代。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210606162329.png"></p><p>除了这些问题上，创新性的解决思路，G1还有一个小目标，<strong>希望能做出一款能够建立起“停顿时间模型”（Pause Prediction Model）的收集器</strong>，停顿时间模型的意思是能够<strong>支持指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集器上的时间大概不会超过N毫秒的这样的目标。</strong></p><p>有了上面的思路的转变对于G1的认知是否有转变呢？面对浮动垃圾的问题，G1没有直面的去解决而是通过提高垃圾回收速率的方式即<code>垃圾回收速率&gt;内存分配速率</code> 的方式来处理。面对前面CMS遇到的内存碎片问题，<strong>G1将整个内存“打碎成块”然后通过整体复制的方式直接避免了内存碎片的产生</strong>。这个解决的方式是不是很巧妙。通过上述的解决方案，再来看G1的小目标。希望能做出一款能够建立起“停顿时间模型”（Pause Prediction Model）的收集器，是不是就有了思路呢？</p><p><strong>只要每次垃圾收集的周期只要收集的垃圾的速率&gt;内存分配速率是不是就可以了呢？是的！每个内存块又是独立的。这样每次GC周期目标就很明确了，只要收集全部的新生代和部分老年代的内存块，并且保证每次GC周期垃圾收集速率 &gt; 内存分配速率。</strong>每次GC周期不用完成所有内存块的垃圾收集工作，停顿时间模型也可以基于G1建立起来，这同时也呼应了这款垃圾收集器的名字 Garbage First。这种设计思路从工程实现上来看是从 G1 上开始兴起，所以说 G1 是收集器发展的一个里程碑。</p><h3 id="G1-遇到的困难及解决方案"><a href="#G1-遇到的困难及解决方案" class="headerlink" title="G1 遇到的困难及解决方案"></a>G1 遇到的困难及解决方案</h3><p>虽然G1提出了前面的很多解决 CMS 遇到问题的理论，但是理论到实现之间还隔着很长一段路。G1从理论走线实践至少有一下三个关键细节问题需要妥善解决。</p><ul><li><strong>跨 Region 之间的引用问题。</strong>根据前面的学习，我们可以知道使用记忆集Remember Set（也就是我们前面提到的Card Table），通过记忆集的方式，可以避免全堆作为 GC Roots 进行扫描。在之前的技术中，不管新生代垃圾收集时用到还是CMS并发标记标记引用变动时用到记忆集，都是简单老年代的标记。但是G1在记忆集中的运用则复杂的多，每一个Region都需要维护着自己的记忆集。里面记录着<strong>别的Region指向自己的指针，并标记着这些指针在哪些范围卡页之内。</strong>Remeber Set 本质的集合是一种 Hash 表，Key 是别的Region的起始地址，Value是一个集合，里面存储的元素卡表的索引号，这种结构不同于卡表，卡表记录的是“我指向谁”，而这种结构记录的更多的是“谁指向我”。这种结构比卡表实现起来更加的复杂，同时Region的数量又比传统收集器分代数量多得多，<strong>因此G1收集器相比其他的传统垃圾收集器有着更高的内存占用负担</strong>，更具经验这个<strong>额外开销大致相当于堆容量的10%～20%。</strong></li></ul><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210606230603.png"></p><ul><li><strong>并发标记阶段如何保证收集线程和用户线程互不干扰的运行。</strong>这里要解决的两个问题，一个是并发的进行标记，用户线程改变对象引用关系时，必须保证其不能打破原本的对象图结构，导致标记结果出现问题。我们可以采用三色标记法解决这个问题，三色标记法在前面一小节《JVM GC篇 — 一般原理与垃圾收集算法》中有详细介绍。此外<strong>垃圾收集对应用线程的影响还体现在回收过程中对象的分配上</strong>，程序要继续运行就要在垃圾回收的过程中创建对象分配内存空间。G1为每个Region设计了<strong>两个名为TAMS（Top at Mark Start）的指针，把一部分空间划分出来用于并发回收过程中新的对象分配</strong>。G1在这个地址上的对象是隐式标记过的，即默认它们是“存活”的，不纳入回收范围。在G1中也有 CMS 中“Concurrent Mode failed”的类似场景，如果<strong>垃圾回收速度赶不上内存分配速度，G1也会被迫进行<code>FullGC</code>，从而导致较长时间的STW。</strong></li><li><strong>如何建立可靠的停顿预测模型。</strong>解决了上面的两个问题还有一个问题怎么建立可靠的停顿预测模型？这是G1设计的小目标，用户通过<code>-XX:MaxGCPauseMillis</code> 参数指定停顿时间只意味着垃圾收集发生之前的期望，但是G1是怎么在垃圾收集时，满足用户的期望值的呢？G1 使用的停顿预测模型是以<code>衰减均值（Decaying Average）</code>，为理论基础来实现的。在垃圾收集的过程中，G1收集器会记录每个 Region 的回收耗时、每个 Region 记忆集里面的脏卡数量等各个<strong>可测量的步骤花费的成本，并且分析得出平均值、标准偏差、置信度等统计信息</strong>。这里强调的“<code>衰减平均值</code>”是指的<strong>它会比普通的平均值更容易收到新数据的影响</strong>，平均值代表整体平均状态，但是平均值更准确地代表了“最近的”平均状态。换句话说，<strong>Region的统计状态越新越能决定其回收的价值</strong>。然后通过这些信息进行分析，完成在<strong>不超过期望停顿时间的约束下达到收集收益的最大化。</strong></li></ul><h3 id="G1-的收集流程"><a href="#G1-的收集流程" class="headerlink" title="G1 的收集流程"></a>G1 的收集流程</h3><p>如果不考虑应用线程在运行过程中的动作（用写屏障维护记忆集操作），G1 的垃圾回收过程可以分为下面四个步骤：</p><ul><li><strong>初始化标记（Inital Marking）</strong>：仅仅是标记下<strong>GC Roots能直接关联到的对象</strong>，并且<strong>修改</strong><code>TAMS</code><strong>指针</strong>的位置的值，让下一个阶段用户线程并发运行的时候，能正确地在<strong>可用的Region中分配对象</strong>，这个阶段需要暂停线程，但耗时很短，而且是借用进行的 Minor GC 的时候同步完成的，所以 G1 收集器在这个阶段实际并没有额外的停顿。</li></ul><blockquote><p>“借用进行的 Minor GC 的时候同步完成的” 这里是Mixed模式的GC 即收集<strong>年轻代和部分老年代</strong>，一次Minor GC之后，老年代占据堆内存的百占比超过InitiatingHeapOccupancyPercent（默认45%）时，就会触发一次 MixedGC</p></blockquote><ul><li><strong>并发标记（Concurrent Marking）</strong>：从GC Root开始对堆中的对象进行可达性分析，<strong>递归扫描整个堆里面的对象图，找出要回收的对象</strong>。这个阶段时间比较长的，可与应用线程并发执行。当扫描完成还要并发时的引用变化，为最终的最终标记阶段处理SATB打下基础。</li><li><strong>最终标记（final Marking）：</strong>对应用线程做一个短暂的暂停，用于<strong>处理并发阶段结束后仍然遗留下的少量的SATB</strong>。</li><li><strong>筛选回收（Living Data Counting and Evacuation）：</strong>负责更新Region的统计数据，对各个Region 的回收价值和成本进行排序，<strong>根据用户期望的停顿时间来制定回收计划</strong>，可以选择任意多个Region构成回收集，然后<strong>把回收集中存活的对象复制到空的 Region 中，再清空整个旧Region空间</strong>。因为在复制对象过程中设计的存活对象的移动，所以必须要暂停应用线程，同时由多个收集器线程并行完成复制过程。这个暂停的过程叫做<strong>转移暂停（Evacuation Pause）</strong></li></ul><blockquote><p>写屏障，这里的写屏障和多线程Java 内存模型中的内存模型不一样，这里的写屏障只是在字节码层面，在执行某个写操作时候一个<strong>类似AOP的结构</strong>，可以将一些操作插入在写入前后。</p></blockquote><h3 id="一个细节-—-单个Region垃圾收集与内存分配的并发策略"><a href="#一个细节-—-单个Region垃圾收集与内存分配的并发策略" class="headerlink" title="一个细节 — 单个Region垃圾收集与内存分配的并发策略"></a>一个细节 — 单个Region垃圾收集与内存分配的并发策略</h3><p>我们前面也梳理了一遍G1的垃圾收集过程，大体上有一个清晰明了的认识，但是有一个细节我始终不明白就是在“G1 遇到的问题中的第二个问题，并发标记阶段如何保证收集线程和用户线程互不干扰的运行。”，里面提到了 <code>G1为每个Region设计了两个名为TAMS（Top at Mark Start）的指针，把一部分空间划分出来用于并发回收过程中新的对象分配。</code> <code>TAMS</code>指针到底是什么？为什么需要两个TAMS 指针才能划出一块空间呢？难道不是一个就可以划分两片区域一片垃圾回收一片分配对象空间就可以了吗？这个问题的本质问题就是<strong>单个Region在并发标记阶段垃圾收集与内存分配之间的并发策略是怎样的？</strong>为了让并发的线程操作Region中的区块，我们需要额外的数据结构协助，两个<code>bitmap</code>和两个指针（<code>TAMS指针</code>）。我们先来看看两个bitMap和他们在并发标记过程中的一些行为动作：</p><blockquote><p>bitMap 在 G1 中是用来标记垃圾位置的，垃圾不会直接在 region 中被标记出来，而是使用一个bitMap来标记待回收对象位置。</p></blockquote><ul><li>这两个<code>bitMap</code>分别是 <code>previousBitMap</code>，<code>nextBitMap</code><strong>。</strong></li><li><code>previousBitMap</code>是<strong>上一轮</strong><code>concurrent marking</code>阶段完成标记后的<strong>没有被回收</strong>的垃圾位置。</li><li><code>nextBitMap</code>是当前正在进行的<code>concurrent marking</code>阶段的bitmap。</li><li>当<code>concurrent marking</code>标记完成后，两个<code>bitmap</code>会交换角色。</li></ul><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210610001206.png"></p><p>bitmap 上面的数组结构（<code>RoaringBitMap</code>和<code>redis</code>中的<code>BitMap</code>都是这样的结构），其中<strong>白色的区域是存活对象，灰色的是待回收的垃圾对象</strong>。除了bitmap我们还需要两个<code>TAMS</code>（Top at Mark Start）指针。接下来我们来看看在垃圾回收各个阶段，这两个指针是怎么配合划分线程进行内存来分配和垃圾回收。</p><ul><li><strong>初始标记阶段</strong>，从下面的图中我们不难发现，初始标记阶段<code>PrevTAMS</code>指针和<code>Bottom</code>指针（<strong>region的初始位置</strong>）位置一致，同时第二个<code>NextTAMS</code>的指针和Top指针位置一致，其中<strong>top指针是已分配的内存和未分配内存的切分点。</strong>同时初始化<code>NextBitMap</code>，由于这是一块干净的Region，因此PrevBitMap是空的。</li></ul><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210610003231.png"></p><ul><li><strong>并发标记和最终阶段</strong>，下面的图是标记完成后Region中的情况，其中GC线程在<code>PrevTAMS</code>和<code>NextTAMS</code><strong>之间进行并发标记</strong>，而<strong>新对象的内存分配在<code>NextTAMS</code>和<code>TOP</code>之间进</strong>行，由于是刚分配的对象GC默认这里的对象都是存活状态。这样就巧妙的解决了垃圾收集和对象内存分配的并发问题。</li></ul><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210610003425.png"></p><ul><li><strong>清理阶段</strong>，最终清理阶段，我们将<code>NextBitMap</code>赋值给<code>PrevBitMap</code>。如果<strong>不进行暂停转移并发清理垃圾对象</strong>即可并<strong>继续使用</strong>这个Region。如果进行<strong>对象转移</strong>，那么将<strong>把存活对象复制到一个新的Region</strong>中并<strong>清空</strong>当前Region。</li></ul><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210610004607.png"></p><ul><li><strong>下一轮初始标记</strong>，同样的我们初始化新的<code>NextBitMap</code>，这里还有一个重要的操作就是<strong>把<code>NextTAMS</code>指向<code>TOP</code>的位置</strong>，告诉GC本轮标记的工作空间范围。然后接下来<code>TAMS</code>和<code>bitMap</code>就按照上面的标记和清理阶段不断循环下去。</li></ul><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210611012152.png"></p><p>接下来Region的中的TAMS指针和bitMap的情况如下图所示。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210610005825.png"></p><p>如果有静态图还是有点懵，整个流程的动图如下 😉</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/17093e8bc74d2cb5.gif"></p><blockquote><p>这个问题我也是看书时候看懵了，为什么需要两个TAMS呢？就像彻底搞清楚这个流程，然后在网上发现了《<a href="https://www.cnblogs.com/thisiswhy/p/12388638.html">面试官问我G1回收器怎么知道你是什么时候的垃圾？</a>》这篇文章，这篇文章写的非常有意思，强烈建议看一遍原文。</p></blockquote><h3 id="G1-中常用的参数"><a href="#G1-中常用的参数" class="headerlink" title="G1 中常用的参数"></a>G1 中常用的参数</h3><ul><li><code>-XX:+UseG1GC</code> ：启用G1 GC，JDK7和JDK8要求必须显示申请启动G1 GC；</li><li><code>-XX:G1NewSizePercent</code> ：初始年轻代占整个Java Heap的大小，默认值为5%；</li><li><code>-XX:G1MaxNewSizePercent</code> ：最大年轻代占整个Java Heap的大小，默认值为60%；</li><li><code>-XX:G1HeapRegionSize</code> ：设置每个Region的大小，单位MB，需要为1，2，4，8，16，32中的某个值，默认是堆内存的1/2000。如果这个值设置比较大，那么大对象就可以进入Region了。</li><li><code>-XX:ConcGCThreads</code> ：与Java应用一起执行的GC线程数量，默认是<strong>Java线程的1/4</strong>，减少这个参数的数值可能会提升并行回收的效率，提高系统内部吞吐量。如果这个数值过低，参与回收垃圾的线程不足，也会导致并行回收机制耗时加长。</li><li><code>-XX:+InitiatingHeapOccupancyPercent</code> （简称IHOP）：G1内部并行回收循环启动的阈值，默认为Java Heap的45%。这个可以理解为老年代使用大于等于45%的时候，JVM会启动垃圾回收。这个值非常重要，它决定了在什么时间启动老年代的并行回收。</li><li><code>-XX:G1HeapWastePercent</code> ：G1停止回收的最小内存大小，默认是堆大小的5%。GC会收集所有的Region中的对象，但是如果下降到了5%，就会停下来不再收集了。就是说，不必每次回收就把所有的垃圾都处理完，可以遗留少量的下次处理，这样也降低了单次消耗的时间。</li><li><code>-XX:G1MixedGCCountTarget</code> ：设置并行循环之后需要有多少个混合GC启动，默认值是8个。老年代Regions的回收时间通常比年轻代的收集时间要长一些。所以如果混合收集器比较多，可以允许G1延长老年代的收集时间。</li><li><code>-XX:+G1PrintRegionLivenessInfo</code> ：这个参数需要和 <code>-XX:+UnlockDiagnosticVMOptions</code> 配合启动，打印JVM的调试信息，每个Region里的对象存活信息。</li><li><code>-XX:G1ReservePercent</code> ：G1为了保留一些空间用于年代之间的提升，默认值是堆空间的10%。因为大量执行回收的地方在年轻代（存活时间较短），所以如果你的应用里面有比较大的堆内存空间、比较多的大对象存活，这里需要保留一些内存。</li><li><code>-XX:+G1SummarizeRSetStats</code> ：这也是一个VM的调试信息。如果启用，会在VM退出的时候打印出RSets的详细总结信息。如果启用 <code>-XX:G1SummaryRSetStatsPeriod</code> 参数，就会阶段性地打印RSets信息。</li><li><code>-XX:+G1TraceConcRefinement</code> ：这个也是一个VM的调试信息，如果启用，并行回收阶段的日志就会被详细打印出来。</li><li><code>-XX:+GCTimeRatio</code> ：大家知道，GC的有些阶段是需要Stop-the-World，即停止应用线程的。这个参数就是计算花在Java应用线程上和花在GC线程上的时间比率，默认是9，跟新生代内存的分配比例一致。这个参数主要的目的是让用户可以控制花在应用上的时间，同样的，G1应用线程和GC花费时间比例的计算公式为<code>1/(1+GCTimeRatio)</code>。这样如果参数设置为9，则最多10%的时间会花在GC工作上面。Parallel GC的默认值是99，表示1%的时间被用在GC上面，这是因为Parallel GC贯穿整个GC，而G1则根据Region来进行划分，不需要全局性扫描整个内存堆。</li></ul><blockquote><p>🤔思考，为什么G1会允许最多10%的时间会花在GC工作上面？这个值还会影响堆空间的大小，当超过预期的时间用在GC上时候，GC会通过适当扩大堆空间的方式来降低GC时间占比。从这个角度来看，G1相比之前的垃圾收集器，在堆扩大的策略上并没有那么激进的。这可能也得益于G1内存Region化的设计和可靠的暂停预测模型。</p></blockquote><ul><li><code>-XX:+UseStringDeduplication</code> ：手动开启Java String对象的去重工作，这个是JDK8u20版本之后新增的参数，主要用于相同String避免重复申请内存，节约Region的使用。</li><li><code>-XX:MaxGCPauseMills</code> ：预期G1每次执行GC操作的暂停时间，单位是毫秒，默认值是200毫秒， G1会尽量保证控制在这个范围内。 </li></ul><p>这里面最重要的参数，就是： </p><ol><li><code> -XX:+UseG1GC</code> ：启用G1 GC； </li><li><code>-XX:+InitiatingHeapOccupancyPercent</code> ：决定什么情况下发生G1 GC； </li><li><code>-XX:MaxGCPauseMills</code> ：期望每次GC暂定的时间，比如我们设置为50，则G1 GC会通过调节每次GC的操作时间，尽量让每次系统的GC停顿都在50上下浮动。如果某次GC时间超过50ms， 比如说100ms，那么系统会自动在后面动态调整GC行为，围绕50毫秒浮动。</li></ol><h2 id="GC选择经验"><a href="#GC选择经验" class="headerlink" title="GC选择经验"></a>GC选择经验</h2><table><thead><tr><th>收集器</th><th>串行、并行或并发</th><th>新生代/老年代</th><th>算法</th><th>目标</th><th>适用场景</th></tr></thead><tbody><tr><td>Serial</td><td>串行</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>单机CPU环境下的Client模式</td></tr><tr><td>Serial Old</td><td>串行</td><td>老年代</td><td>标记-整理</td><td>响应速度优先</td><td>单CPU环境下的Client模式、CMS的后预备方案</td></tr><tr><td>ParNew</td><td>并行</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>多CPU环境下在Server模式下配置CMS使用</td></tr><tr><td>Parallel Scavenge</td><td>并行</td><td>新生代</td><td>复制算法</td><td>吞吐量优先</td><td>在后台计算而不需要太多交互任务</td></tr><tr><td>Parallel Old</td><td>并行</td><td>老年代</td><td>标记-整理</td><td>吞吐量优先</td><td>在后台计算而不需要太多交互任务</td></tr><tr><td>CMS</td><td>并发</td><td>老年代</td><td>标记-清除</td><td>响应速度优先</td><td>集中在互联网或者B/S系统服务端上的Java应用</td></tr><tr><td>G1</td><td>并发</td><td>both</td><td>标记-清除+复制算法</td><td>响应速度优先</td><td>面向服务端应用，将来替换CMS</td></tr></tbody></table><p>综合的看下来，G1是HotSpot JVM 中最先进的<strong>准产品级（production-ready）</strong>垃圾收集器，并且HotSpot 工程师的主要精力都放在不断改进 G1 上，在更新的JDK版本中，将会带来更加强大的功能和优化。作为CMS的替代者，G1弥补了CMS中各种不足，包括暂停时间可预测，并彻底解决了堆内存的碎片化问题。<strong>对于单业务延迟非常敏感的系统来说，如果CPU资源不受限制，G1 是HotSpot 中最好的选择</strong>。当然这些优化和延迟也是要付出代价的。由于G1额外的写屏障和守护线程，G1运行也会消耗比其他垃圾收集器多得多的CPU和内存资源。因此在<strong>小内存，CPU资源比较宽裕，且服务响应速度优先</strong>的应用上，CMS是更好的选择。 </p><blockquote><p>G1 适合大内存，需要较低延迟的场景。</p></blockquote><p>具体场景适合什么样的垃圾收集器，只有尝试了才知道，但是并不是什么时候都能有试的机会，因此我们一般指导原则：</p><ul><li><strong>系统系统吞吐量优先，CPU资源能最大程度处理业务，选择ParallelGC。</strong></li><li><strong>如果系统低延迟优先，每次GC时间尽可能短，但配置资源有限，选择CMS GC。</strong></li><li><strong>如果系统内存大，同时追求整体GC时间可控，选择G1。</strong></li></ul><p>对于内存大小的考量：</p><ul><li>4G以上算比较大的，G1 性价比更高。</li><li>8G以上，非常推荐G1。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>垃圾收集器上篇我写了小两周终于是整理完了。在梳理之前我对CMS和G1内心都是很敬畏的，因为之前对他们的原理和实现的理解都是一知半解模棱两可的。在这次梳理的过程中，我也花了很大的篇幅在介绍说明CMS和G1的原理，我查了很多的资料学习CMS和G1的原理以及部分实现细节，收获非常多。回到总结上，这一小节我们介绍了经典的垃圾收集器，我们先从基础的 Serial（Serial + Serial Old）串行垃圾收集器，Parallel（Parallel Scavenge + Parallel Old）并行垃圾收集器开始，介绍了他们特性、优缺点和适用的场景。开胃菜结束后，我们开始梳理CMS，对CMS的回收过程进行了详细的分析，他们分别是初始标记、并发标记、并发预处理、可取消的并发预处理、最终标记、并发清除、并发重置这7个步骤，总结简化下来4个阶段分别是初始标记、并发标记、最终标记、并发清理。深入理解CMS垃圾收集器的回收流程为G1的回收流程的梳理打下铺垫。我们还介绍了CMS的几个缺点，分别是并发处理对资源敏感、会产生浮动垃圾、标记-清除算法会产生内存碎片。最后一道大菜介绍了我们的G1垃圾收集器，从CMS的痛点入手，分析梳理G1中的解决方案和G1的设计小目标—建立可靠预测暂停模型。随后我们顺着CMS的垃圾回收流程，过了一遍G1的垃圾收集流程，不难发现两者设计一脉相承大同小异。但是梳理了这么多“大”的知识点，没有细节总感觉少了些什么，随后我们梳理了一个细节：单个Region垃圾收集与内存分配的并发策略，来深入理解Region的垃圾回收过程。在G1的最后，我们列出了G1常用的参数以供各位朋友查询配置。在梳理完经典垃圾收集器之后，我们简单聊了聊GC的选择策略，吞吐量选择Parallel，低延迟但内存空间没那么大CMS，内存大GC时间可控选G1。这里插一嘴我个人的看法，我不是很喜欢CMS。它是对低延迟的垃圾收集器的一次成功尝试这不可否认，但是算不上一款成功的垃圾处理器。但是换一个角度想如果没有CMS的尝试，又怎会有后来大成者G1呢？🤔  </p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>深入理解 Java 虚拟机（第三版）</li><li>常用垃圾收集器的具体实现</li><li><a href="https://www.cnblogs.com/thisiswhy/p/12388638.html">面试官问我G1回收器怎么知道你是什么时候的垃圾？</a></li><li><a href="https://blog.csdn.net/h2604396739/article/details/107957569">G1详解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM GC篇 — 一般原理与垃圾收集算法</title>
    <link href="/2021/06/01/gc-basic/"/>
    <url>/2021/06/01/gc-basic/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都知道 Java 程序员不用像 C++ 程序员一样手动申请和释放对象空间，这是因为 JVM 垃圾回收器的存在。为什么需要垃圾回收呢？因为空间是有限的，而我们运行程序完成各种各样的计算需要申请空间。但是空间不是无限的，如果我们的空间不够申请怎么办？这个时候就要释放内存，删除掉一些不用的无效的空间，来腾出空间来创建我们需要的对象。这就像我们的衣柜一样，我们买衣服回来放在衣柜里面，但是衣柜不是无限大的，所以当衣柜放不下的时候，我们就要清理丢掉小了的或者我们不穿的衣服，这样为新的衣服腾出空间。Java 自带GC会自动清理内存空间，而C++这种没有GC的语言，就需要使用手动清理空间了。全自动不用程序员操心的确很好，如果放仍不管也会引起其他的问题，那么怎么清理起来才是正确且高效。这就是一个有意思的问题，这一小节我们将从 GC 的一般原理和垃圾回收算法开始，逐步展开 Java GC 的世界。</p><h2 id="GC一般原理"><a href="#GC一般原理" class="headerlink" title="GC一般原理"></a>GC一般原理</h2><h3 id="手动管理内存"><a href="#手动管理内存" class="headerlink" title="手动管理内存"></a>手动管理内存</h3><p>有C++编程经验或者了解计算机原理的同学很容易就能理解，<code>内存分配</code>和<code>内存释放</code>两个概念，计算机程序在执行过程中，需要有地方存放输入参数、中间变量以及运算结果。通过前面的学习我们知道，这些运行时数据都放在堆栈内存中，栈中的数据的空间会随着栈的创建分配，随着栈空间销毁而释放。但是如果业务处理代码中需要使用到堆内存，这个时候就要注意了。因为空间是有限的，所以使用完的空间要即时释放这样才不会造成内存溢出的问题。因此C++程序员需要手动调用方法完成内存空间的释放。这种内存管理方式我们称为<code>手动内存管理</code>。</p><p>这种管理方式的优点就是<code>简单且高效</code>，因为用完的空间能被立刻释放，直接提高内存空间的使用率。但是缺点也是很明显的，就是如果一旦操作的人多了，容易出现操作不统一，造成<code>内存资源抢占错误</code>或<code>内存错误释放</code>的问题。并且内存空间的管理难度是随着操作方数量地增加而直线上升。在大型复杂的项目中，多线程的内存操作是不避免的，因此手动内存管理的弊端被不断放大。 开发人员就想为什么不设计一个垃圾回收器自动的收集垃圾，这样既可以<strong>减少程序员代码量，也可以尽可能的避免内存溢出</strong>。因此GC顺势而来，其实GC的历史比 Java 还要久远，第一个带有动态分配和GC的语言并不是Java，1960年诞生的Lisp是第一门使用内存动态分配和垃圾收集的编程语言。</p><h3 id="对象已死？"><a href="#对象已死？" class="headerlink" title="对象已死？"></a>对象已死？</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>越是看起来简单的东西，计算机实现起来越是复杂。就比如这个例子，如果判断一个对象已经死亡了。开发小哥哥想到了一个好办法，这个对象我创建的不用了他就死亡了。但是这个方案放在GC上可行么？GC并不知道一个对象什么时候不会在被使用了，所以判断一个对象是否存活，这成为GC设计的第一个困难。遇到困难，正面面对。从对象的引用关系上下手我们很容易想到一个办法。<strong>先创建一个引用计数器，如果这个这个对象有个一地方引用了我们把引用计数器加一，如果不再引用了引用计数器减一</strong>。当某个对象的引用计数器为0的时候就意味着没有地方引用这个对象，即对象已经“死亡”了，可以进行垃圾回收了。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210529164736.png"></p><p>但是这个看似很完美的方案存在弊端嘛？没错就是<code>循环引用</code>的问题，上面这个图是一个对象引用，但是实际中我们创建的对象引用关系可比这个复杂多了。如果对象之间的相互引用，即便其他引用全部移除。引用计数器依旧不为0对象依旧无法回收。如下图其实对象1和对象2已经没有其他的引用了，并且这两个对象相互依赖可以直接进行垃圾回收，但是对象1和对象2的引用不为0，垃圾回收器判断他们还是“存活”状态，从而无法回收这两个对象。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210529171629.png"></p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>引用计数法，虽然乍一看还不错但是有一个很严重的问题<code>循环引用</code>，因此基于引用计数的方式并不准确。那么有没有一个准确且性能也不错的方法来判断对象存活呢？办法不是灵光一线蹦出来的，是基于现实的情况推敲出来的。我们在引用计数法遇到的问题是循环引用。那我们是否可以从对象间互相引用的角度来思考是否能判断对象是否存活呢？答案是可以的。可达性分析，我们可以通过一些列 <code>GC Roots</code>的<strong>根对象作为起始点集合，从这些起始点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某些对象不可达，则证明次对象是不可能在被使用的</strong>。通俗点来说就是通过从一个固定根节点然后遍历所有的关联对象的方式判断某一个对象是否存活。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210530002244.png"></p><p>其中GC Root 包含以下几种：</p><ul><li>在虚拟机栈（栈帧中的本地方法变量表）中引用的对象。</li><li>在方法区中类静态属性引用的对象，譬如Java类中引用类型静态变量。</li><li>在方法去中常量引用的对象，譬如字符串常量池（String table）里的引用。</li><li>在本地方法栈中 JNI（即通常所说的Native方法）引用对象。</li><li>Java 虚拟机内部的引用，如基本数据类型对应的 Class 对象，一些常驻的异常对象等，还有系统类加载器。</li><li>所有被同步锁（synchronzie关键字）持有对象。</li><li>反映Java虚拟机内部情况的 JMXBean，JVMTT中注册的回调、本地代码缓存等。</li></ul><p>除了这些固定的 GC Roots 集合以外，<strong>根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入</strong>，共同构成完整 GC Roots 集合。</p><h4 id="引用与对象生死"><a href="#引用与对象生死" class="headerlink" title="引用与对象生死"></a>引用与对象生死</h4><p>无论前面通过引用计数法判断对象引用数量，还是通过可达性分析算法判对象是否引用链可达来判断对象是否存活，这都和引用离不开关系，在<code>JDK1.2</code>之前的版本中，引用定义非常传统，<strong>如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称该 refrence 数据代表某块内存、某个对象的引用。</strong>这种定义并没有什么不对，但是现在看过于狭隘了。引用状态非黑即白，对于一个对象的描述只有两种状态即<code>被引用</code>和<code>未被引用</code>。如果是一种对象在内存充足的时候可以保留，但是在内存紧张的时候可以抛弃的对象，那么这种引用将很难描述，系统中很多缓存对象都符合这种场景。因此在<code>JDK1.2</code>之后，Java对引用的概念进行了扩充，将引用分为<code>强引用（Strongly Refrence）</code>、<code>软引用（Soft Refrence）</code>、<code>弱引用（Week Refrence）</code>、<code>虚引用（Phantom Refrence）</code>，这四种引用关系逐渐减弱。引用的定义通过这四种描述的补充，四种引用关系可以更好的描述引用，更好的协助垃圾回收器判断对象存活状态进行垃圾回收。其中引用与GC动作的描述如下：</p><ul><li><code>强引用</code>是最传统的“引用”的定义，指在程序代码之中普遍存在的引用赋值，<strong>这种引用关系下的对象无论在什么情况下都不会被垃圾回收器回收。</strong></li><li><code>软引用</code>是用来描述一些<code>还有用，但非必须</code>的对象。只被软引用关联着的对象，在系统发生<strong>内存溢出之前，会把这些对象列入到回收范围之中进行第二次回收</strong>。如果这次回收还没有足够的内存，才会抛出OOM异常，<code>JDK1.2版本之后</code>提供<code>SoftRefrence</code>类来实现软引用。 </li><li><code>弱引用</code>也是用来描述那些非必须对象，但是他的强度比软引用要更弱一些。<strong>被软引用关联的对象只能存活到下一次垃圾收集发生为止，不管当前内存是否足够都会被回收。</strong> <code>JDK1.2</code>版本之后提供<code>WeekRefence</code>类来实现弱引用。</li><li><code>虚引用</code>也称为“幽灵引用”和“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在<strong>完全不会对其生存时间构成影响</strong>，也无法通过虚引用来获取一个对象实例。为一个对象设置虚拟引用关联的唯一目的只是为了<strong>能在这个对象被回收时收到一个系统通知</strong>。在<code>JDK1.2</code>版本之后提供了<code>PhantomRefrence</code>类来实现虚引用。</li></ul><p>多种多样引用关系的衍生很像我们平时业务开发过程中，因为某种状态的局限性从而对其进行扩展。从原本的最基本的<code>被引用</code>，拓展为<code>强引用</code>、<code>软引用</code>、<code>弱引用</code>和<code>虚引用</code>四种形式。这四种引用影响垃圾回收器的行为，帮助其高效判断并回收垃圾，从而提高内存空间的利用效率。</p><table><thead><tr><th>引用类型</th><th>对垃圾回收器的影响</th><th>回收时机</th></tr></thead><tbody><tr><td>强引用（strongly refrence）</td><td>无论什么情况下都不会进行回收</td><td>不回收</td></tr><tr><td>软引用（soft refrence）</td><td>内存溢出之前，会把被该引用对象类如回收范围</td><td>内存溢出前回收</td></tr><tr><td>弱引用（week refrence）</td><td>被引用对象存活到下次垃圾回收为止</td><td>下一次垃圾回收时回收</td></tr><tr><td>虚引用（phantom refrence）</td><td>对被引用对象生命周期不产生影响，对象被回收时提供系统通知</td><td>无关联</td></tr></tbody></table><p>前面我们看过了对象的引用关系和引用关系对垃圾回收器的影响。细心的朋友应该发现了上面的引用关系是可达对象。那不可达对象怎么处理呢？直接回收吗？不是的。不可达对象会先被判<code>“死缓”</code>，待回收对象会先判断是否需要执行<code>finalize()</code>方法，如果对象没有重写finalize()方法或者已经执行过finalize()方法，都会视为<code>不需要执行</code>。如果需要执行，对象会被放入一个队列中，依次执行finalize()方法。在执行 finalize() 方法，对象还可以抢救下自己，<strong>只要重新和任何一个引用或者对象建立关联，那么这个对象就会被成功复活</strong>。但是如果在这个阶段没有“成功自救”那就真的被回收了。当然没有 finalize() 方法，那就会被直接被回收。finalize()看似是一个很棒的设计，但是这里也会产生很多的问题。可能会因为队列中对象不能即时处理造成对象没法回收从而造成OOM，甚至如果 finalize() 中有恶性循环，会导致整个内存回收子系统崩溃。<strong>finalize()方法自 JDK9 开始被废弃。</strong></p><blockquote><p>想要深入理解 finalize 机制的可以看这篇文章，虽然是全英文的但看起来压力并没有那么大 <a href="https://plumbr.io/blog/garbage-collection/debugging-to-understand-finalizer">debugging-to-understand-finalizer</a></p></blockquote><h4 id="并发的可达性分析"><a href="#并发的可达性分析" class="headerlink" title="并发的可达性分析"></a>并发的可达性分析</h4><p>很多东西沾上了并发，事情的复杂度也就上去了但是仔细梳理下来也没那么复杂。可达性分析算法理论上要求全过程都是基于能保证一致性的快照中才能进行分析的，这样就意味着需要STW，冻结所有应用线程。在枚举根节点因为GC Roots 是极少数，STW是能接受的。而堆整个堆进行可达性分析时 STW，对于并发的垃圾收集器来说是不能接受的。因此实现并发的可达性分析至关重要。可达性算法归根到底就是图的遍历，那么这个问题可以转化为，<strong>如果在引用处于变化状态下，完成基本准确的遍历。</strong>为什么是基本的呢？因为边是处于变化状态的，基本不可能标记出来的结果百分百准确。在这个场景中，我们要保证一个最基本的原则：<code>可以错标，但是不能漏标记</code>。<strong>如果错标也就会产生一些浮动垃圾，漏标就会导致对象消失会影响应用线程。</strong>那我们要怎么在引用变化的过程中进行动态标记呢？这里我们引入<code>三色标记（Tri-color Marking）</code>，在遍历对象图过程中遇到的对象，我们按照<strong>“是否访问过”</strong>这个条件标记成下面三种颜色。</p><ul><li><strong>白色：</strong>表示尚未被垃圾收集器标访问过。在标记开始时，所有的对象都是白色的，<strong>当标记结束时，如果对象还是白色的那表明对象不可达</strong>。</li><li><strong>黑色</strong>：表示对象已经被垃圾收集器访问过，并且每个这个对象的所有引用都已经扫描过了，如果一个对象是黑色的那它就是<strong>有效的可达对象。</strong>黑色对象不可能直接指向某个白色对象。所以黑色对象不需要重新扫描。</li><li><strong>灰色：</strong>表示对象已经被垃圾收集器扫描过，但是<strong>至少存在一个引用还没有被扫描过。</strong></li></ul><p>在引用关系不变化应用线程冻结的情况下，整个图遍历过程会由几个点开始，然后图会像水波纹一样各个节点从白变成黑。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210607223934.png"></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210607223854.png"> </p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210607224130.png"></p><p>上面这几张图是在应用线程停止的情况下，如果是在回收线程与应用线程并发，应用线程不断的修改引用关系的情况下，会发生什么情况呢？就像上面我们提到的，我们可以容忍少量的错标（<strong>原本应该回收的对象，但是标记成了黑色</strong>）但不可以容忍漏标（<strong>原本不该被回收的对象，因为没有标记上黑色而被回收</strong>）。来我们一起看看下面两个漏标的情况。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210607230158.png"></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210607230554.png"></p><p>通过上面的图我们不难发现两种情况都有一个相同问题：<strong>删除了灰色对象到某个白色对象之间的所有引用，并且同时一个标记过的黑色对象指向了这个白色或者这个白色对象所在链上的白色对象</strong>，归纳下来就是两个相同的动作：</p><ul><li><code>赋值器插入了一条或多条从黑色对象到白色对象的新引用。</code></li><li><code>赋值器删除了全部从灰色对象到该白色对象的直接或者间接引用。</code></li></ul><p>当这两个条件同时成立时候，就会产生消失对象。所以只要能破坏两个当中的一个条件问题就解决了。那解决方案有下面两个：</p><ol><li><code>增量更新（Increment Update）</code>：破坏第一个条件，如果发现有从黑色对象指向白色对象的引用，那么就把这个这个引用记录下来，在最后标记STW的时候，以黑色对象为根重新标记一遍，<strong>简单来说就是，黑色对象一旦新插入了白色对象的引用，那么就把这个黑色对象变成灰色，最后在遍历一次。CMS采用的就是这种方式。</strong></li><li><code>原始快照（Snapshot At The Beginning， SATB）</code>：破坏第二个条件，如果发现灰色对象删除指向白色对象的引用，就把这个引用记录下来，并且在最后标记的时候，以当时的灰色对象为根，按照原来的引用关系再标记一次。<strong>简单来说，无论引用关系是否删除，就按照刚开始扫描那一刻的快照进行遍历，G1 采用的是这种方式。</strong></li></ol><blockquote><p>我之前一直在思考一个问题，新分配或新创建的对象怎么办？CMS中在并发标记时候，新晋升的对象刚进入老年代一定是白的，这怎么处理？后来我发现在并发预处理（Concurrent perclean）阶段，会标记一遍晋升对象。G1 的话则采用TAMS（Top at Mark Start）技术默认标记新分配的对象。这样就不会漏标新对象了。</p></blockquote><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p>我们都知道我们对象实例是分配在堆空间中是一块连续的内存，我们会在在创建内存的时候都是在堆空间上分配一个块内存。由于实际情况的不同，每个实例对象的生命周期都不一样。有的对象可能刚分配使用完成就会被回收，有的可能会存在很长一段时间。这样垃圾回收器多次工作下来内存中可能存在多个内存间隙而导致新的对象无法继续分配。这明显不能充分利用有限的堆内存空间装尽可能多的对象。如果将一块完整的堆内存空间切分成多个逻辑空间，每个空间放生命周期不一样的对象，在每个逻辑空间使用不一样的收集策略是否就能尽可能的提高空间的使用率呢？当然是可以的，我们一起往下看。</p><h3 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h3><p>当前商业虚拟机的垃圾收集器，大多数都遵循了“分代收集”（Generational Collection） 的理论进行设计，分代收集虽然是理论，但是实质上是一套符合大多数程序实际运行情况的经验法则，它建立在两代假说的基础之上：</p><ol><li>弱分代假说（Week Generational Hyoothesis）：绝大多数对象那个都是朝生夕灭的。</li><li>强分代假说（Strong Generational Hyoothesis）：熬过多次垃圾回收过程的对象就越难消亡。</li></ol><p>这两个分代假说共同奠定了多款常用的垃圾回收器的一致设计原则：<strong>收集器应该将 Java 划分出不同的区域，然后将回收对象依据其年龄（即熬过的垃圾回收过程的次数）分配到不同的区域之中存储。</strong></p><h3 id="内存区域的划分"><a href="#内存区域的划分" class="headerlink" title="内存区域的划分"></a>内存区域的划分</h3><p>内存的划分也不是一蹴而就的也是慢慢发展来的，在前面的介绍Java 内存结构的小节中我们也简单的介绍了堆中的逻辑划分，这里我们展开聊聊这样划分背后的设计。根据前面的分代收集理论可以按照对象生命周期，将堆空间划分为<code>生命周期短</code>和<code>生命周期长</code>的区域即<code>年轻代</code>和<code>老年代</code>。其中为了更好的提升垃圾回收效率<code>年轻代</code>还划分为<code>伊甸区</code> 和 <code>存活区</code>。为了避免在分配内存空间时线程之间的竞争，伊甸区域为每个线程分配一小块内存空间，确保在线程并发创建对象时空间上的竞争这就是<code>TLAB</code>（Thread Local Allocation Buffer）。大致的内存区域划分图如下。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210530222916.png"></p><h4 id="新生代（Eden-Space）"><a href="#新生代（Eden-Space）" class="headerlink" title="新生代（Eden Space）"></a>新生代（Eden Space）</h4><p>Eden Space，也叫做<code>伊甸区</code>，是内存中的一个区域，用来分配新的对象，通常会有多个线程同时创建多个对象，所以 Eden 区被划分为多个<strong>线程本地分配缓冲区</strong>（Thread Local Allocation Buffer, 简称 TLAB）。通过这种缓冲区划分，大部分对象直接由JVM在对应线程的 TLAB 中分配，避免与其他线程同步操作。如果 TLAB 中没有足够的内存空间，就会在共享 Eden 区（Shared Eden Space）之中进行分配。如果共享的 Eden 区，也没有足够的空间，就会触发一次年轻代的 GC 来释放内存空间，如果 GC 之后 Eden 区依旧没有足够的内存空间，则对象就会被分配到老年代空间（Old Generation）。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210531211459.png"></p><p>当 Eden 区进行垃圾回收的时候，GC 将从 GC Roots 开始把所有的关联的对象都过一遍，并标记为存活对象。<strong>标记完成后会将所有存活的对象都会被复制到存活区（Survivor spaces）</strong>，这个时候就可以认为Eden区域是空的，就可以重新进行对象的分配，这个算法叫做<code>标记复制算法</code>（Mark and Copy）。</p><h4 id="存活区（Survivor-spaces）"><a href="#存活区（Survivor-spaces）" class="headerlink" title="存活区（Survivor spaces）"></a>存活区（Survivor spaces）</h4><p>Eden区旁边两个就是存活区（Survivor space），成为 <code>from空间</code>和 <code>to空间</code>。需要着重强调的是任意一个时刻总有一个存活区是<code>空的（Empty）都是to空间</code>。每次的年轻代的 GC <strong>都会把from区中的存活对象和Eden区中的存活对象复制到</strong><code>to区</code>中，from和to角色切换from变成to，to变成from。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210530235921.png"></p><p>存活的对象会在存活区中来回复制。<strong>复制一次对象存活年龄+1</strong>，按照强分代假设，存活超过一定时间的对象很可能会存活更长时间。这类对象当存活年龄超过<code>当年龄超过提升阈值(tenuring threshold)</code>，就会被<code>提升（Promotion）</code>至老年代区域。当然这个阈值参数是可以调整的，可以通过参数 <code>-XX:+MaxTenuringThreshold</code> 来指定上限。如果设置 <code>-XX:+MaxTenuringThreshold=0</code>，对象不会在存活区之间复制会直接提升到老年代。JVM 中这个阈值的默认值是<code>15个GC周期</code>，如果存活区空间不够存放对象，<code>提升（Promotion）</code>也可能更早地执行。其中<strong>存活区和Eden区的默认比例是 1 : 1 : 8 。</strong></p><h4 id="老年代（Old-Gen）"><a href="#老年代（Old-Gen）" class="headerlink" title="老年代（Old Gen）"></a>老年代（Old Gen）</h4><p>老年代的GC实现要复杂得多。<strong>老年代的内存空间通常会更大，里面的产生垃圾对象的概率也更小，老年代GC发生的频率比年轻代小很多</strong>。同时，因为预期老年代的对象大部分都是存活的，所以不再使用标记和复制（Mark and Copy）算法。而是采用移动对象的方式来实现最小内存碎片。老年代空间的清理算法通常是建立在不同的基础上的。原则上执行以下这些步骤：</p><ul><li>通过标志位（marked bit），标记所有通过 GC Roots 可达对象；</li><li>删除不可达对象；</li><li>整理老年代空间中的内容，方法是所有的存活对象复制，从老年代空间开始的地方依次存放。</li></ul><p>通过上面的描述可知，<strong>老年代GC必须明确地进行整理，以避免内存碎片过多</strong>。这也是<code>标记整理算法</code>。</p><h4 id="永久代（Perm-Gen）"><a href="#永久代（Perm-Gen）" class="headerlink" title="永久代（Perm Gen）"></a>永久代（Perm Gen）</h4><p>在 Java8 之前有一个很特殊的空间，称为“永久代”（Permanent Generation）。这里存储数据（metadata）的地方，比如 class 信息等。此外，这个区域中也保存有其他的数据和信息。包括内部化的字符串（internalized strings）等等。实际上这块内存区域给开发这造成很多的麻烦，因为<strong>很难去计算这块区域到底需要占用多少的空间</strong>，预测失败的结果就是产生<code>java.lang.OutOfMemoryError: Permgen space</code> 这种形式的错误。除非<code>OutOfMemoryError</code> 确实是内存泄漏导致的，否则只能增加 permgen 的大小。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-XX:MaxPermSize=<span class="hljs-number">256</span>m <span class="hljs-regexp">//</span>permGen 大小设置为<span class="hljs-number">256</span>m，容易发生oom<br></code></pre></td></tr></table></figure><h4 id="元数据区（MataSpace）"><a href="#元数据区（MataSpace）" class="headerlink" title="元数据区（MataSpace）"></a>元数据区（MataSpace）</h4><p>既然估算PermGen需要的空间那么复杂，Java8中索性直接删除了永久代（Permanent Generation）改用<code>MetaSpace</code>他俩本质上还是相同的。从此以后，Java 中很多杂七杂八的东西都放在普通的堆内存中。当然，像类定义（class definitions）之类的信息还是会被加载到 MetaSpace 中。<strong>元数据区域位于本地内存（native memory）</strong>，不再影响到普通的Java对象。<code>默认情况下，MetaSpace 的大小只受限于 Java 进程可用的本地内存。</code>这样的话就避免了 PermGen 因为预测不准确而OOM的尴尬了。但是自由也不是没有限制的，如果 MetaSpace 无限扩张失控，则可能会导致严重的程序性能问题，或者导致本地内存分配失败。为了避免这种事的发生我们还是要限制 MetaSpace 的大小。我们可以通过下面的方式限制其大小。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-XX:MaxMetaspaceSize=<span class="hljs-number">512</span>m <span class="hljs-regexp">//</span> 设置metaSpace空间大小为<span class="hljs-number">512</span>m<br></code></pre></td></tr></table></figure><h3 id="垃圾收集算法设计与应用"><a href="#垃圾收集算法设计与应用" class="headerlink" title="垃圾收集算法设计与应用"></a>垃圾收集算法设计与应用</h3><p>前面讲了很多的东西都是铺垫，但是空中楼阁不可能腾空而起，没有绿叶又哪来鲜花。我们来一起鸟瞰全局体会垃圾回收算法在设计的精妙之处。我们通过前面的梳理，我们对堆空间进行了逻辑上的划分，分成了<code>年轻代</code>和<code>老年代</code>，而年轻代存放的都是朝生夕死的对象。老年代则存放一些不容易被清理掉生命周期长的对象。年轻代又有两个幸存区配合垃圾回收，我们已经知道了我们内存布局了。接下来我们试着进行垃圾回收。首先我们要标记出已经“死亡”的对象，通过可达性算法分析我们很清楚标记出来的就是不可达的对象。年轻代和老年代根据我们清理目标空间的需要进行标记。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210530223844.png"></p><p>这个标记的过程中，即需要暂停所有应用线程以遍历所有对象的引用关系，因为我们无法追踪不断发生变化的引用关系。等确定这些引用关系后，应用线程又能继续执行。这个暂停的过程叫做<code>Stop The World pause（全线程暂停）</code>，简称为<code>STW</code>。线程也不可能在执行的过程中突然停下来，而是需要运行可以安全停下来的点，这些可以停下来的地方叫做<code>安全点（safe point）</code>，然后标记完成后 JVM 就可以安心处理垃圾了。</p><p>这里有一个有意思的问题：<strong>如果一个新生代的对象有且只被一个老年代的对象引用，我们在年轻代进行GC时，我们该怎么判断该对象是存活的？</strong></p><p>如果我们仅仅扫描年轻代，这个对象一定是一个不可达对象，因为它被有且仅被一个老年代对象引用。难道我们进行一次年轻代GC连老年代也要扫一遍？如果扫，时间消耗太大，不扫，一定会出现这种误判的情况。那该怎么办？我们可以通过<code>找脏卡</code>的方式解决这个问题。什么是脏卡？这是 HotSpot 中一项叫卡表（card table）的技术中的一个名词。该技术<strong>将整个堆划分为一个个大小为 512 字节的卡</strong>，并且维护一个卡表，用来存储每张卡的一个标识位。这个标识位代表对应的卡<strong>是否可能存有指向新生代对象的引用</strong>。如果可能存在，那么我们就认为这张卡是<strong>脏</strong>的<strong>。在进行年轻代GC的时候，我们便可以</strong>不用扫描整个老年代，而是在卡表中寻找脏卡<strong>，并将脏卡中的对象加入到年轻代GC的 GC Roots 里</strong>。<strong>当完成所有</strong>脏卡的扫描之后<strong>，Java 虚拟机便会将所有脏卡的标识位清零</strong>。由于年轻代GC伴随着存活对象的复制，而复制需要更新指向该对象的引用。因此，<strong>在更新引用的同时，我们又会设置引用所在的卡的标识位</strong>。这个时候，我们可以确保脏卡中必定包含指向新生代对象的引用。</p><blockquote><p>脏卡是包含指向新生代引用的卡，年轻代GC，不扫描老年代而是寻找脏卡并加入到年轻代GC Roots中，扫描完脏卡后表示位即脏卡去脏，复制算法后存活对象地址变化，重新老年代中引用变化是同时设置脏卡标志。这个过程随着GC周期不断循环下去。</p></blockquote><h4 id="标记-清除算法（Mark-and-Sweep）"><a href="#标记-清除算法（Mark-and-Sweep）" class="headerlink" title="标记-清除算法（Mark and Sweep）"></a>标记-清除算法（Mark and Sweep）</h4><p>标记完成后我们进行简单的清理可以得到类似下面的图。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210531231800.png"></p><p>可以看到上面图中，在一段连续的内存空间中，我们依次有<code>obj1到obj6</code>这6个对象。这6个对象之间不一定是紧紧靠在一起的，而是部分对象之间是有“间隙”的。在可达性分析算法标记过后，我们发现 obj1，obj2, obj5为对象不可达即“死亡对象”。然后我们对这死亡的对象进行清理。清理完成后就得到了下面这个图（这里不考虑 finalize() 方法对垃圾回收过程产生的影响）。这个其实就是垃圾回收算法中的<code>标记-清除算法（Mark and Sweep）</code> ，这个过程很简单简单分成下面两步：</p><ul><li><strong>通过可达性算法标记出不可达对象即“死亡对象”。</strong></li><li><strong>“清理”不可达对象。</strong></li></ul><p>这里有一个细节，这里的“清理”并不是真正的清理，而是<strong>将死亡对象的内存空间地址记录到空闲表（free-list）上，然后直接使用这块空间进行空间分配。</strong></p><h4 id="清理过程中的一个小问题"><a href="#清理过程中的一个小问题" class="headerlink" title="清理过程中的一个小问题"></a>清理过程中的一个小问题</h4><p>不知道你有没有发现一个问题，这里的空间内存虽然是记录在空闲表<code>free-list</code>上，但是新来一个对象可能不一定能分配的了。因为这个空间不是连续的，来一个对象可能比空间表 free-list 上所有的空闲空间都要大，但是所有的空闲空间加在一起又完全足够让这个对象进行分配，这个问题是不是就很难受？别急还有更难受的，别忘了我们可以通过GC也就是上面这个过程释放空间，GC完成后很顺利，刚好有一个对象被释放，一段连续的内存刚好够放下这个对象。我们放松一口气。这时又来了一个对象，这个对象和上一个对象遇到了同样的问题，这是我们该怎么办？GC？这时刚GC完成，应该是没有空间可以释放的，报OOM让程序员小哥哥解决？明明我们还有空间啊，只不过都是不连续的碎片空间。我们在这个场景中遇到的小问题就是<strong>因为标记清除算法在清除完毕后不对空间进行整理，导致GC之后产生很多的不连续的碎片空间，这些碎片空间无法进行空间分配从而导致OOM的发生。</strong>我们该怎么解决这个办法呢？</p><h4 id="标记-清除-整理算法（Mark-Sweep-Compact）"><a href="#标记-清除-整理算法（Mark-Sweep-Compact）" class="headerlink" title="标记-清除-整理算法（Mark-Sweep-Compact）"></a>标记-清除-整理算法（Mark-Sweep-Compact）</h4><p>面对上面的问题其实最简单的办法就是在清理完成后我们整理下内存空间，把还存活的对象再次排好。有了整理部分的加入后上面的过程变成下面这样：</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210531235410.png"></p><p>这个算法就是垃圾回收算法中的<code>标记-清除-整理算法（Mark-Sweep-Compact）</code>也称作 <code>Compact压缩算法</code>。压缩算法分为下面三步，其中前面两步和标记-清除算法一致。</p><ul><li><strong>通过可达性算法标记出不可达对象即“死亡对象”。</strong></li><li><strong>“清理”不可达对象。</strong></li><li><strong>整理压缩对象空间。</strong></li></ul><p>这个方案很完美，因为这个相较于标记-清理算法多了一步，这一步虽然压缩了对象，空闲空间也变成<strong>连续的空间提升了空间的利用率</strong>。但是多这一步的操作也为<strong>增加了</strong>每次GC复杂度<strong>增加每次的GC耗时。而老年代对象基本上都是存活对象且空间更大，发生GC的概率更低</strong>，因此<strong>压缩算法更多的用在了老年代。</strong></p><h4 id="复制算法（Copying）"><a href="#复制算法（Copying）" class="headerlink" title="复制算法（Copying）"></a>复制算法（Copying）</h4><p>上面的压缩算法的弊端是整理空间增加了GC的时间复杂度，有没有优化的方案呢？有的，在算法中我们经常会使用空间换时间的思想增加程序的空间复杂度来降低时间复杂度。这里我们可以直接<strong>将所有的存活对象复制另外一个内存空间中，原本的内存空间直接清空</strong>。复制过去的对象内存空间是连续的，我们还可以在新空出来的空间分配对象，这个复制过去的目标空间就是我们前面提到的<code>存活区（Survivor space）</code>，这个GC算法也就是我们前面提到的<code>标记复制算法</code>（Mark and Copy）</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210530235921.png"></p><p>在实际使用中配合新生代Eden区和来回复制的两个Survivor存活区，实现高效的复制算法。因此复制算法分为以下三步：</p><ul><li><strong>通过可达性算法标记出不可达对象即“死亡对象”。</strong></li><li><strong>复制存活对象到Survivor的to区。</strong></li><li><strong>清空Eden区和Survivor的from区，并且from和to区对换。（逻辑上的清空和对换）</strong></li></ul><p>复制算法的时间复杂度要明显优于压缩算法，因此复制算法更加适合“节奏更快”的年轻代。<strong>复制算法是运用在年轻代的GC算法。</strong></p><blockquote><p>新生代发生的GC 我们一般成为<code>MinorGC</code>或者<code>YoungGC</code>，老年代发生的GC我们一般称为<code>MajorGC</code>或<code>OldGC</code>，而<code>FullGC</code>则是老年代和新生代都触发的GC。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一小节我们从最原始的手动管理内存开始，简单分析其利弊之后，我们逐步开始走向自动的垃圾回收机制，第一个垃圾回收机器并不是诞生在Java语言上，在进行垃圾回收之前我们要做的第一件事不是清理回收，而是判断一个对象是“活着”还是已经“死亡”。这里我们简单介绍了引用计数法。在用计数法解决不了循环引用之后，我们介绍了可达性分析算法，通过一些列GC Roots 判断某个对象是否可达从而判断这个对象是否存活。为了更好的进行垃圾回收，引用的两种状态引用和被引用显然不能很好的描述引用的类型状态，因此我们引入了强引用、软引用、弱引用和虚引用，顺便提了这几种引用对垃圾回收器行为的影响。接下来我们进入垃圾回收算法，在正式介绍算法之前我们聊了聊分代收集理论。为了更高效的进行垃圾回收，JVM依据对象的“存活时间”的长短，分为年轻代、老年代和永生代以及后续替代永生代的元数据区。并为了更好的配合垃圾回收器的工作又将年轻代切分成新生代和存活代。最后我们结合图文简单介绍标记清除、标记整理（压缩算法）和复制算法。简单明了的说明了各种算法的特点和工作的内存区域。我们还提到了一些细节不要忘了哦，我们即将被淘汰的 finalize() 方法对垃圾回收的一丢丢影响和即将在垃圾回收器中大放异彩的卡表设计。</p><p>今天这小节内容很基础但是梳理下来真的很多也画了不少图，按照自己的逻辑走一遍下来真的透彻了很多。九层之台，起于累土。加油～。</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>极客时间专栏《深入理解 Java 虚拟机—垃圾回收（上）》</li><li>极客时间专栏《深入理解 Java 虚拟机—垃圾回收（下）》</li><li>常见的的GC算法（GC的背景与原理）</li><li>深入理解 Java 虚拟机（第三版）</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM 监控与诊断工具</title>
    <link href="/2021/05/26/jvm-monitor-tool/"/>
    <url>/2021/05/26/jvm-monitor-tool/</url>
    
    <content type="html"><![CDATA[<blockquote><p>😏 前方多图多代码块预警！！！</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 虚拟机是一个复杂的系统，如果这个复杂的系统是一个黑盒子，那一旦出现了问题那将是非常棘手的，我们将没有任何的方式方法来定位问题，这是不可接受的。因此 JDK 内置了很多的工具去诊断分析问题，这里面不仅包括一些命令行工具还有一些图形化工具，比如命令行有常见的 <code>jps</code>、<code>jinfo</code>、<code>jstat</code>、<code>jmap</code>等，图形化工具也有 <code>jconsole</code>、<code>jvisualvm</code>、<code>jmc</code>等。当然实际上生产上这类工具用的还是比较少的。这些工具了就好比是菜刀队了，而正常情况下我们定位问题都是有机枪大炮的。在工具完备准备充分的情况下，我们通常会使用 Prometheus 配上集成可视化工具 Grafana 或 DataDog。出现问题之后，会使用一些分析工具，如 <code>Eclipse MAT</code>再结合一些在线工具进行数据分析如 GCEasy 和 FastThread。</p><h2 id="为什么需要监控，监控的又是什么？"><a href="#为什么需要监控，监控的又是什么？" class="headerlink" title="为什么需要监控，监控的又是什么？"></a>为什么需要监控，监控的又是什么？</h2><p>我们的重要工作之一就是要保证我们写出来的程序是正确的且健壮的，不能因为一些小小的问题代码就变得不可用，这是不能接受的。但是我们如何发现我们的系统出现了异样呢？很简单就是监控它，类比到人类世界，就是我们的小区保安是如何增强我们的安全感的呢？也是通过监控的手段，只不过保安监控的是小区内部的情况，而我们监控的是JVM的运行指标。这些指标包括一些常见的运行时数据，比如我们前面提到的堆栈的占用数据，以及我们后面会提到的GC有关数据，当然还有我们服务器本身的内存和 CPU 负载情况等。只有有了这些数据，我们才能还原异常情况发生时的系统环境。这就是像是还原凶杀现场一样刺激。分享一个真实的案例，我们公司之前的系统是没有监控的，所有的服务就是一个单体系统并且整体代码质量也不高，有一次上线一个版本然后第二天下午业务高峰的时候，JVM 突然开始宕机所有服务全部挂掉。当时我们是单体服务，JVM 也没有配置任何的可以导出堆栈信息的JVM参数，但是业务是在高峰期不能停，所以我们只有重启，重启完过了10分钟继续挂掉，然后接着重启，服务长时间处于不可用状态。这就像是凶案现场凶手作案后，凶杀现场却一丝痕迹都没留下，不仅杀伤力巨大而且侮辱性极强。 所以再回到这个问题上来，为什么需要监控，<code>因为我们要保证系统的稳定运行、需要对系统进行性能分析、需要在系统出现异常时保留足够的信息，系统的监控必不可少。</code></p><h2 id="JDK-内置工具"><a href="#JDK-内置工具" class="headerlink" title="JDK 内置工具"></a>JDK 内置工具</h2><p>我们这里主要要监控的是JVM，虽然一般第一直觉想到的都是一些高大上的监控工具，但是JDK本身也提供了很多的工具。这里面不仅有命令行工具还有一些图形化工具。</p><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><blockquote><p>以下的测试全部基于 jdk11 输出结果，测试使用 jdk8 时基本全部翻车。</p></blockquote><h4 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h4><p>jps 查看当前系统中的 Java 进程。这个命令存在用户权限隔离，也就是 root 用户能看到所有的 Java 进程，其他的用户只能看到自己的 Java 的进程。这里可以看到我启动了 HelloServer 和 CxfDemoApplication 其中前面的数字 5455 和 5350 是他们的<code>pid</code>。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">daiwei@daiweideMacBook-Pro ~ % jps -help<br>usage: jps [-help]<br>       jps [-q] [-mlvV] <span class="hljs-meta">[&lt;hostid&gt;]</span><br><br>Definitions:<br>    &lt;hostid&gt;:      &lt;hostname&gt;[:&lt;port&gt;]<br>    <br>daiwei@daiweideMacBook-Pro ~ % jps<br><span class="hljs-number">5780</span> Jps<br><span class="hljs-number">5350</span> CxfDemoApplication<br><span class="hljs-number">1560</span> RemoteMavenServer36<br><span class="hljs-number">394</span><br><span class="hljs-number">5454</span> Launcher<br><span class="hljs-number">5455</span> HelloServer<br></code></pre></td></tr></table></figure><h4 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h4><p>这个命令的全程是 Java Configuration Info，所以它的主要作用是实时查看和调整JVM配置参数。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs gradle">daiwei@daiweideMacBook-Pro ~ % jinfo -help<br>Usage:<br>    jinfo [option] &lt;pid&gt;<br>        (to connect to running process)<br>    jinfo [option] &lt;executable &lt;core&gt;<br>        (to connect to a core <span class="hljs-keyword">file</span>)<br>    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;<br>        (to connect to remote debug server)<br><br>where &lt;option&gt; is one of:<br>    -flag &lt;name&gt;         to <span class="hljs-keyword">print</span> the value of the named VM flag<br>    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag<br>    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value<br>    -flags               to <span class="hljs-keyword">print</span> VM flags<br>    -sysprops            to <span class="hljs-keyword">print</span> Java system properties<br>    &lt;no option&gt;          to <span class="hljs-keyword">print</span> both of the above<br>    -h | -help           to <span class="hljs-keyword">print</span> <span class="hljs-keyword">this</span> help message<br>daiwei@daiweideMacBook-Pro ~ % jinfo -flalgs <span class="hljs-number">8386</span><br>Java System Properties:<br>#Thu May <span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">25</span>:<span class="hljs-number">31</span> CST <span class="hljs-number">2021</span><br>java.<span class="hljs-keyword">runtime</span>.name=Java(TM) SE <span class="hljs-keyword">Runtime</span> Environment<br>sun.boot.library.path=<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<br>java.vm.version=<span class="hljs-number">25.231</span>-b11<br>gopherProxySet=<span class="hljs-keyword">false</span><br>java.vm.vendor=Oracle Corporation<br>java.vendor.url=http\:<span class="hljs-comment">//java.oracle.com/</span><br>path.separator=\:<br>java.vm.name=Java HotSpot(TM) <span class="hljs-number">64</span>-Bit Server VM<br><span class="hljs-keyword">file</span>.encoding.pkg=sun.io<br>user.country=CN<br>sun.java.launcher=SUN_STANDARD<br>sun.os.patch.level=unknown<br>java.vm.specification.name=Java Virtual Machine Specification<br>user.dir=<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/github/</span>thinking-in-code<br>java.<span class="hljs-keyword">runtime</span>.version=<span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>_231-b11<br>java.awt.graphicsenv=sun.awt.CGraphicsEnvironment<br>java.endorsed.dirs=<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib/endorsed<br>os.arch=x86_64<br>java.io.tmpdir=<span class="hljs-regexp">/var/</span>folders<span class="hljs-regexp">/4_/</span>dbqw6z6100535snfk5508v080000gn<span class="hljs-regexp">/T/</span><br>line.separator=\n<br>java.vm.specification.vendor=Oracle Corporation<br>os.name=Mac OS X<br>sun.jnu.encoding=UTF-<span class="hljs-number">8</span><br>java.library.path=<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/Extensions\:/</span>Library<span class="hljs-regexp">/Java/</span>Extensions\:<span class="hljs-regexp">/Network/</span>Library<span class="hljs-regexp">/Java/</span>Extensions\:<span class="hljs-regexp">/System/</span>Library<span class="hljs-regexp">/Java/</span>Extensions\:<span class="hljs-regexp">/usr/</span>lib/java\:.<br>sun.nio.ch.bugLevel=<br>java.specification.name=Java Platform API Specification<br>java.<span class="hljs-keyword">class</span>.version=<span class="hljs-number">52.0</span><br>sun.management.compiler=HotSpot <span class="hljs-number">64</span>-Bit Tiered Compilers<br>os.version=<span class="hljs-number">10.16</span><br>user.home=<span class="hljs-regexp">/Users/</span>daiwei<br>user.timezone=Asia/Shanghai<br>java.awt.printerjob=sun.lwawt.macosx.CPrinterJob<br><span class="hljs-keyword">file</span>.encoding=UTF-<span class="hljs-number">8</span><br>java.specification.version=<span class="hljs-number">1.8</span><br>java.<span class="hljs-keyword">class</span>.path=<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/charsets.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>deploy.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>cldrdata.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>dnsns.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>jaccess.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>jfxrt.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>localedata.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>nashorn.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>sunec.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>sunjce_provider.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>sunpkcs11.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>zipfs.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/javaws.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>jce.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/jfr.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>jfxswt.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/jsse.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/m</span>anagement-agent.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/plugin.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>resources.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/rt.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>lib<span class="hljs-regexp">/ant-javafx.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>lib<span class="hljs-regexp">/dt.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>lib<span class="hljs-regexp">/javafx-mx.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>lib<span class="hljs-regexp">/jconsole.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>lib<span class="hljs-regexp">/packager.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>lib<span class="hljs-regexp">/sa-jdi.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>lib<span class="hljs-regexp">/tools.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/gi</span>thub<span class="hljs-regexp">/thinking-in-code/</span>thinking-in-grpc<span class="hljs-regexp">/target/</span>classes\:<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/.m2/</span>repository<span class="hljs-regexp">/io/g</span>rpc<span class="hljs-regexp">/grpc-netty-shaded/</span><span class="hljs-number">1.34</span>.<span class="hljs-number">1</span><span class="hljs-regexp">/grpc-netty-shaded-1.34.1.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/</span>.m2<span class="hljs-regexp">/repository/i</span>o<span class="hljs-regexp">/grpc/g</span>rpc-core<span class="hljs-regexp">/1.34.1/g</span>rpc-core-<span class="hljs-number">1.34</span>.<span class="hljs-number">1</span>.jar\:<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/.m2/</span>repository<span class="hljs-regexp">/com/g</span>oogle<span class="hljs-regexp">/android/</span>annotations<span class="hljs-regexp">/4.1.1.4/</span>annotations-<span class="hljs-number">4.1</span>.<span class="hljs-number">1.4</span>.jar\:<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/.m2/</span>repository<span class="hljs-regexp">/io/</span>perfmark<span class="hljs-regexp">/perfmark-api/</span><span class="hljs-number">0.19</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/perfmark-api-0.19.0.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/</span>.m2<span class="hljs-regexp">/repository/i</span>o<span class="hljs-regexp">/grpc/g</span>rpc-protobuf<span class="hljs-regexp">/1.34.1/g</span>rpc-protobuf-<span class="hljs-number">1.34</span>.<span class="hljs-number">1</span>.jar\:<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/.m2/</span>repository<span class="hljs-regexp">/io/g</span>rpc<span class="hljs-regexp">/grpc-api/</span><span class="hljs-number">1.34</span>.<span class="hljs-number">1</span><span class="hljs-regexp">/grpc-api-1.34.1.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/</span>.m2<span class="hljs-regexp">/repository/i</span>o<span class="hljs-regexp">/grpc/g</span>rpc-context<span class="hljs-regexp">/1.34.1/g</span>rpc-context-<span class="hljs-number">1.34</span>.<span class="hljs-number">1</span>.jar\:<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/.m2/</span>repository<span class="hljs-regexp">/com/g</span>oogle<span class="hljs-regexp">/code/</span>findbugs<span class="hljs-regexp">/jsr305/</span><span class="hljs-number">3.0</span>.<span class="hljs-number">2</span><span class="hljs-regexp">/jsr305-3.0.2.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/</span>.m2<span class="hljs-regexp">/repository/</span>com<span class="hljs-regexp">/google/</span>protobuf<span class="hljs-regexp">/protobuf-java/</span><span class="hljs-number">3.14</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/protobuf-java-3.14.0.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/</span>.m2<span class="hljs-regexp">/repository/</span>com<span class="hljs-regexp">/google/</span>api<span class="hljs-regexp">/grpc/</span>proto-google-common-protos<span class="hljs-regexp">/1.17.0/</span>proto-google-common-protos-<span class="hljs-number">1.17</span>.<span class="hljs-number">0</span>.jar\:<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/.m2/</span>repository<span class="hljs-regexp">/io/g</span>rpc<span class="hljs-regexp">/grpc-protobuf-lite/</span><span class="hljs-number">1.34</span>.<span class="hljs-number">1</span><span class="hljs-regexp">/grpc-protobuf-lite-1.34.1.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/</span>.m2<span class="hljs-regexp">/repository/</span>com<span class="hljs-regexp">/google/gu</span>ava<span class="hljs-regexp">/guava/</span><span class="hljs-number">29.0</span>-android<span class="hljs-regexp">/guava-29.0-android.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/</span>.m2<span class="hljs-regexp">/repository/</span>com<span class="hljs-regexp">/google/gu</span>ava<span class="hljs-regexp">/failureaccess/</span><span class="hljs-number">1.0</span>.<span class="hljs-number">1</span><span class="hljs-regexp">/failureaccess-1.0.1.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/</span>.m2<span class="hljs-regexp">/repository/</span>com<span class="hljs-regexp">/google/gu</span>ava<span class="hljs-regexp">/listenablefuture/</span><span class="hljs-number">9999.0</span>-empty-to-avoid-conflict-with-guava<span class="hljs-regexp">/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/</span>.m2<span class="hljs-regexp">/repository/</span>org<span class="hljs-regexp">/checkerframework/</span>checker-compat-qual<span class="hljs-regexp">/2.5.5/</span>checker-compat-qual-<span class="hljs-number">2.5</span>.<span class="hljs-number">5</span>.jar\:<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/.m2/</span>repository<span class="hljs-regexp">/com/g</span>oogle<span class="hljs-regexp">/j2objc/</span>j2objc-annotations<span class="hljs-regexp">/1.3/</span>j2objc-annotations-<span class="hljs-number">1.3</span>.jar\:<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/.m2/</span>repository<span class="hljs-regexp">/com/g</span>oogle<span class="hljs-regexp">/errorprone/</span>error_prone_annotations<span class="hljs-regexp">/2.3.4/</span>error_prone_annotations-<span class="hljs-number">2.3</span>.<span class="hljs-number">4</span>.jar\:<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/.m2/</span>repository<span class="hljs-regexp">/org/</span>codehaus<span class="hljs-regexp">/mojo/</span>animal-sniffer-annotations<span class="hljs-regexp">/1.18/</span>animal-sniffer-annotations-<span class="hljs-number">1.18</span>.jar\:<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/.m2/</span>repository<span class="hljs-regexp">/io/g</span>rpc<span class="hljs-regexp">/grpc-stub/</span><span class="hljs-number">1.34</span>.<span class="hljs-number">1</span><span class="hljs-regexp">/grpc-stub-1.34.1.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/</span>.m2<span class="hljs-regexp">/repository/</span>com<span class="hljs-regexp">/google/</span>protobuf<span class="hljs-regexp">/protobuf-java-util/</span><span class="hljs-number">3.12</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/protobuf-java-util-3.12.0.jar\:/U</span>sers<span class="hljs-regexp">/daiwei/</span>.m2<span class="hljs-regexp">/repository/</span>com<span class="hljs-regexp">/google/</span>code<span class="hljs-regexp">/gson/g</span>son<span class="hljs-regexp">/2.8.6/g</span>son-<span class="hljs-number">2.8</span>.<span class="hljs-number">6</span>.jar\:<span class="hljs-regexp">/Applications/I</span>ntelliJ IDEA.app<span class="hljs-regexp">/Contents/</span>lib/idea_rt.jar<br>user.name=daiwei<br>java.vm.specification.version=<span class="hljs-number">1.8</span><br>sun.java.command=io.daiwei.grpc.HelloServer<br>java.home=<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home/jre<br>sun.arch.data.model=<span class="hljs-number">64</span><br>user.language=zh<br>java.specification.vendor=Oracle Corporation<br>awt.toolkit=sun.lwawt.macosx.LWCToolkit<br>java.vm.info=mixed mode<br>java.version=<span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>_231<br>java.ext.dirs=<span class="hljs-regexp">/Users/</span>daiwei<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/Extensions\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>ext\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/Extensions\:/</span>Network<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/Extensions\:/</span>System<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/Extensions\:/u</span>sr<span class="hljs-regexp">/lib/</span>java<br>sun.boot.<span class="hljs-keyword">class</span>.path=<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/resources.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>rt.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/sunrsasign.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>jsse.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/jce.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>charsets.jar\:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/jfr.jar\:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre/classes<br>java.vendor=Oracle Corporation<br><span class="hljs-keyword">file</span>.separator=/<br>java.vendor.url.bug=http\:<span class="hljs-comment">//bugreport.sun.com/bugreport/</span><br>sun.io.unicode.encoding=UnicodeBig<br>sun.cpu.endian=little<br>sun.cpu.isalist=<br><br>VM Flags:<br>-XX:CICompilerCount=<span class="hljs-number">4</span> -XX:InitialHeapSize=<span class="hljs-number">268435456</span> -XX:MaxHeapSize=<span class="hljs-number">4294967296</span> -XX:MaxNewSize=<span class="hljs-number">1431306240</span> -XX:MinHeapDeltaBytes=<span class="hljs-number">524288</span> -XX:NewSize=<span class="hljs-number">89128960</span> -XX:OldSize=<span class="hljs-number">179306496</span> -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC<br><br>VM Arguments:<br>jvm_args: -javaagent:<span class="hljs-regexp">/Applications/I</span>ntelliJ IDEA.app<span class="hljs-regexp">/Contents/</span>lib<span class="hljs-regexp">/idea_rt.jar=51341:/</span>Applications<span class="hljs-regexp">/IntelliJ IDEA.app/</span>Contents/bin -Dfile.encoding=UTF-<span class="hljs-number">8</span><br>java_command: io.daiwei.grpc.HelloServer<br>java_class_path (initial): <span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/charsets.jar:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>deploy.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>cldrdata.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>dnsns.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>jaccess.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>jfxrt.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>localedata.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>nashorn.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>sunec.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>sunjce_provider.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>sunpkcs11.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext/</span>zipfs.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/javaws.jar:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>jce.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/jfr.jar:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>jfxswt.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/jsse.jar:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/m</span>anagement-agent.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/plugin.jar:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>jre<span class="hljs-regexp">/lib/</span>resources.jar:<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_231.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/rt.jar:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>lib<span class="hljs-regexp">/ant-javafx.jar:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_231.jdk/</span>Contents/Home<br>Launcher Type: SUN_STANDARD<br></code></pre></td></tr></table></figure><h4 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h4><p>这是我个人比较喜欢的一个命令，也是用的稍微多那么一些的命令，就像这个名字一样，jstat 可以输出一些 jvm 的状态信息。其中主要用它可以实时地输出 GC 有关数据。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs dns">daiwei@daiweideMacBook-Pro ~ % jstat<br>Usage: jstat --help|-options<br>       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br><br>Definitions:<br>  &lt;option&gt;      An option reported by the -options option<br>  &lt;vmid&gt;        Virtual Machine Identifier. <span class="hljs-keyword">A</span> vmid takes the following form:<br>                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]<br>                Where &lt;lvmid&gt; is the local vm identifier for the target<br>                Java virtual machine, typically a process id<span class="hljs-comment">; &lt;hostname&gt; is</span><br>                the name of the host running the target Java virtual machine<span class="hljs-comment">;</span><br>                and &lt;port&gt; is the port number for the rmiregistry on the<br>                target host. See the jvmstat documentation for a more complete<br>                description of the Virtual Machine Identifier.<br>  &lt;lines&gt;       Number of samples between header lines.<br>  &lt;interval&gt;    Sampling interval. The following forms are allowed:<br>                    &lt;n&gt;[&quot;ms&quot;|&quot;s&quot;]<br>                Where &lt;n&gt; is an integer and the suffix specifies the units as<br>                milliseconds(&quot;ms&quot;) or seconds(&quot;s&quot;). The default units are &quot;ms&quot;.<br>  &lt;count&gt;       Number of samples to take before terminating.<br>  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.<br>  -? -h --help  Prints this help message.<br>  -help         Prints this help message.<br>  <br>daiwei@daiweideMacBook-Pro ~ % jstat -options<br>-class                          # 类加载（Class loader）信息统计<br>-compiler                       # JIT即时编译器相关统计信息<br>-gc                                 # GC相关的堆内存信息，用法 jstat -gc -h <span class="hljs-number">10</span> -t <span class="hljs-number">864</span> <span class="hljs-number">1</span>s <span class="hljs-number">20</span><br>-gccapacity                 # 各个内存池分代空间的容量<br>-gccause                        # 看上次GC，本次GC（如果正在GC中）的原因，其他输出和 -gcutil 的选项一致<br>-gcmetacapacity     # 元数据区大小统计<br>-gcnew                          # 年轻代的统计信息，（NEW = YOUNG = Eden + S0 + S1）<br>-gcnewcapacity          # 年轻代空间大小统计<br>-gcold                          # 老年代和元数据区的行为统计<br>-gcoldcapacity          # 老年代的空间统计<br>-gcutil                         # GC相关区域的使用率（utillization）统计<br>-printcompilation       # 打印JVM编译统计信息 <br><br><br>jstat -gcutil <span class="hljs-number">11064 1000</span> <span class="hljs-number">15</span><br>  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT    CGC    CGCT     GCT<br> <span class="hljs-number">37</span>.<span class="hljs-number">50</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">26</span>.<span class="hljs-number">20</span>   <span class="hljs-number">5</span>.<span class="hljs-number">81</span>  <span class="hljs-number">97</span>.<span class="hljs-number">40</span>  <span class="hljs-number">94</span>.<span class="hljs-number">92</span>    <span class="hljs-number">156</span>    <span class="hljs-number">0</span>.<span class="hljs-number">200</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">200</span><br> <span class="hljs-number">37</span>.<span class="hljs-number">50</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">99</span>.<span class="hljs-number">77</span>   <span class="hljs-number">5</span>.<span class="hljs-number">81</span>  <span class="hljs-number">97</span>.<span class="hljs-number">40</span>  <span class="hljs-number">94</span>.<span class="hljs-number">92</span>    <span class="hljs-number">156</span>    <span class="hljs-number">0</span>.<span class="hljs-number">200</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">200</span><br> <span class="hljs-number">43</span>.<span class="hljs-number">75</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">6</span>.<span class="hljs-number">00</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">164</span>    <span class="hljs-number">0</span>.<span class="hljs-number">209</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">209</span><br>  <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">43</span>.<span class="hljs-number">75</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">6</span>.<span class="hljs-number">18</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">171</span>    <span class="hljs-number">0</span>.<span class="hljs-number">216</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">216</span><br> <span class="hljs-number">50</span>.<span class="hljs-number">00</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">49</span>.<span class="hljs-number">84</span>   <span class="hljs-number">6</span>.<span class="hljs-number">34</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">178</span>    <span class="hljs-number">0</span>.<span class="hljs-number">223</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">223</span><br>  <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">37</span>.<span class="hljs-number">50</span>  <span class="hljs-number">53</span>.<span class="hljs-number">75</span>   <span class="hljs-number">6</span>.<span class="hljs-number">49</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">185</span>    <span class="hljs-number">0</span>.<span class="hljs-number">231</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">231</span><br>  <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">50</span>.<span class="hljs-number">00</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">6</span>.<span class="hljs-number">69</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">193</span>    <span class="hljs-number">0</span>.<span class="hljs-number">239</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">239</span><br> <span class="hljs-number">25</span>.<span class="hljs-number">00</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">14</span>.<span class="hljs-number">03</span>   <span class="hljs-number">6</span>.<span class="hljs-number">80</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">200</span>    <span class="hljs-number">0</span>.<span class="hljs-number">246</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">246</span><br> <span class="hljs-number">50</span>.<span class="hljs-number">00</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">32</span>.<span class="hljs-number">01</span>   <span class="hljs-number">6</span>.<span class="hljs-number">93</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">206</span>    <span class="hljs-number">0</span>.<span class="hljs-number">253</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">253</span><br> <span class="hljs-number">50</span>.<span class="hljs-number">00</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">47</span>.<span class="hljs-number">99</span>   <span class="hljs-number">7</span>.<span class="hljs-number">08</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">212</span>    <span class="hljs-number">0</span>.<span class="hljs-number">259</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">259</span><br> <span class="hljs-number">50</span>.<span class="hljs-number">00</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">27</span>.<span class="hljs-number">80</span>   <span class="hljs-number">7</span>.<span class="hljs-number">21</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">218</span>    <span class="hljs-number">0</span>.<span class="hljs-number">266</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">266</span><br> <span class="hljs-number">37</span>.<span class="hljs-number">50</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">57</span>.<span class="hljs-number">97</span>   <span class="hljs-number">7</span>.<span class="hljs-number">34</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">224</span>    <span class="hljs-number">0</span>.<span class="hljs-number">272</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">272</span><br> <span class="hljs-number">37</span>.<span class="hljs-number">50</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">57</span>.<span class="hljs-number">97</span>   <span class="hljs-number">7</span>.<span class="hljs-number">34</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">224</span>    <span class="hljs-number">0</span>.<span class="hljs-number">272</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">272</span><br> <span class="hljs-number">37</span>.<span class="hljs-number">50</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">57</span>.<span class="hljs-number">97</span>   <span class="hljs-number">7</span>.<span class="hljs-number">34</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">224</span>    <span class="hljs-number">0</span>.<span class="hljs-number">272</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">272</span><br> <span class="hljs-number">37</span>.<span class="hljs-number">50</span>   <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">57</span>.<span class="hljs-number">97</span>   <span class="hljs-number">7</span>.<span class="hljs-number">34</span>  <span class="hljs-number">96</span>.<span class="hljs-number">34</span>  <span class="hljs-number">94</span>.<span class="hljs-number">93</span>    <span class="hljs-number">224</span>    <span class="hljs-number">0</span>.<span class="hljs-number">272</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>     -        -    <span class="hljs-number">0</span>.<span class="hljs-number">272</span><br> <br>daiwei@daiweideMacBook-Pro ~ % jstat -gc <span class="hljs-number">11064 1000</span> <span class="hljs-number">15</span><br> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT    CGC    CGCT     GCT<br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">192</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">31232.0</span>  <span class="hljs-number">19405.0</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">12854.1</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">19977.0</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2673.3</span>    <span class="hljs-number">224</span>    <span class="hljs-number">0</span>.<span class="hljs-number">272</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">272</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">192</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">31232.0</span>  <span class="hljs-number">19405.1</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">12854.1</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">19977.0</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2673.3</span>    <span class="hljs-number">224</span>    <span class="hljs-number">0</span>.<span class="hljs-number">272</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">272</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">192</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">31232.0</span>  <span class="hljs-number">19405.1</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">12854.1</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">19977.0</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2673.3</span>    <span class="hljs-number">224</span>    <span class="hljs-number">0</span>.<span class="hljs-number">272</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">272</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">160</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">31232.0</span>   <span class="hljs-number">5617</span>.<span class="hljs-number">8</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">13354.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20071.3</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">230</span>    <span class="hljs-number">0</span>.<span class="hljs-number">279</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">279</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">224</span>.<span class="hljs-number">0</span>  <span class="hljs-number">31232.0</span>  <span class="hljs-number">10477.4</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">13674.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20073.0</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">237</span>    <span class="hljs-number">0</span>.<span class="hljs-number">286</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">286</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">256</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">31232.0</span>  <span class="hljs-number">21876.8</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">13986.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20073.0</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">244</span>    <span class="hljs-number">0</span>.<span class="hljs-number">294</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">294</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">224</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">31232.0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">175104.0</span>   <span class="hljs-number">14306.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20073.0</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">252</span>    <span class="hljs-number">0</span>.<span class="hljs-number">303</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">303</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">256</span>.<span class="hljs-number">0</span>  <span class="hljs-number">31232.0</span>  <span class="hljs-number">11824.0</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">14658.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20073.0</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">259</span>    <span class="hljs-number">0</span>.<span class="hljs-number">310</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">310</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">256</span>.<span class="hljs-number">0</span>  <span class="hljs-number">31232.0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">175104.0</span>   <span class="hljs-number">15042.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20073.8</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">267</span>    <span class="hljs-number">0</span>.<span class="hljs-number">318</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">318</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">256</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">31232.0</span>   <span class="hljs-number">6867</span>.<span class="hljs-number">3</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">15330.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20073.8</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">274</span>    <span class="hljs-number">0</span>.<span class="hljs-number">326</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">326</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">224</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">31232.0</span>  <span class="hljs-number">15562.0</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">15562.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20073.8</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">280</span>    <span class="hljs-number">0</span>.<span class="hljs-number">332</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">332</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">160</span>.<span class="hljs-number">0</span>  <span class="hljs-number">31232.0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">175104.0</span>   <span class="hljs-number">15842.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20073.8</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">287</span>    <span class="hljs-number">0</span>.<span class="hljs-number">340</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">340</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">192</span>.<span class="hljs-number">0</span>  <span class="hljs-number">31232.0</span>   <span class="hljs-number">7477</span>.<span class="hljs-number">3</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">16090.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20074.2</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">293</span>    <span class="hljs-number">0</span>.<span class="hljs-number">346</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">346</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">224</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">31232.0</span>  <span class="hljs-number">21846.6</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">16138.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20074.2</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">294</span>    <span class="hljs-number">0</span>.<span class="hljs-number">347</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">347</span><br><span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">224</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">31232.0</span>  <span class="hljs-number">21846.6</span>   <span class="hljs-number">175104.0</span>   <span class="hljs-number">16138.2</span>   <span class="hljs-number">20736.0</span> <span class="hljs-number">20074.2</span> <span class="hljs-number">2816</span>.<span class="hljs-number">0 2674.4</span>    <span class="hljs-number">294</span>    <span class="hljs-number">0</span>.<span class="hljs-number">347</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   -          -    <span class="hljs-number">0</span>.<span class="hljs-number">347</span><br></code></pre></td></tr></table></figure><p>上面是一次持续 10 秒的服务压测，可以看到一些数据持续不断的变化。-gc 和-gcutil 的参数都是一样的 <code>11064</code> 是 pid，<code>1000</code> 是打印时间间隔单位 ms，<code>15</code> 是打印次数，打印15次。</p><p>gcutil 的 输出参数：</p><ul><li><code>S0</code> 0 号 Survivor 区的使用百分比（S0 和 S1 总有一个是空的）。</li><li><code>S1</code> 1 号 Survivor 区的使用百分比。</li><li><code>E</code> Eden 区，也就是新生代的使用百分比。</li><li><code>O</code> Old 区老年代的使用百分比。</li><li><code>M</code> Meta区元数据区的使用百分比。</li><li><code>CSS</code> 压缩class空间（Compress class space）的使用百分比。</li><li><code>YGC</code> youngGC 次数</li><li><code>YGCT</code> youngGC 总耗时，单位秒</li><li><code>FGC</code> fullGC 的次数，可以看到 fullGC 一次都没有。</li><li><code>FGCT</code> fullGC 的总数时间，一次FullGC 都没有，所以FullGC 时间为 0</li><li><code>CGC</code> concurrentGC 并发垃圾收集次数，因为 jdk8 的默认回收器是 parallelGC 没有并发阶段所以这里是 - </li><li><code>CGCT</code> concurrentGC 收集总时间。</li><li><code>GCT</code> 所有 GC 加在一起的时间。</li></ul><p>其实 -gcutil 和 -gc 输出逻辑是一致的，只是 -gc 输出的<code>实际占用的大小单位 kb</code>，并且 -gc 输出的都是 <code>XXU</code>、 <code>XXC</code> 这代表着 <code>XX Usage</code> 和 <code>XX Capacity</code> 的意思。</p><h4 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h4><p>用于输出系统 JVM 堆信息。用的最多的两个命令 <code>-histo</code> 和 <code>-dump</code> 。其中<code>-histo</code>（柱状图）输出当前堆中的对象并按照占用空间从大到小排序。<code>-dump</code> dump 当前堆信息。jmap 在 jdk8 中还有一个 <code>-heap</code> 命令，但是在这一版的 jdk11 中移除了，但是我们还是有办法输出 -heap 的内容，别着急往下看。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">daiwei@daiweideMacBook-Pro ~ % <span class="hljs-keyword">jmap </span>-help<br><span class="hljs-symbol">Usage:</span><br>    <span class="hljs-keyword">jmap </span>-clstats &lt;pid&gt;<br>        to connect to running process <span class="hljs-keyword">and </span>print class loader statistics<br>    <span class="hljs-keyword">jmap </span>-finalizerinfo &lt;pid&gt;<br>        to connect to running process <span class="hljs-keyword">and </span>print information on objects awaiting finalization<br>    <span class="hljs-keyword">jmap </span>-histo[:live] &lt;pid&gt;<br>        to connect to running process <span class="hljs-keyword">and </span>print histogram of <span class="hljs-keyword">java </span>object heap<br>        if the <span class="hljs-string">&quot;live&quot;</span> <span class="hljs-keyword">suboption </span>is specified, only <span class="hljs-built_in">count</span> live objects<br>    <span class="hljs-keyword">jmap </span>-dump:&lt;dump-options&gt; &lt;pid&gt;<br>        to connect to running process <span class="hljs-keyword">and </span>dump <span class="hljs-keyword">java </span>heap<br>    <span class="hljs-keyword">jmap </span>-? -h --help<br>        to print this help message<br><br>    dump-options:<br>      live         dump only live objects<span class="hljs-comment">; if not specified,</span><br>                   all objects in the heap are dumped.<br>      format=<span class="hljs-keyword">b </span>    <span class="hljs-keyword">binary </span>format<br>      file=&lt;file&gt;  dump heap to &lt;file&gt;<br><br><span class="hljs-symbol">    Example:</span> <span class="hljs-keyword">jmap </span>-dump:live,format=<span class="hljs-keyword">b,file=heap.bin </span>&lt;pid&gt;<br>    <br> daiwei@daiweideMacBook-Pro ~ % <span class="hljs-keyword">jmap </span>-histo <span class="hljs-number">33208</span><br><br> num     <span class="hljs-comment">#instances         #bytes  class name</span><br>----------------------------------------------<br><span class="hljs-symbol">   1:</span>        <span class="hljs-number">106522</span>        <span class="hljs-number">4260880</span>  <span class="hljs-keyword">java.lang.ref.Finalizer</span><br><span class="hljs-keyword"> </span>  <span class="hljs-number">2</span>:        <span class="hljs-number">106222</span>        <span class="hljs-number">4248880</span>  <span class="hljs-keyword">java.util.WeakHashMap$Entry</span><br><span class="hljs-keyword"> </span>  <span class="hljs-number">3</span>:        <span class="hljs-number">106200</span>        <span class="hljs-number">3398400</span>  <span class="hljs-keyword">java.lang.ref.WeakReference</span><br><span class="hljs-keyword"> </span>  <span class="hljs-number">4</span>:          <span class="hljs-number">4569</span>        <span class="hljs-number">2491656</span>  [I<br><span class="hljs-symbol">   5:</span>         <span class="hljs-number">67343</span>        <span class="hljs-number">2154976</span>  com.sun.<span class="hljs-keyword">jna.Memory</span><br><span class="hljs-keyword"> </span>  <span class="hljs-number">6</span>:         <span class="hljs-number">46271</span>        <span class="hljs-number">1698896</span>  [Ljava.lang.Object;<br><span class="hljs-symbol">   7:</span>         <span class="hljs-number">28666</span>        <span class="hljs-number">1330904</span>  [C<br><span class="hljs-symbol">   8:</span>         <span class="hljs-number">13698</span>        <span class="hljs-number">1271480</span>  [<span class="hljs-keyword">B</span><br><span class="hljs-keyword"> </span>  <span class="hljs-number">9</span>:         <span class="hljs-number">31081</span>        <span class="hljs-number">1243240</span>  com.sun.<span class="hljs-keyword">jna.NativeString$StringMemory</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">10</span>:         <span class="hljs-number">14391</span>        <span class="hljs-number">1036744</span>  [<span class="hljs-keyword">J</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">11</span>:         <span class="hljs-number">31081</span>         <span class="hljs-number">745944</span>  com.sun.<span class="hljs-keyword">jna.NativeString</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">12</span>:          <span class="hljs-number">7526</span>         <span class="hljs-number">613808</span>  [Ljava.util.HashMap$Node;<br><span class="hljs-symbol">  13:</span>            <span class="hljs-number">46</span>         <span class="hljs-number">527904</span>  [Ljava.util.WeakHashMap$Entry;<br><span class="hljs-symbol">  14:</span>         <span class="hljs-number">20227</span>         <span class="hljs-number">485448</span>  <span class="hljs-keyword">java.lang.String</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">15</span>:          <span class="hljs-number">6157</span>         <span class="hljs-number">443304</span>  <span class="hljs-keyword">java.lang.reflect.Field</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">16</span>:          <span class="hljs-number">7534</span>         <span class="hljs-number">361632</span>  <span class="hljs-keyword">java.util.HashMap</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">17</span>:         <span class="hljs-number">12098</span>         <span class="hljs-number">290352</span>  <span class="hljs-keyword">java.util.ArrayList</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">18</span>:          <span class="hljs-number">7771</span>         <span class="hljs-number">248672</span>  com.sun.<span class="hljs-keyword">jna.Structure$AutoAllocated</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">19</span>:         <span class="hljs-number">15131</span>         <span class="hljs-number">242096</span>  <span class="hljs-keyword">java.lang.Integer</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">20</span>:          <span class="hljs-number">7074</span>         <span class="hljs-number">226368</span>  <span class="hljs-keyword">java.util.HashMap$Node</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">21</span>:          <span class="hljs-number">3969</span>         <span class="hljs-number">190512</span>  [Loshi.hardware.CentralProcessor$TickType;<br><span class="hljs-symbol">  22:</span>          <span class="hljs-number">2987</span>         <span class="hljs-number">167272</span>  <span class="hljs-keyword">java.util.LinkedHashMap</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">23</span>:          <span class="hljs-number">1277</span>         <span class="hljs-number">146176</span>  <span class="hljs-keyword">java.lang.Class</span><br><span class="hljs-keyword"> </span> <span class="hljs-number">24</span>:          <span class="hljs-number">5978</span>         <span class="hljs-number">144200</span>  [Ljava.lang.reflect.Field;<br>  ......<br><span class="hljs-symbol"> 517:</span>             <span class="hljs-number">1</span>             <span class="hljs-number">16</span>  sun.util.resources.LocaleData<br><span class="hljs-symbol"> 518:</span>             <span class="hljs-number">1</span>             <span class="hljs-number">16</span>  sun.util.resources.LocaleData$LocaleDataResourceBundleControl<br>Total        <span class="hljs-number">710496</span>       <span class="hljs-number">29890984</span><br><br>daiwei@daiweideMacBook-Pro ~ % <span class="hljs-keyword">jmap </span>-dump:format=<span class="hljs-keyword">b,file=dump.hprof </span><span class="hljs-number">34471</span><br>Heap dump file created<br></code></pre></td></tr></table></figure><h4 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h4><p>jmap 可以输出堆空间的信息，jstack 就是输出<code>栈空间</code>的信息。最主要使用的<code>-l</code>即打印 jvm 中的锁信息，<code>-e</code>打印 jvm 中的线程信息。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs routeros">daiwei@daiweideMacBook-Pro ~ % jstack -help<br>Usage:<br>    jstack [-l][-e] &lt;pid&gt;<br>        (<span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span> running process)<br><br>Options:<br>    -l  long listing. Prints additional information about locks<br>    -e  extended listing. Prints additional information about threads<br>    -? -h --help -help <span class="hljs-keyword">to</span> <span class="hljs-builtin-name">print</span> this help message<br><br>daiwei@daiweideMacBook-Pro ~ % jstack -l 34979<br>2021-05-22 21:49:23<br>Full thread dump Java HotSpot(TM) 64-Bit<span class="hljs-built_in"> Server </span>VM (25.231-b11 mixed mode):<br><br><span class="hljs-string">&quot;Attach Listener&quot;</span> #11 daemon <span class="hljs-attribute">prio</span>=9 <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff5270d5800 <span class="hljs-attribute">nid</span>=0xa803 waiting on condition [0x0000000000000000]<br>   java.lang.Thread.State: RUNNABLE<br><br>   Locked ownable synchronizers:<br>    - None<br><br><span class="hljs-string">&quot;Service Thread&quot;</span> #10 daemon <span class="hljs-attribute">prio</span>=9 <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff526079800 <span class="hljs-attribute">nid</span>=0x3e03 runnable [0x0000000000000000]<br>   java.lang.Thread.State: RUNNABLE<br><br>   Locked ownable synchronizers:<br>    - None<br><br><span class="hljs-string">&quot;C1 CompilerThread3&quot;</span> #9 daemon <span class="hljs-attribute">prio</span>=9 <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff526040800 <span class="hljs-attribute">nid</span>=0x3c03 waiting on condition [0x0000000000000000]<br>   java.lang.Thread.State: RUNNABLE<br><br>   Locked ownable synchronizers:<br>    - None<br><br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<br><br><span class="hljs-string">&quot;main&quot;</span> #1 <span class="hljs-attribute">prio</span>=5 <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff528809000 <span class="hljs-attribute">nid</span>=0xf03 waiting on condition [0x0000700001c52000]<br>   java.lang.Thread.State: TIMED_WAITING (sleeping)<br>    at java.lang.Thread.sleep(Native Method)<br>    at io.daiwei.TestCPULoadMain.main(TestCPULoadMain.java:21)<br><br>   Locked ownable synchronizers:<br>    - None<br><br><span class="hljs-string">&quot;VM Thread&quot;</span> <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff528840800 <span class="hljs-attribute">nid</span>=0x5003 runnable<br><br><span class="hljs-string">&quot;GC task thread#0 (ParallelGC)&quot;</span> <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff52880a800 <span class="hljs-attribute">nid</span>=0x2607 runnable<br><br><span class="hljs-string">&quot;GC task thread#1 (ParallelGC)&quot;</span> <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff528816000 <span class="hljs-attribute">nid</span>=0x2503 runnable<br><br><span class="hljs-string">&quot;GC task thread#2 (ParallelGC)&quot;</span> <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff528816800 <span class="hljs-attribute">nid</span>=0x2303 runnable<br><br><span class="hljs-string">&quot;GC task thread#3 (ParallelGC)&quot;</span> <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff528817000 <span class="hljs-attribute">nid</span>=0x2a03 runnable<br><br><span class="hljs-string">&quot;GC task thread#4 (ParallelGC)&quot;</span> <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff528817800 <span class="hljs-attribute">nid</span>=0x5403 runnable<br><br><span class="hljs-string">&quot;GC task thread#5 (ParallelGC)&quot;</span> <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff528818800 <span class="hljs-attribute">nid</span>=0x5203 runnable<br><br><span class="hljs-string">&quot;GC task thread#6 (ParallelGC)&quot;</span> <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff528819000 <span class="hljs-attribute">nid</span>=0x2c03 runnable<br><br><span class="hljs-string">&quot;GC task thread#7 (ParallelGC)&quot;</span> <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff528819800 <span class="hljs-attribute">nid</span>=0x2e03 runnable<br><br><span class="hljs-string">&quot;VM Periodic Task Thread&quot;</span> <span class="hljs-attribute">os_prio</span>=31 <span class="hljs-attribute">tid</span>=0x00007ff528875000 <span class="hljs-attribute">nid</span>=0x5503 waiting on condition<br><br>JNI global references: 375<br></code></pre></td></tr></table></figure><h4 id="jcmd"><a href="#jcmd" class="headerlink" title="jcmd"></a>jcmd</h4><p>什么你说命令太多记不住？没关系。jcmd 是一个命令的聚合，里面有很多的 option，基本上前面的命令都可以用 jcmd 输出，来看看下面的例子。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs vim">daiwei@daiweideMacBook-Pro ~ % jcmd -<span class="hljs-keyword">help</span><br>Usage: jcmd &lt;pid | main class&gt; &lt;<span class="hljs-keyword">command</span> ...|PerfCounter.<span class="hljs-keyword">print</span>|-<span class="hljs-keyword">f</span> <span class="hljs-keyword">file</span>&gt;<br>   <span class="hljs-built_in">or</span>: jcmd -<span class="hljs-keyword">l</span><br>   <span class="hljs-built_in">or</span>: jcmd -h<br><br>  <span class="hljs-keyword">command</span> must <span class="hljs-keyword">be</span> <span class="hljs-keyword">a</span> valid jcmd <span class="hljs-keyword">command</span> <span class="hljs-keyword">for</span> the selected jvm.<br>  Use the <span class="hljs-keyword">command</span> <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">to</span> see which commands are available.<br>  If the pid <span class="hljs-keyword">is</span> <span class="hljs-number">0</span>, commands will <span class="hljs-keyword">be</span> sent <span class="hljs-keyword">to</span> <span class="hljs-keyword">all</span> Java processes.<br>  The main class <span class="hljs-keyword">argument</span> will <span class="hljs-keyword">be</span> used <span class="hljs-keyword">to</span> <span class="hljs-keyword">match</span> (either partially<br>  <span class="hljs-built_in">or</span> fully) the class used <span class="hljs-keyword">to</span> start Java.<br>  If <span class="hljs-keyword">no</span> <span class="hljs-keyword">options</span> are given, lists Java processes (same <span class="hljs-keyword">as</span> -<span class="hljs-keyword">l</span>).<br><br>  PerfCounter.<span class="hljs-keyword">print</span> <span class="hljs-keyword">display</span> the counters exposed by this process<br>  -<span class="hljs-keyword">f</span>  <span class="hljs-keyword">read</span> <span class="hljs-built_in">and</span> <span class="hljs-keyword">execute</span> commands from the <span class="hljs-keyword">file</span><br>  -<span class="hljs-keyword">l</span>  <span class="hljs-keyword">list</span> JVM processes <span class="hljs-keyword">on</span> the local machine<br>  -? -h --<span class="hljs-keyword">help</span> <span class="hljs-keyword">print</span> this <span class="hljs-keyword">help</span> message<br>  <br>daiwei@daiweideMacBook-Pro ~ % jcmd <span class="hljs-number">34979</span><br><span class="hljs-number">34979</span>:<br>The following commands are available:<br>JFR.<span class="hljs-keyword">stop</span><br>JFR.start<br>JFR.dump<br>JFR.check<br>VM.native_memory<br>VM.check_commercial_features<br>VM.unlock_commercial_features<br>ManagementAgent.<span class="hljs-keyword">stop</span><br>ManagementAgent.start_local<br>ManagementAgent.start<br>VM.classloader_stats<br>GC.rotate_log<br>Thread.<span class="hljs-keyword">print</span><br>GC.class_stats<br>GC.class_histogram<br>GC.heap_dump<br>GC.finalizer_info<br>GC.heap_info<br>GC.run_finalization<br>GC.run<br>VM.uptime<br>VM.dynlibs<br>VM.flags<br>VM.system_properties<br>VM.command_line<br>VM.<span class="hljs-keyword">version</span><br><span class="hljs-keyword">help</span><br><br>For more information about <span class="hljs-keyword">a</span> specific <span class="hljs-keyword">command</span> use <span class="hljs-string">&#x27;help &lt;command&gt;&#x27;</span>.<br><br># <span class="hljs-keyword">help</span> 命令<br>daiwei@daiweideMacBook-Pro ~ % jcmd <span class="hljs-number">34979</span> <span class="hljs-keyword">help</span> GC.heap_info<br><span class="hljs-number">34979</span>:<br>GC.heap_info<br>Provide generic Java heap information.<br><br>Impac<span class="hljs-variable">t:</span> Medium<br><br>Permission: java.lang.management.ManagementPermission(monitor)<br><br>Syntax: GC.heap_info<br><br># cmd 命令使用 这里就是前面提到的，jmap 中移除的命令，输出堆内存信息。<br>daiwei@daiweideMacBook-Pro ~ % jcmd <span class="hljs-number">34979</span> GC.heap_info<br><span class="hljs-number">34979</span>:<br> PSYoungGen      total <span class="hljs-number">76288</span>K, used <span class="hljs-number">47314</span>K [<span class="hljs-number">0</span>x000000076ab00000, <span class="hljs-number">0</span>x0000000770000000, <span class="hljs-number">0</span>x00000007c0000000)<br>  eden space <span class="hljs-number">65536</span>K, <span class="hljs-number">55</span>% used [<span class="hljs-number">0</span>x000000076ab00000,<span class="hljs-number">0</span>x000000076cebc930,<span class="hljs-number">0</span>x000000076eb00000)<br>  from space <span class="hljs-number">10752</span>K, <span class="hljs-number">99</span>% used [<span class="hljs-number">0</span>x000000076eb00000,<span class="hljs-number">0</span>x000000076f578010,<span class="hljs-number">0</span>x000000076f580000)<br>  <span class="hljs-keyword">to</span>   space <span class="hljs-number">10752</span>K, <span class="hljs-number">0</span>% used [<span class="hljs-number">0</span>x000000076f580000,<span class="hljs-number">0</span>x000000076f580000,<span class="hljs-number">0</span>x0000000770000000)<br> ParOldGen       total <span class="hljs-number">175104</span>K, used <span class="hljs-number">4582</span>K [<span class="hljs-number">0</span>x00000006c0000000, <span class="hljs-number">0</span>x00000006cab00000, <span class="hljs-number">0</span>x000000076ab00000)<br>  object space <span class="hljs-number">175104</span>K, <span class="hljs-number">2</span>% used [<span class="hljs-number">0</span>x00000006c0000000,<span class="hljs-number">0</span>x00000006c0479a48,<span class="hljs-number">0</span>x00000006cab00000)<br> Metaspace       used <span class="hljs-number">7205</span>K, capacity <span class="hljs-number">7438</span>K, committed <span class="hljs-number">7552</span>K, reserved <span class="hljs-number">1056768</span>K<br>  class space    used <span class="hljs-number">759</span>K, capacity <span class="hljs-number">838</span>K, committed <span class="hljs-number">896</span>K, reserved <span class="hljs-number">1048576</span>K<br></code></pre></td></tr></table></figure><h3 id="图形化工具"><a href="#图形化工具" class="headerlink" title="图形化工具"></a>图形化工具</h3><p>图形化工具可以以图表的形式更直观的把监控数据展现出来，JDK自带的图形化工具主要包括 <code>jconsole</code>、<code>jvisualvm</code>、<code>jmc</code>。这些工具都提供了丰富的功能，方便开发者对 JVM 进行监控。</p><blockquote><p>jmc 在 JDK11 以上版被被移除，独立作为一个程序包提供。 JDK 11 依旧有 jmc 这个命令但是打不开。 jmc 我们下载了独立软件包，进行操作。同时下面的所有栗子都基于 jdk11 进行测试。</p></blockquote><h4 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h4><p>在命令行输入<code>jconsole</code>即可打开，打开后可以选择本地 JVM 直接连接也可以选择，JMX 的方式远程连接 JVM。下面这张图就是打开本地 JVM 监控的概览页面，其中图中有6个 tab 页，分别是<code>概览</code>、<code>内存</code>、<code>线程</code>、<code>类</code>、<code>VM概要</code>、<code>Mbean</code>，从概述这个页面上能看到堆内存使用量、线程、类、CPU 占用率的系统指标数据。</p><ul><li><code>堆内存使用量</code> 这里是前面提到的 Java 堆内存的使用情况。</li><li><code>线程</code> 当前 JVM 中活跃的线程数。</li><li><code>类</code> JVM 加载的类的个数。</li><li><code>CPU占用率</code> 当前物理机的 CPU 使用情况。</li></ul><p>图中还有多个时间范围的选项可以选择，包括但不限于 1分钟、5分钟、10分钟、30分钟、1小时、2小时 …… 1天、7天 …… 1个月 …… 1年。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210523105811.png"></p><p>第二个面板是<code>内存</code> 这个部分提供了很多的图表，展示了各个内存部分的使用情况。我这里被监控应用使用的是 jdk8 ，GC是默认的 parallelGC 所以这里展示 PS XXX 内存图表，还有一些 MetaSpace、CodeCache、CCS 非堆部分内存使用量图 。右上角有个<code>执行GC</code>的按钮，这个按钮可以直接触发 JVM 的 <code>fullGC</code>，右下的数据就是整个堆按照堆和非堆逻辑划分后，各个部分内存使用情况的柱状图，我们堆逻辑内存区的命名<code>堆</code>与<code>非堆</code>也是从这来的。左下的详细信息则是堆空间 GC 的简单统计。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210523110244.png"></p><p>第三个面板是<code>线程有关</code>信息，上半部分是一个折线图，展示JVM中活跃和峰值的线程数量，下半部分是活跃的状态以及堆栈追踪。其中面板的下半部分有个<code>死锁检测</code>的按钮，可以用来检测当前JVM 中是否存在死锁。</p><p>  <img src="https://gitee.com/realDaiwei/img/raw/master/20210524154459.png"></p><p>第四个面板是<code>类加载</code>情况，上半部分是类加载数量的折线图，下半部分是详细数据的输出。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210524155552.png"></p><p><code>VM概述</code> 这个部分展示虚拟机内部的一些概要信息，包括线程、堆栈内存、物理机的一些和JVM的参数等。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210524155942.png"></p><p>MBean 的是一些 manage Bean 的一些详情信息。</p><h4 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h4><p>jvisualvm 和 jconsole 都是 JDK 打包的监控图形化工具。这个监控工具我感觉用下来比 jconsole 更友好一些，jconsole 有个功能他基本都有，并且 jvisualvm 还增加了<code>抽样器</code>和<code>VM dump分析</code>的功能，可以直接对运行的 JVM 进行取样分析。jvisualvm 的左边部分是应用程序的菜单栏，除了本地，我们还可以分析远程的JVM，VM核心 dump等，可以对本地或者取样出的 JVM 数据进行分析。我们这里选择 TestCPULoadMain 的 JVM 实例进行分析。在右边是详情页面，上面有几个tab页面，有<code>概述</code>、<code>监控</code>、<code>线程</code>、<code>抽样器</code>、<code>Profiler</code>，其中抽样器是用来做抽样分析，可以抽样堆空间数据和线程的数据，Profiler 用来进行性能抽样分析。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210524161742.png"></p><p>这里很直接的感受到 jvisualvm 的一个优点，jvisualvm 是彩色的！！jvisualvm在监控页面把<code>CPU</code>、<code>堆/MetaSpace</code>、<code>类</code>、<code>线程</code>这四个的折线图全部展示出来了，而不是像 jconsole 需要一个个选择切换。其中监控的项我们也可以根据需要自定义勾选。这里处理基本的监控数据展示，页面上还有两个按钮分别是<code>执行垃圾回收</code> 和 <code>堆Dump</code>。和jconsole一样，执行垃圾回收可以直接触发 JVM 的<code>fullGC</code>而<code>堆Dump</code>可以直接<code>dump当前堆空间</code>。相比于 jconsole 友好太多。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210524162959.png"></p><p>同时 jvisualvm 对于线程的监控也非常友好，也都是彩色的。同时也提供了<code>线程Dump</code> 的按钮，用于dump 当前的线程。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210524163015.png"></p><p>上面这两个面板都有 Dump 操作，点击 dump 之后可以直接跳转到一个新的面板直接展示 dump 后的数据。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210524170053.png"></p><p>抽样器的顾名思义，在JVM 运行期间，对某个时间段进行抽样，抽样目标的数据信息，抽样的对象包括<code>CPU</code>和<code>内存</code>，抽样完成后点击<code>快照</code>即可生成由抽样的数据生成的分析快照，并且可以进行多次采样或者增量采样来适应不同的抽样需求，同时在抽样过程中也能进行 GC 操作和 Dump 操作。最后的 profiler 和 抽样器功能类似用于 JVM 性能的抽样分析。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210524171625.png"></p><h4 id="jmc（java-mission-controller）"><a href="#jmc（java-mission-controller）" class="headerlink" title="jmc（java mission controller）"></a>jmc（java mission controller）</h4><p>Oracle Java Mission Control（JMC）是一组功能强大的工具，可以在Oracle JDK上运行并与Oracle Java SE Embedded 8虚拟机（VM）进行交互。这套工具提供了对Java SE Embedded 8 VM的高级，简单的Java监视和管理，适用于开发和生产环境。这个工具相较于前面的 jvisualvm 更加强大。有更多的监控项，在 jvisualvm 我们提到了一个抽样的功能，而这个功能在 jmc 直接升级成了 <code>java飞行记录（JFR）</code> 。JMC 在 jdk 8 之后的版本都是以独立软件包的形式提供，传送门 ===&gt;<a href="http://jdk.java.net/jmc/8/">下载地址</a>。</p><blockquote><p>jmc 我之前怎么尝试都是翻车都没有成功的打开，但是这次我打开了。记录下我的环境 （macos BigSur 11.3.1 (20E241) + jdk 1.8.0.231）</p></blockquote><p>jms 的Mbean 概览页面是三个仪表盘，分别是堆内存使用情况， CPU 使用率，最近一次 youngGC 对象存活的比例。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210524185656.png"></p><p><code>JFR</code>JVM 内置的数据收集引擎，正如这个名字一样 JFR（Java flight recoder） 会在运行期间收集JVM和Java 应用的运行数据，帮助开发者诊断分析 Java 应用。使用 JFR 要先进行 jfr 文件的录制，然后 jmc 对 jfr 文件进行分析并以图表的形式展示出来。其中左边的分析结果的菜单树，而右边则是分析结果的图表展示，展示的数据内容非常的详细。jfr 不仅可以通过 jmc 进行录制，还可以通过前面提到的<code>jcmd</code>命令进行录制。录制完成之后导入到 jmc 中进行分析即可。JFR 可以在测试环境和个人电脑上免费使用，但是如果用于生产服务器需要商业许可证，JFR虽然好，但是录制过程对中对性能还是会有一定的影响，大约 2% 左右，这个需要注意。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210524231602.png"></p><h2 id="可视化监控集成工具"><a href="#可视化监控集成工具" class="headerlink" title="可视化监控集成工具"></a>可视化监控集成工具</h2><p>前面介绍了JDK 自带的一些监控工具，其中包括命令行的工具和一些图形化的工具，上面的除了 JFR 我们在生产环境可以使用，其他的基本上都用不上。因为生产环境的服务器不是谁都能连上的，基本上都是运维管理，那我们还有其他的手段去方便地监控吗？有的，我们生产使用的是 grafana + prometheus 的组合。下图是监控的 JVM dashbord 是对 JVM 堆空间和线程的监控。最上面的是CPU 使用率，绿色表示System CPU 使用率，黄色表示JVM 的 CPU 使用率。下面的两个图表则表示堆空间和非堆部分的空间使用情况。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210525005416.png"></p><p>下面这张图主要展示了线上真实的JVM GC的情况，可以看到堆空间曲线随着时间是呈现一个锯齿状的。而非堆部分则是一直都是平直的，这是垃圾回收器在堆中工作的结果。下面的两个折线图则分别是GC次数和GC时长的统计图，但看到这个图的时候我有一点疑惑的地方，堆空间能清楚的看到每次垃圾的回收产生的曲线下降，但是为什么他下面的记录GC次数的图中却没有呢？后来我查了线上的的GC日志，确认是GC count中漏记了。有哪位大神知道这是为什么，帮我答疑解惑一下。这里还有一个细节，就是GC count和GC time图表下面的<code>PS MarkSweep</code>和 <code>PS Scavenge</code> ，这分别代表这 Parallel GC 的老年代回收器和新生代回收器。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210525005443.png"></p><p>JVM dashbord 还有很多的图表，这些都是可以配置的，但是都是对堆栈线程的监控。当然 grafana 还可以集成其他类型的监控，比如主机资源、es和http请求等监控内容非常丰富。但是grafana 或者 datadog 这种监控集成工具也就是只有展示的功能，它并不具备像 JFR 或 jvisualvm 抽样分析的功能。如果真的出现了问题还是要dump内存线程或者开启JFR进行排查分析。</p><h2 id="内存泄漏分析实例"><a href="#内存泄漏分析实例" class="headerlink" title="内存泄漏分析实例"></a>内存泄漏分析实例</h2><p>这里我们使用一段会不断产生垃圾的代码，然后我们设置 JVM 的启动参数为 <code>-Xmx128m -Xms128m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=./heap.hprof</code> （jdk8）。这段参数限制的堆空间的大小为<code>128m</code>，并且在堆空间溢出时dump堆内存到<code>./heap.hprof</code>中。垃圾生成代码如下：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> class GCLogAnalysis &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Random <span class="hljs-built_in">random</span> = <span class="hljs-keyword">new</span> Random();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        <span class="hljs-comment">// 当前毫秒时间戳</span><br>        <span class="hljs-keyword">long</span> startMillis = System.currentTimeMillis();<br>        <span class="hljs-comment">// 持续运行毫秒数; 可根据需要进行修改</span><br>        <span class="hljs-keyword">long</span> timeoutMillis = TimeUnit.SECONDS.toMillis(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// 结束时间戳</span><br>        <span class="hljs-keyword">long</span> endMillis = startMillis + timeoutMillis;<br>        LongAdder counter = <span class="hljs-keyword">new</span> LongAdder();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;正在执行...&quot;</span>);<br>        <span class="hljs-comment">// 缓存一部分对象; 进入老年代</span><br>        <span class="hljs-built_in">int</span> cacheSize = <span class="hljs-number">2000</span>;<br>        <span class="hljs-keyword">Object</span>[] cachedGarbage = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Object</span>[cacheSize];<br>        <span class="hljs-comment">// 在此时间范围内,持续循环</span><br>        <span class="hljs-keyword">while</span> (System.currentTimeMillis() &lt; endMillis) &#123;<br>            <span class="hljs-comment">// 生成垃圾对象</span><br>            <span class="hljs-keyword">Object</span> garbage = generateGarbage(<span class="hljs-number">100</span>*<span class="hljs-number">1024</span>);<br>            counter.increment();<br>            <span class="hljs-built_in">int</span> randomIndex = <span class="hljs-built_in">random</span>.nextInt(<span class="hljs-number">2</span> * cacheSize);<br>            <span class="hljs-keyword">if</span> (randomIndex &lt; cacheSize) &#123;<br>                cachedGarbage[randomIndex] = garbage;<br>            &#125;<br>        &#125;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;执行结束!共生成对象次数:&quot;</span> + counter.longValue());<br>    &#125;<br><br>    <span class="hljs-comment">// 生成对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">Object</span> generateGarbage(<span class="hljs-built_in">int</span> <span class="hljs-built_in">max</span>) &#123;<br>        <span class="hljs-built_in">int</span> randomSize = <span class="hljs-built_in">random</span>.nextInt(<span class="hljs-built_in">max</span>);<br>        <span class="hljs-built_in">int</span> type = randomSize % <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">Object</span> result = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                result = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[randomSize];<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                result = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[randomSize];<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[randomSize];<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder();<br>                <span class="hljs-keyword">String</span> randomString = <span class="hljs-string">&quot;randomString-Anything&quot;</span>;<br>                <span class="hljs-keyword">while</span> (builder.length() &lt; randomSize) &#123;<br>                    builder.<span class="hljs-built_in">append</span>(randomString);<br>                    builder.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">max</span>);<br>                    builder.<span class="hljs-built_in">append</span>(randomSize);<br>                &#125;<br>                result = builder.toString();<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果一切顺利堆空间溢出就可以在项目根目录下就可以得到一个<code>heap.hprof</code>文件，这就是我们分析的目标文件了。前面我们提到的jmc可以用来分析<code>.hprof</code>文件。这里我们使用<code>Eclipse MAT</code>进行分析。以我们的经验一般堆栈溢出都是内存泄漏，所以我们选择泄漏分析报告。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210525223345.png"></p><p>打开后直接就能看到 MAT 根据内存数据分析推测出的内存泄漏的原因，下图可以看到<code>Problem Suspect 1</code>占到了<code>99.69%</code>的内存，虽然这里只是刚刚打开.hprof 文件但基本上可以推测出内存泄漏的原因了。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210526175246.png"></p><p>在 Suspect Report 中有很多的选项，包括一些<code>线程</code>和<code>堆积对象</code>信息。在这个部分基本可以推断出系统发生内存溢出的原因了。也就是我们垃圾生成类的主线程产生了太多的垃圾，导致较小的内存溢出了。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210525224907.png"></p><p>如果到这里还是不能确定问题发生的根源没关系。MAT 还有一些其他的分析方式，我们一起来看 MAT 的首页信息。首先最上面是一个饼状图，然后下面有各种各样的操作和报告可以选择，这里面包括<code>对象实例的柱状图</code>、<code>对象的树形结构</code>、<code>打印开销最大的几个对象</code>和<code>重复类分析</code>等，还有一些分析报告可以选择。功能方面虽然分析的内容没有 JFR 全面，但是通常来说这么多信息已经足够帮助我们分析出内存泄漏的根源了。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210525225515.png"></p><h2 id="线上分析工具"><a href="#线上分析工具" class="headerlink" title="线上分析工具"></a>线上分析工具</h2><h3 id="FastThread"><a href="#FastThread" class="headerlink" title="FastThread"></a>FastThread</h3><p>fastThread 是一个优秀的Java dump线程分析工具，只要把线程 dump 上传，即可进行在线分析，分析结果都是以图表展示，可展示项非常多并支持结果 pdf 导出，是一个非常优秀的在线分析工具。这里就不具体展开了，感兴趣的同学可以自己动手实操试试。传送门 ==&gt; <a href="https://fastthread.io/">fastThread</a></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210525233153.png"></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210525233653.png"></p><h3 id="GCEasy"><a href="#GCEasy" class="headerlink" title="GCEasy"></a>GCEasy</h3><p>GCEasy 是一款优秀可视化的 GC 日志分析工具，使用前需要把日志信息上传然后进行分析，分析结果以图表的方式展示，同样也支持结果 pdf 导出。GCEasy 和 fastThread 是同一家的产品，两者图表风格是一致的。感兴趣的同学可以动手实操试试，很有意思。传送门 ==&gt; <a href="https://www.gceasy.io/">GCEasy</a></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210525235015.png"></p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210525235015.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我之前都不是很重视 JVM 的监控，但是那次线上事故之后我意识到JVM监控的重要性。这一小节我们一起从JDK自带的监控工具开始梳理，其中命令行工具包括常用的 <code>jps</code>、<code>jstatck</code>、<code>jmap</code>、<code>jstat</code>、<code>jcmd</code> 等，图形化工具包括 <code>jconsole</code>、<code>jvisualvm</code>和后来独立软件包的<code>jmc</code>，其中jmc中的<code>jfr</code>基本可以满足监控的需求。jdk 提供的工具在理想情况下是能够正常监控的，但是有些时候是无法正常使用了，会报无法 attach 的异常，还有我们也平时不会有生产环境服务器的权限。所以仅仅使用 JDK 自带的工具进行监控是不太现实的。那我们要如何进行监控呢？我们使用可视化集成工具，我们演示的是 <code>grafana</code> 通过集成 <code>prometheus</code> 实现对 JVM 基本信息的监控。基本可以满足我们对于线上服务大体运行情况的监控。如果我们线上遇到了问题我们要怎么处理呢？紧接着我们演示了一个内存泄漏的分析案例，使用<code>Eclipse MAT</code>对一个内存溢出的<code>.hprof</code>文件进行简单实例分析。最后我们简单介绍了两个在线分析工具 fastThread 和 GCEasy。JVM 监控还有一个很好用的开源工具<code>Arthas</code>，感兴趣的同学可以动手实践。</p><p>这一小节有大量的动手实践，再加上我最近也挺忙的，这一小节我写了好久好久😅😅。终于要进入 JVM 很精彩的GC模块了，梳理完GC模块什么JVM调优，GC分析就都不是事了。加油，你的努力终究会照亮你的生活，晚安～</p>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM 内存结构与内存模型初步</title>
    <link href="/2021/05/17/java-memory-structure-and-basic-model/"/>
    <url>/2021/05/17/java-memory-structure-and-basic-model/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面的小节中，总结梳理了 JVM 底层的一些基础的东西，包括 JVM 字节码技术，方法的调用，反射，异常等方法流程，基础的最后一部分梳理了类加载机制和对象的内存布局。有了这一套机制 JVM 能够顺利的读取Java文件，并行执行逻辑。看起来都有了，但是少了一个重要的部分没错，就是内存。这计算机的内存这个部分来的像理所当然一样。其实最原始的计算机是没有内存这个概念的，后来冯诺依曼提出了冯诺依曼结构，冯诺依曼确定了计算机的结构，即确定了计算机的 5 大部件，即<code>运算器</code>、<code>控制器</code>、<code>存储器</code>、<code>输入设备</code>和<code>输出设备</code>。现代计算机的都是遵循冯诺依曼结构的，因此又称为冯诺依曼机。所以作为虚拟机怎么能没有内存呢？Java 内存模型规定了 JVM 应该如何使用计算机内存（RAM）。广义上来讲，Java内存模型分别为两个部分 <code>JVM内存结构</code> 和 <code>JMM与线程规范</code>。</p><h2 id="JVM-内存结构"><a href="#JVM-内存结构" class="headerlink" title="JVM 内存结构"></a>JVM 内存结构</h2><p>JVM 内存结构是 JVM 的底层的实现，它决定了运行时数据的数据区划分。那么如果让你结合我们前面的知识设计一个 JVM 结构模型，你会怎么做呢？</p><h3 id="动手设计一个-JVM-内存结构"><a href="#动手设计一个-JVM-内存结构" class="headerlink" title="动手设计一个 JVM 内存结构"></a>动手设计一个 JVM 内存结构</h3><p>从我们前面梳理的 JVM 方法调用小节中，我们知道方法调用会用到栈，每个正在运行的线程都有自己的线程栈，线程每调用一个方法都会创建一个栈帧。在类加载那一小节我们知道了对象实例存在堆上，然后通过一个存在栈上的引用指向堆中的实例对象的地址。所以我们还需要一个堆空间。所以内存空间我们可以简单划分为栈（stack） + 堆（heap） 的结构（1.0 版本）。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210515190729.png"></p><p>线程栈上是有数据的，包括一些局部方法内部的基础类型变量和一些对象的引用指向堆中实例地址。上面这个图太过于粗略了我们加入一点点细节。就像下图酱紫，每个栈有局部变量和对象引用，对象的引用地址指向堆中。（2.0 版本）</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210515192514.png"></p><p>结合下我们之前梳理的类初始化和实例对象有关内存的部分再次简单过一遍。类加载器加载类并且解析成字节码，字节码中会有会有流程控制方法字节码和常量池等信息。其中方法名和类名都会先用常量代替，然后在类加载的解析阶段替换成引用。最后实例对象的时候，会根据类的 class 的常量信息在堆中创建一个实例对象。实例对象主要有三个部分对象头、实例数据、填充数据。这里面对象头里面又有一个 markWord 和 classPointer，classPointer 指向方法区中实例的 class 对象。这一路梳理下来不难发现，我们少了一个常量池和一个方法区。我们再加入一点点细节。（3.0 版本）</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210515195133.png"></p><p>结合之前的知识我设计的一个简单的 JVM 内存结构就出来了，大家可以按照自己的理解动手设计一个内存结构，一定会有不一样的收获。 </p><h3 id="JVM-内存结构概述"><a href="#JVM-内存结构概述" class="headerlink" title="JVM 内存结构概述"></a>JVM 内存结构概述</h3><p> 前面是结合 JVM 的字节码类加载等机制构想设计出来的 JVM 内存，真正的 JVM 内存可能不长这个样子，那真正的 JVM 内存结构长什么样子呢？因为我在之前还是有接触过一些 JVM 内存结构这块的知识，之前的知识已经给我的设计打下一个大致的方向了，所以我画出来的 JVM 的基本逻辑结构和我们设计的大体的方向上还是一致的。JVM 内存结构逻辑上大体分为：线程栈（stack）和 堆内存（heap）两个部分。也就是 1.0 版本一致。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210515190729.png" alt="image.png"></p><p>JVM 中，真在运行的每个线程都有自己的线程栈。线程栈上包含正在执行的方法链/调用链上的所有方法的状态信息。所有线程栈又被成为<code>方法栈</code>或<code>调用栈</code>（call stack）。线程在执行代码的时候，调用栈中的信息会一直变换。我们抛出异常时打印出的堆栈信息也就是这个方法调用栈。</p><p>线程栈上保存了调用链上的正在执行的所有方法的局部变量。</p><ul><li>每个线程只能访问自己的线程栈。</li><li>每个线程栈都不能访问（看不见）其他的线程的局部变量。</li></ul><p>即时两个线程执行完全相同的代码，他们也看不到彼此的局部变量，因为每个线程都会在自己的线程<code>栈内创建</code>代码中对应的局部变量，也就是说每个线程栈中的数据只是一个<code>副本</code>，线程与线程之间并不共享。</p><ul><li>所有的原生数据变量都存储在线程栈中，因此对其他线程不可见。</li><li>线程栈可以将一个原生变量的副本传给另外一个线程，但不共享原生变量副本本身。</li><li>堆中包含了Java 代码中创建的所有对象，不管是哪个线程创建的，其中也涵盖了包装类型（例如 Byte、Integer、Boolean 等）。</li><li>不管是创建给局部变量，还是创建对象赋给局部变量，创建的对象都会保存在堆中。</li></ul><blockquote><p>简单来说就是，原生数据类型和对象引用在线程栈上，实例对象，对象成员来、类定义和静态变量都在堆上。线程栈上的数据是副本，所以线程之间相互隔离。</p></blockquote><p>堆内存又称为<code>共享堆</code>，<code>堆中的所有对象可以被所有的线程访问到</code>，只要他们能拿到对象的引用地址。</p><ul><li>如果一个线程能访问到某个对象，也就可以访问该对象的成员变量。</li><li>如果两个线程能同时调用同一个方法，则它们它们都可以访问到这个对象的成员变量，但每个线程的局部变量副本都是独立的。（方法传入同一对象，只要是同一引用就都能看见。）</li></ul><p>把上面这些东西落实到图上就是我们的 2.0 版本。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210515192514.png"></p><blockquote><p>简单小总结下：虽然各个线程自己使用的局部变量都在自己的线程栈上，但是大家可以共享堆上的对象。如果不同线程访问同一个对象实例的基础类型的成员变量，并往自己的线程栈上赋值，实例对象会给线程一个变量副本。</p></blockquote><h3 id="栈内存结构"><a href="#栈内存结构" class="headerlink" title="栈内存结构"></a>栈内存结构</h3><p>前面我们自己尝试设计的栈结构非常的简单，就是一个简单栈的数据结构，实际上并不完全是这样。结合前面方法调用部分的知识，栈的逻辑区域里应该有很多的线程栈，毕竟一个线程就会创建一个线程栈（调用 JNI 方法会使用 Native 栈）。而且线程栈里面应该也会有很多的栈帧，因为我们知道每调用一个方法就会创建一个栈帧，就类似下面这样的一个结构。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210516153009.png"></p><p>我们知道调用方法就会创建栈帧，栈帧里面有<code>操作数栈</code>，<code>局部变量表</code>和一个<code>class/method引用</code>，有了这些还不够这些只能保证方法的顺利执行，方法执行之后还要返回。所以还有一个<code>返回地址</code>。所以栈帧内部的图大致是这样的。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210516154106.png"></p><h3 id="堆内存的结构"><a href="#堆内存的结构" class="headerlink" title="堆内存的结构"></a>堆内存的结构</h3><p>在上面的线程的分析图中，我们可以看到在 JVM 进程里面有堆内存和非堆内存，这个非堆又是什么呢？别着急我们慢慢往下看。在前面的概述介绍堆的时候说堆是对所有线程共享的内存区域。大家都知道我们 JVM 是会自动GC的，不会在被引用或者说死掉的对象会被回收，但是所有的对象他们呢生命周期都是一样的吗？会不会存在一些永远不会被回收的对象呢？答案是存在的。在前面的类加载的小节中我们说过，JVM 会把类加载进内存，会创建 Class 对象并且会保存类常量池中的常量。如果我们这部分的数据被 GC 了，那我们遇到所有的需要加载类的场景又将重新加载。这将极大影响 JVM 整体的性能。所以这里的堆也被称为：GC 管理的堆（GC Heap）。如果堆和栈的逻辑划分是建立在线程是否可以共享的纬度逻辑上，那么堆和非堆的逻辑划分就是建立实例对象生命周期的纬度上的。</p><p>为了最高化的提高 GC 的效率，堆也划分除了新生代和老年代的概念，就像这个字面意思一样，新生代都是新创建的对象，这些对象在新生代经历几次GC，如果他们还活着那么它们将进入老年代。但这也不绝对，在某些特定的场景下新创建的对象会直接进入老年代。</p><p>非堆本质上还是堆，但是一般不归 GC 管理。里面大致划分为3个内存池。</p><ul><li><code>Metaspace</code>, 以前叫持久代(永久代, Permanent generation), Java8换了个名字叫 Metaspace.  Java8将方法区移动到了Meta区里面，而方法又是class的一部分。。。和CCS交叉了? </li><li><code>CCS, Compressed Class Space,</code> 存放class信息的，和 Metaspace 有交叉。 </li><li><code>Code Cache</code>, 存放 JIT 编译器编译后的本地机器代码。 </li></ul><h3 id="其他部分和鸟瞰-JVM-内存"><a href="#其他部分和鸟瞰-JVM-内存" class="headerlink" title="其他部分和鸟瞰 JVM 内存"></a>其他部分和鸟瞰 JVM 内存</h3><p>除了栈和堆 JVM 还有一个 <code>PC 计数器</code> 这个计数器类似于 CPU 的寄存器，<code>用于记录下一条指令的位置</code>。在早期的CPU 都是单核的，那如果实现多线程呢？没错，使用切换执行上下文的方式 。所以 PC 计数器记录的就是当前线程执行的位置，让 CPU 切换回来的时候能继续执行下去。还有一个部分就是直接内存。直接内存不是运行时数据的一部分，也不是《Java内存规范》中定义的一部分，它是 JVM 直接向内存申请的空间。一般不会直接操作，但是在Netty中有相关的配置参数。结合上面所有的梳理的点，我们可以试着画出一个大致的 JVM 内存图了。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210516164240.png"></p><h3 id="内存溢出分析"><a href="#内存溢出分析" class="headerlink" title="内存溢出分析"></a>内存溢出分析</h3><p>Java 虽然有全自动的 GC，但是也不能避免内存溢出的问题。那如何解决内存溢出的问题，要想解决这个问题先要搞明白内存溢出是什么？内存溢出（OOM）指的是当程序需要的内存中存在过多无法回收的内存，最终使得<code>内存需要的空间大于系统能提供的最大空间</code>，这时候一般系统会抛出 OOM 异常。</p><blockquote><p>这个类似于很早之前我们内存很小的手机同时打开了很多的后台应用，这个时候你又打开了一个很吃内存的游戏，然后这个游戏突然闪退了。。。这个时候往往通过手动清理后台或者重启手机之后再次打开的方式解决。</p></blockquote><p>前段时间看到一个问题内存溢出和内存泄漏有什么区别。内存泄漏这一听就知道不是一个好词，内存泄漏<code>往往指的是申请了内存资源之后由于某些原因迟迟不能释放</code>。造成系统资源的浪费，减慢程序运行速度，最终可能会内存溢出拖垮整个系统。所以内存泄漏更多的偏向是代码层面造成的资源浪费，内存泄漏有可能会导致OOM。</p><blockquote><p>两者关系 内存泄漏可能会导致内存溢出，内存溢出会抛出异常，内存泄漏不会，并且大多数时候系统看上去像是正常运行的。</p></blockquote><p>所以哪些 JVM 里面哪些区域会内存泄漏呢？在那些区域不会内存溢出呢？在《Java虚拟机规范》中只定义一个地方不会发生内存溢出。那就是 PC 计数器，因为 PC 记录器记录的就是当前线程执行的位置，所以 PC 计数器中只保存一个数。这个内存大小不会随着程序的执行而增加。每申请一个线程就会创建一个 PC 计数器。其他的内存区域随着空间的分配都可能存在 OOM。</p><h2 id="JMM-内存模型介绍"><a href="#JMM-内存模型介绍" class="headerlink" title="JMM 内存模型介绍"></a>JMM 内存模型介绍</h2><h3 id="CPU-指令与乱序执行"><a href="#CPU-指令与乱序执行" class="headerlink" title="CPU 指令与乱序执行"></a>CPU 指令与乱序执行</h3><p>学计算机的都知道，基本上计算机的指令集分为两种，精简指令集和复杂指令集合，其中精简指令集是以 ARM 架构为主，现在的手机芯片和苹果的 m1 都是基于 ARM 架构的，其特点就是功耗低但是性能较弱，但是随着这几年的芯片技术的提升，ARM 架构芯片的性能也在逐步提高，例如苹果的M1芯片也可以吊打 Intel 的CPU。复杂指令集的代表就是 Intel 和 AMD 的 x86 架构的芯片，基于复杂指令集的特点就是功耗比较高，但是性能强。我们都知道 CPU 有很多的指令，实现一个操作有很多的方式，复杂指令集把这些操作封成一个复杂指令，而基于简单指令集的CPU把这个复杂操作拆分多个简单指令去完成。两者都可以完成这个操作，但是，就效率而言还是复杂指令集更高。</p><p>不管是哪一种指令集，CPU 的流水线工作方式都是一致的。如果一个操作的所有的指令都放在一个流水线上，这样很多的流水线就是闲置的，所以聪明的开发者想到一个办法就是，只要保证最后的执行结果是正确的，乱序执行也没关系。所以CPU完全可以根据需要通过内部调度把这些指令打乱了执行，充分利用流水线资源，只要最终结果是等价的那么程序的正确性就没有问题。但这在如今多CPU内核的时代，随着复杂度的提升，并发执行的程序面临了很多问题。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210517004750.png"></p><h3 id="JMM-概述"><a href="#JMM-概述" class="headerlink" title="JMM 概述"></a>JMM 概述</h3><p>随着多核时代的到来和 JVM 多线程并发执行，JVM在不同环境下保证程序执行结果正确性变得越来越复杂。因此 JVM 推出一套 Java  内存模型来统一约束线程之间可见性等一系列规则，来保证最终执行结果的正确性。JMM规范明确定义了不同的线程之间，通过哪些方式，在什么时候可以看见其他线程保存到共享变量中的值；以及在必时如何对共享变量的访问进行同步。这样的好处是屏蔽各种硬件平台和操作系统之间的内存访问差异，实现了Java并发程序真正的跨平台。 其中并发中的很多的关键字包括 synchronzied，volatile 都是 JMM 定义的。这些内容我们将放到多线程实战部分进行梳理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一小节我们承接之前的学的关于Java运行时数据的一些知识，尝试动手设计一个简单的 Java 内存结构。Java 内存结构包括 堆、栈、PC 计数器，其中栈，每个线程都会创建一个线程栈，栈也分方法栈和 Native 栈，线程栈内又包括很多的栈帧用于存储当前线程方法调用的数据。堆的逻辑内存区也分堆和非堆，堆也称为 GC 管理的堆，因为堆是 GC 工作的区域，堆里面也分新生代和老年代。非堆中主要包括元数据区、Compressed class space 和 code cache ，其中元数据区域主要包括方法区和常量池，CCS 保存的 Class 信息，Code cache 存储 JIT 编译后的机器码。每一个线程都有自己的 PC 计数器，PC 计数器负责记录当前程序执行的位置，方便 CPU 进行上下文切换回来之后能跳到正确的位置继续执行。在这些区域中，除了了PC 计数器所有的内存区域都会发生内存溢出。最后我们简单过了下 JMM 也就是 Java 内存模型，JMM规范明确定义了不同的线程之间的可见性和访问同步，保证 JVM 在不同的环境下都能得到一致且正确的结果。具体的 JMM 的细节我们放在并发编程模块再来细细的梳理。加油，晚安！</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/136748306">三分钟带你了解冯.诺依曼结构</a></li><li>Java内存模型：海不辞水，故能成其深 </li></ul>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM 基础 — 类加载机制和对象内存布局</title>
    <link href="/2021/05/14/class-load-and-jol/"/>
    <url>/2021/05/14/class-load-and-jol/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面一篇中提到了方法的调用，方法在类加载阶段会由符号引用替换实际引用或者方法表的索引。Java 的类加载机制又是怎么样的呢？这里聊一个小插曲，我记得我刚毕业那会去面中兴，基础的问题都回答的挺好的但是最后面试官问了我这个问题，Java 虚拟机是怎么加载一个类的？我当时脑子懵了，对象怎么加载到内存？对象是 new 出来的的啊，还要加载？我也对这块不太了解，然后面试官也就没深了问。但是现在看来，如果是进阶 Java 的话这是一个基础不能在基础的问题了。类加载了这还不算完，Java 的类是怎么保存的，我相信很多朋友会回答存放在堆里，那其他特殊的类型呢 例如 String 类型又是怎么存储的呢？我们在内存溢出的时候，对象怎么就把我们的堆给堆满了，每个对象占了多大的空间呢？请朋友们慢慢往下看。</p><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>想要知道一处的细节不如先鸟瞰全局，先了解类的声明周期是什么样的先有个大体的概念。在了解的类的声明周期之后才能更好的理解 JVM 是如何加载一个类的</p><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210511003453.png"></p><p>上面这张图是非常经典的一张图，类的生命周期有7个步骤，分别是 <code>加载（Loading）</code>、 <code>验证（Verification）</code>、<code>准备（Preparation）</code>、<code>解析（Resolution）</code>、<code>初始化（Initialization）</code>、<code>使用（Using）</code>、<code>卸载（Unloading）</code>。其中前五个部分（加载、验证、准备、解析、初始化）统称为类加载。</p><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>加载阶段也称作”装载”阶段。这个阶段主要的操作是，更具明确知道的 class 完全限定名，来获取类的二进制的 .class 文件</p><p>简单来说就是从文件系统/jar包中/或者网路中，任何地方存在的<code>class文件</code>，如果没找到会抛出 <code>NoClassDefFound</code> 错误。加载阶段不会检查 classfile 的格式和语法问题，只是单纯的加载文件。类加载的整个阶段由 JVM 和类加载器（某一个）共同协作完成。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>验证阶段也是链接过程的第一个阶段，这个阶段的操作逻辑也很简单，就是确保 class 文件的字节流数据是符合虚拟机要求的不会危害到虚拟机的安全。简单来说就是一些格式和语法的校验，在这个过程中可能会抛出 <code>VerifyError</code>，<code>ClassFormatError</code> 或 <code>UnsupportedClassVersionError</code>，注意这里排除的 Error 错误，Error 只有虚拟机无法正常执行了才会抛出的异常。</p><p>验证也是链接的一部分，所以在这个部分 JVM 必须加载所有的超类和接口。如果发现类的层次结构有问题 JVM 会抛出 <code>ClassCircularityError</code>。而如果实现接口不是一个 interface，或者声明的超类不是一个 interface 也会抛出 IncompatibleClassChangeError。</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>在这个阶段会创建静态字段并为其初始化标准默认值（比如 <code>null</code> 或者 0），并分配方法表，及在方法区中分配这些方法的使用的<code>内存空间</code>。⚠️ 请注意，在这个阶段没有执行任何的 Java 代码。</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>然后JVM 会进入可选的解析符号引用阶段。也就是解析类文件里面的常量池，主要有下面四种：类或接口的解析、字段解析、类方法解析、接口方法解析。在解析阶段要做的是就是把符号引用解析为直接引用（相当于直接指向了实际的对象），如果有了直接引用，那么引用的目标对象一定在堆中。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>如果直接赋值的静态字段被 final 所修饰，并且它的类型是基本类型或字符串时，那么该字段便会被 Java 编译器标记成常量值（ConstantValue），其初始化直接由 Java 虚拟机完成。除此之外的直接赋值操作，以及所有静态代码块中的代码则会被 Java 编译器置于同一方法中，并把它命名为<code>&lt;clinit&gt;</code>。</p><p>类只有在首次 “主动使用” 才能执行类的初始化。是 <clinit> 方法不是构造器，只有主动使用才会调用构造器方法。</p><p>类加载的最后一步是初始化，便是为标记为常量值的字段赋值，以及执行 &lt; clinit &gt; 方法的过程。Java 虚拟机会通过加锁来确保类的 &lt; clinit &gt; 方法仅被执行一次。</p><blockquote><p>这个流程应该是每个Java 程序员都应该熟记于胸的，一开始我记忆这个部分也是硬着头皮记，也很容易忘。偶然有一天我在饭，突然发现这个类加载机制像做饭的过程。加载过程就像是买菜，类加载进入JVM 就像把菜买回家。然后菜买回来之后呢，要检查检查，确认买的菜都是对的，不然买错了或者什么漏买了就很尴尬了，这个过程呢就像类加载流程里面的验证，要检查字节码文件符合虚拟机要求不会危害到虚拟机安全。做饭也要需要准备，要洗菜择菜，就像我们的准备阶段为类准备分配内存空间。这部分结束了，我们就可以热锅开始做菜了。这个部分按照菜谱加入各种调味料，把各个食材混合在一起，就像解析，把各个符号引用替换为直接引用，让各个部分关联起来。然后我们菜就做好了，我们就可以装盘出锅了。这个部分就是类的初始化，经过这个部分之后，一个类就可以正常的使用了，我们也可以吃饭了，最后类使用完之后卸载，我们吃完了也就要洗碗了。哈哈是不是很像。</p><p>加载 -&gt; 验证 -&gt; 准备 -&gt; 解析 -&gt; 初始化 -&gt; 使用 -&gt; 卸载。</p><p>买菜 -&gt; 检查菜 -&gt; 洗菜 -&gt; 炒菜 -&gt; 装盘 -&gt; 吃饭 -&gt; 洗碗。 </p></blockquote><h3 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a>类的加载时机</h3><p>类并不是在虚拟机一启动就会全部加载进来，而是会<code>按需加载</code>，那在什么时候才会加载目标类呢？</p><ol><li>当虚拟机启动时，初始化用户指定的主类。</li><li>当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类。</li><li>当遇到调用静态方法的指令时，初始化该静态方法所在的类。</li><li>当遇到访问静态字段的指令时，初始化该静态字段所在的类。</li><li>子类的初始化会触发父类的初始化。</li><li>如果一个接口定义了 deault 方法，那么直接实现偶着间接实现该接口的类初始化，会触发该接口的初始化。</li><li>使用反射 API 对某个类进行反射调用时，初始化这个类。</li><li>当初次调用 MethodHandler 实例，初始该 MethodHandler 指向的方法所在类。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyHolder</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> LazyHolder.INSTANCE;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码是在著名的单例延迟初始化，只有当调用 Singleton.getInstance 时，程序才会访问 LazyHolder.INSTANCE，才会触发对 LazyHolder 的初始化（对应第 4 种情况），继而新建一个 Singleton 的实例。</p><h3 id="类加载器机制"><a href="#类加载器机制" class="headerlink" title="类加载器机制"></a>类加载器机制</h3><p>类的加载过程可以描述为”通过一个类的全限定名 a.b.c.xxx.XXClass 来获取此类的 Class 对象。这个过程由类加载器来完成。这样的好处在于，子类加载器可以复用父加载器加载的类。系统自带的加载器分为三种：</p><ul><li><code>启动类加载器</code>（BootstrapClassLoader）</li><li><code>扩展类加载器</code>（ExtClassLoader）</li><li><code>应用类加载器</code>（AppClassLoader）</li></ul><p>一般启动类加载器是由 JVM 内部实现的，在 Java 的 API 里面是无法拿到了，是用 C++ 实现的，后面两种在 Oracle Hotspot JVM 中，都在 sun.misc.Lanucher 定义的，扩展类加载器和应用类加载器一般都继承自 <code>URLClassLoader</code> 类，这个类也默实现了从不同的源来加载 class 字节码换成的 Class 的方法。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210512000947.png"></p><ol><li>启动类加载器（bootstrap class loader）：它用来加载 Java 的核心类，用原生的 C++ 实现并不继承自 java.lang.Classloader。负责加载 JDK 中 <code>jre/lib/rt.jar</code> 中的所有 class。可以把它看作是 JVM 自带的，同时我们也无法获取它的引用。</li><li>扩展类加载器（extensions class loader）：它用来加载 <code>lib/ext</code> 或者由系统路径 <code>java.ext.dirs</code> 指定的目录中的 Jar 包中的类。</li><li>应用类加载器（application class loader）：它负责在 JVM 启动时加载来自 <code>Java 命令 -classpath</code> 或者 <code>-cp</code> 或者指定系统路径 <code>java.class.path</code> 系统属性指定的 jar 包和类路径。 可以通过 <code>ClassLoader.getSystemClassLoader()</code> 来获取类应用加载器。</li></ol><p>用户可以自定义类加载器，如果自定义类加载器，自定义的类加载器的应该以应用加载器作为父类。下面就是一个自定类加载器。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> HelloXlassLoader extends ClassLoader &#123;<br><br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Object hello = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HelloXlassLoader()</span>.find<span class="hljs-constructor">Class(<span class="hljs-string">&quot;Hello&quot;</span>)</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>            Method <span class="hljs-keyword">method</span> = hello.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;hello&quot;</span>)</span>;<br>            <span class="hljs-keyword">method</span>.invoke(hello);<br>        &#125; catch (Exception e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125;<br>    &#125;<br><br>    @Override<br>    protected Class&lt;?&gt; find<span class="hljs-constructor">Class(String <span class="hljs-params">name</span>)</span> throws ClassNotFoundException &#123;<br>        byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = get<span class="hljs-constructor">BytesFromXXX()</span>;<br>        handle<span class="hljs-constructor">Bytes(<span class="hljs-params">bytes</span>)</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bytes</span>.length<span class="hljs-operator"> == </span><span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;file load error&quot;</span>);<br>        &#125;<br>        return define<span class="hljs-constructor">Class(<span class="hljs-params">name</span>, <span class="hljs-params">bytes</span>, 0, <span class="hljs-params">bytes</span>.<span class="hljs-params">length</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类加载器有三个特点：</p><ol><li><code>双亲委派</code>：大名鼎鼎的双亲委派其实很简单，也没有什么所谓的双亲，就是优先给父类加载器加载，如果父类加载不了再自己来加载。例如 String 类型，appClassLoader 看到了不加载，给 extClassLoader，extClassLoader 也不加载，给bootstrapClassLoader 加载，bootstrapClassLoader 一看 java.lang.String 是在 rt 包里的就给加载了。这也不是说加载器懒，这样可以保证，<code>某一个类每次都能被特定的某个加载器加载。</code></li><li><code>负责依赖</code>：如果一个加载器在加载某个类的时候，发现这个类依赖的另外几个类或者接口，也会去是这尝试加载这些依赖。</li><li><code>缓存加载</code>：为了提高效率避免重复加载，一旦某个类被一个加载器加载，那么它就会缓存这个加载结果，不会重复加载。这也是双亲委派的目的。</li></ol><h2 id="对象内存布局"><a href="#对象内存布局" class="headerlink" title="对象内存布局"></a>对象内存布局</h2><p>前面的部分我们聊到了，Java 对象是如何加载一个类的，但是我们要真正的使用一个对象，需要根据我们加载的类去创建一个对象。那创建的过程是怎么样的呢？</p><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><p>我想起来一个段子，把大象放进冰箱需要几步？需要三步！打开冰箱门，把大象放进冰箱，把门关上。其实我们的 Java 创建对象过程也可以大致分为三步，申请内存 —&gt; 初始化数据（代码块和构造）-&gt; 关联引用。</p><ol><li><code>构建对象</code>（申请空间），这个过程首先线程会申请一个栈空间，并且生成栈帧然后执行 new 操作。线程会根据加载的类信息申请一块内存构建对象，并且为成员变量赋默认值。</li><li><code>对象初始化</code>，这个部分就是执行 {} 代码块和构造方法了。</li><li><code>关联引用</code>，我们创建的对象的引用是在栈上面，然而我们创建的对象是在堆中，最后一步就是把栈上的对象引用指向堆中的地址。</li></ol><blockquote><p>打开冰箱 = 申请空间，放入大象 = 对象初始化， 关联引用 = 关上冰箱门 </p></blockquote><h3 id="对象在内存的布局"><a href="#对象在内存的布局" class="headerlink" title="对象在内存的布局"></a>对象在内存的布局</h3><p>我们现在创建好了一个对象，难道一个对象在堆中存的就真的是一堆变量数据就没有其他的东西吗？</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210513231532.png"></p><p>对象在内存的中并不只有实例的数据，而是包含三个部分，<code>对象头</code>、<code>实例数据</code>、<code>内存填充</code>。</p><ul><li>对象头：按照实例对象的不同，对象头也有不同，主要的就是包含<code>Mark word</code>，<code>class pointer</code>，数组对象还包括数组长度。MarkWord 里面包含有对象的哈希码，锁信息，GC 等信息。ClassPointer 这个很明显，这是一个指针指向方法区的 Class 对象 ，在数组实例中还要记录数组的长度，在 64 位的系统中markWord占<code>8</code>个字节，如果开启指针压缩，这个大小可以压缩到 <code>4</code>个字节，也就是如果不开启指针压缩的话，再加上 class pointer 4 个字节，实例对象头 12 个字节，数组对象头占 16 个字节，开启指针压缩后，实例对象 对象头8个字节，数组对象对象头 12 个字节。</li></ul><blockquote><p>对象头 不开启指针压缩 实例 12 字节，数组 16 字节，开启指针压缩 实例 8 字节，数组 12 字节。</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">-XX:+UseCompressedOops  <span class="hljs-regexp">//</span> 开启指针压缩<br>-XX:-UseCompressedOops  <span class="hljs-regexp">//</span> 关闭指针压缩<br></code></pre></td></tr></table></figure><ul><li>实例数据：这个很好理解就是类实例中的数据。</li><li>内存对齐：我们的 CPU 寄存器的位数都是 8 的倍数，所以为了方便 CPU 寄存器高效寻址，64 位 JVM 要求 Java 对象地址要按照 8 字节对齐。这个部分做数据填充保证 8 字节对齐。</li></ul><blockquote><p>⚠️这里有个小知识点，Java 实例被 GC 之后，对象的 Hash 码会变码？那栈中的引用地址会变化吗？我们都知道 Java 对象的 Hash 码和对象地址有关系。如果一个对象被 GC 过后还存活的话，如果在 young 区，那地址大概率会发生变化，那Hash 码是不是也不一样呢？我们通过实验可以很容易验证这个问题，Hash 码不会发生变化，但是地址会发生变化，这是怎么做到的？来，抬头往上看，对象头中是不是有个哈希码信息。在第一次调用对象 hashCode 方法，就会把 hashCode 存在这里，后面的 hashCode 直接来这里取就好了。 </p></blockquote><p>整体的大致的对象存储布局就是酱婶儿的。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210513235300.png"></p><h3 id="JOL-实践"><a href="#JOL-实践" class="headerlink" title="JOL 实践"></a>JOL 实践</h3><p>什么是 JOL ？JOL （Java object layout）Java 对象内存布局，是 openjdk 给我们提供了一个工具包，可以用来获取对象的信息和虚拟机的信息 。我们来引入下 jol-core 的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjdk.jol<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jol-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主要会用到的方法：</p><ul><li><code>ClassLayout.parseInstance(object).toPrintable()</code>：查看对象内部信息。</li><li><code>GraphLayout.parseInstance(object).toPrintable()</code>：查看对象外部信息，包括引用的对象。</li><li><code>GraphLayout.parseInstance(object).totalSize()</code>：查看对象总大小。</li></ul><p>我们创建一个普通对象，空对象开开胃。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">A</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>这个对象一个成员变量都没有，那么一个 A 实例占用几个字节呢？我们没有开启指针压缩，markWord 8 个字节， class pointer 4 个字节，8 + 4 = 12 然后 8 个字节对齐 也就是 16 个字节。我们使用 JOL 打印出来看看。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> static <span class="hljs-built_in">void</span> main(String[] args) &#123;<br>    A a = new A();<br>    System.<span class="hljs-keyword">out</span>.println(ClassLayout.parseInstance(a).toPrintable());<br>&#125;<br><br><span class="hljs-comment">// console～</span><br>io.daiwei.jvm.jol.A object <span class="hljs-built_in">int</span>ernals:<br>OFF  SZ   TYPE DESCRIPTION               VALUE<br>  <span class="hljs-number">0</span>   <span class="hljs-number">8</span>        (object header: mark)     <span class="hljs-number">0x0000000000000001</span> (non-biasable; age: <span class="hljs-number">0</span>)<br>  <span class="hljs-number">8</span>   <span class="hljs-number">4</span>        (object header: <span class="hljs-keyword">class</span>)    <span class="hljs-symbol">0xf800c182</span><br> <span class="hljs-symbol">12</span>   <span class="hljs-symbol">4</span>        (<span class="hljs-symbol">object</span> <span class="hljs-symbol">alignment</span> <span class="hljs-symbol">gap</span>)    <br><span class="hljs-symbol">Instance</span> <span class="hljs-symbol">size: <span class="hljs-symbol">16</span></span> <span class="hljs-symbol">bytes</span><br><span class="hljs-symbol">Space</span> <span class="hljs-symbol">losses: <span class="hljs-symbol">0</span></span> <span class="hljs-symbol">bytes</span> <span class="hljs-symbol">internal</span> + <span class="hljs-symbol">4</span> <span class="hljs-symbol">bytes</span> <span class="hljs-symbol">external</span> = <span class="hljs-symbol">4</span> <span class="hljs-symbol">bytes</span> <span class="hljs-symbol">total</span><br></code></pre></td></tr></table></figure><p> 那么一个数组对象呢？我们前面提到数组对象实例对象头中会多一个<code>length field</code>用来存数组的长度。按照我们的计算逻辑，我们没开启指针压缩，markWord 占用 8 个字节，classPonter 占 4 个字节，因为数数组对象多一个 lengthField 4 个字节。也就是 4 + 4 + 8 = 16，刚好对齐 16 个字节。真的是这样吗？没落下什么吗？</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tap">public static void main(String[] args) &#123;<br>    int[] nums = new int[10];<br>    System.out.println(ClassLayout.parseInstance(nums).toPrintable());<br>&#125;<br><br>// console～<br>[I object internals:<br>OFF  SZ   TYPE DESCRIPTION               VALUE<br> <span class="hljs-number"> 0 </span> <span class="hljs-number"> 8 </span>       (object header: mark)     0x0000000000000001 (non-biasable; age: 0)<br> <span class="hljs-number"> 8 </span> <span class="hljs-number"> 4 </span>       (object header: class)    0xf800016d<br><span class="hljs-number"> 12 </span> <span class="hljs-number"> 4 </span>       (array length)            10<br><span class="hljs-number"> 12 </span> <span class="hljs-number"> 4 </span>       (alignment/padding gap)   <br><span class="hljs-number"> 16 </span><span class="hljs-number"> 40 </span>   int [I.&lt;elements&gt;             N/A<br>Instance size:<span class="hljs-number"> 56 </span>bytes<br>Space losses:<span class="hljs-number"> 4 </span>bytes internal +<span class="hljs-number"> 0 </span>bytes external =<span class="hljs-number"> 4 </span>bytes total<br></code></pre></td></tr></table></figure><p> 实际的实例的大小是56，仔细看，打印结果的第13行，多了 40 个字节，这是啥呢？没错是我们长度为10的数组内容，一个 int 类型四个字节就是 40 个字节。所以最终的大小就是 16 + 40 = 56 刚好也不用对齐～。 </p><p>再来看一个例子，一个稍微正常点的对象 B。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">B</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String hello;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> a;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span>ean b;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>B 对象包含，一个 String，一个int 和一个 boolean，我们根据之前的经验可以推出 没有开启指针压缩，对象头12个字节，String 是一个引用4个字节，int  4 个字节，boolean 一个字节，所以 12 + 4 + 4 + 1 =  21 个字节，然后内存对齐，实例大小 24 个字节。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>    B b = <span class="hljs-keyword">new</span> <span class="hljs-constructor">B()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLayout</span>.</span></span>parse<span class="hljs-constructor">Instance(<span class="hljs-params">b</span>)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">Printable()</span>);<br>&#125;<br><br><span class="hljs-comment">// console～</span><br>io.daiwei.jvm.jol.B <span class="hljs-keyword">object</span> internals:<br>OFF  SZ               TYPE DESCRIPTION               VALUE<br>  <span class="hljs-number">0</span>   <span class="hljs-number">8</span>                    (<span class="hljs-keyword">object</span> header: mark)     <span class="hljs-number">0x0000000000000001</span> (non-biasable; age: <span class="hljs-number">0</span>)<br>  <span class="hljs-number">8</span>   <span class="hljs-number">4</span>                    (<span class="hljs-keyword">object</span> header: <span class="hljs-keyword">class</span>)    <span class="hljs-number">0xf800c143</span><br> <span class="hljs-number">12</span>   <span class="hljs-number">4</span>                <span class="hljs-built_in">int</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>a                       <span class="hljs-number">0</span><br> <span class="hljs-number">16</span>   <span class="hljs-number">1</span>            boolean <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>b                       <span class="hljs-literal">false</span><br> <span class="hljs-number">17</span>   <span class="hljs-number">3</span>                    (alignment/padding gap)   <br> <span class="hljs-number">20</span>   <span class="hljs-number">4</span>   java.lang.String <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>hello                   null<br>Instance size: <span class="hljs-number">24</span> <span class="hljs-built_in">bytes</span><br>Space losses: <span class="hljs-number">3</span> <span class="hljs-built_in">bytes</span> internal + <span class="hljs-number">0</span> <span class="hljs-built_in">bytes</span> <span class="hljs-keyword">external</span> = <span class="hljs-number">3</span> <span class="hljs-built_in">bytes</span> total<br></code></pre></td></tr></table></figure><p>没毛病，最终实例大小 24 个字节。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一小节呢，我们从类的生命周期入手深入了解了类的加载过程和实例在内存中的对象布局，类的生命周期分为 加载，验证，准备，解析，初始化，使用、卸载。过程可以类比做菜的过程。其中类并不是在 JVM 启动时全部加载而是按需加载的。接下来我们介绍了类加载器，有启动类加载器，拓展类加载器和应用类加载器。他们采用双亲委派的方式，所谓的双亲委派就是先由父类加载，父类如果加载在不了再由子类加载，这样可以保证每个类每次都由某个特定的类加载器加载。我们还可以自定义类加载实现加载逻辑的自定义化，这个自定义类加载器的父类是应用类加载器。聊完类的加载，我们探讨了实例的内存布局，一个实例分为对象头，实例数据和填充数据这三个部分，其中对象头又包括 markWord、klassPointer和数组对象特有的 lengthField，对象头的大小受是否开启指针压缩有关。最后我们使用 openJDK 提供的JOL工具验证了我们的理论对象布局理论。这是JVM基础正式篇的最后一小节，接下来我们会一起探讨 JVM 的内存，GC 和 高效编译的部分。接下来的 JVM 会更加精彩，我们一起来看看，有了这些东西 JVM 会玩出些啥不一样的。哈哈，晚安～</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/142614439">JVM基础（三）一个对象的创建过程</a></li><li><a href="https://www.cnblogs.com/jajian/p/13681781.html">Java 对象的内存布局</a></li><li>Java类加载器：山不辞土，故能成其高 </li></ul>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM 基础 — Java 方法调用、反射调用与异常</title>
    <link href="/2021/05/09/java-method-invoke/"/>
    <url>/2021/05/09/java-method-invoke/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前一篇中简单介绍了Java 字节码中有关方法调用的一些操作码，但是 java 方法的调用往深了讲又有很多的门道，简单的有方法的重写和重载，深入也有方法的动态绑定和静态绑定，那JVM是如果识别和选定方法的呢？还有有些时候我们并不能直接调用某个目标方法，而是要使用一些特别的手段去调用，也就是我们会经常用到的反射，反射不同于常规的方法调用，这货一上来就不走寻常路，一般方法调用都是先 new 一个对象，就像是朋友来家里做客从正门进来，反射是先通过 class 对象找到目标方法然后传入调用实例，这更像是翻墙进来。那这个翻墙进来的它背后的原理又是怎样的呢？假如这个世界是美好的，但一个方法的执行可能没那么顺利，万一发生了异常这个异常又是怎么捕获的呢？</p><h2 id="Java-方法调用原理"><a href="#Java-方法调用原理" class="headerlink" title="Java 方法调用原理"></a>Java 方法调用原理</h2><h3 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h3><p>在 Java 程序里如果一个类出现了多个名字相同且参数类型相同的方法，那么他们是无法通过编译的。在正常情况下，通常会出现方法名相同但是方法参数类型不相同。这种情况称之为<code>重载</code>。</p><p>重载的方法在编译过程中即可完成方法的识别。Java 编译器会根据方法名和传入的参数的<code>声明类型</code>选取重载方法。选取的过程分为三个阶段：</p><ol><li>在不考虑对基本类型自动装拆箱（auto-boxing， auto-unboxing），已经可变长参数的情况下选取重载方法。（<code>不考虑自动装拆箱，不考虑变长参数</code>）</li><li>如果在第 1 个阶段中没有找到适配的方法，那么在允许自动装拆箱，但是不允许可变长参数的情况下选取重载方法。（<code>考虑自动装拆箱，不考虑变长参数</code>）</li><li>如果在第 2 个阶段中没有找到适配方法，那么在允许自动装拆箱以及变长参数的情况下选取重载方法。（<code>考虑自动装拆箱，考虑变长参数</code>）</li></ol><p>如果 Java 编译器在同一阶段找到多个适配方法，它会在其中找到一个最为贴切的。而决定贴切程度的一个关键就是形式参数类型的继承关系。重载也适用子类从父类中继承来的方法，也就是说如果子类中定义了和父类非私有方法中方法名相同且方法的参数类型不同的方法，那么在子类中这两个方法也构成了重载。</p><p>Java 是面向对象的语言，其中有个重要的特性就是多态。而方法的重写就是多态的最重要的一种体现形式。通过对方法的重写，允许子类对于不同的动作有自己独特的行为。 在调用重写的方法的过程中，编译器会更具具体的类型调用目标实际的方法。</p><h3 id="JVM-的静态绑定和动态绑定"><a href="#JVM-的静态绑定和动态绑定" class="headerlink" title="JVM 的静态绑定和动态绑定"></a>JVM 的静态绑定和动态绑定</h3><p>前面说到 Java 编译器通过方法名和方法参数类型识别方法，JVM 是通过方法名和方法描述符去识别方法的，<code>方法描述符</code>包括<code>方法参数类型</code>和<code>返回值</code>，注意在JVM的方法描述符中是包括方法的返回值的。所以在一个类中如果出现多个方法名和方法描述符的JVM在类加载的验证阶段就会报错。</p><p>由于重载方法在编译期已经确定，所以我们可以认定，在 JVM 层面不存在重载这一概念。因为对于 JVM来说这就是两个方法。所以针对JVM来说在<code>编译期可以直接解析</code>识别的目标方法就是<code>静态绑定（static binding）</code>，而<code>动态绑定（dynamic binding）</code>指的是需要在<code>运行期间根据调用者的类型来识别目标方法</code>的情况。所以 Java 编译器会将所有对非私有的实例方法解析为需要动态绑定的类型。</p><p>在上一篇字节码中提到了五种关于方法调用操作码</p><ol><li>invokestatic：用于调用静态方法。</li><li>invokespecial：用于调用私有实例方法、构造器，以及使用 super 关键字调用父类的实例方法或构造器，和所实现接口的默认方法。</li><li>invokevirtual：用于调用非私有实例方法。</li><li>invokeinterface：用于调用接口方法（用接口的去调用）。</li><li>invokedynamic：用于调用动态方法。</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> TestMain &#123;<br><br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        HiClass hiClass = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HiClass()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hiClass.hi<span class="hljs-constructor">You(<span class="hljs-string">&quot;daiwei&quot;</span>)</span>);<br>        GoodNight goodNight = (GoodNight) hiClass;<br>        goodNight.good<span class="hljs-constructor">Night(<span class="hljs-string">&quot;daiwei&quot;</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>stream(<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;).reduce(<span class="hljs-number">0</span>, Integer::sum));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成的字节码如下（只截取方法部分）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">public</span> <span class="hljs-string">static</span> <span class="hljs-string">void</span> <span class="hljs-string">main(java.lang.String[]);</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">([Ljava/lang/String;)V</span><br>    <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC,</span> <span class="hljs-string">ACC_STATIC</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=5,</span> <span class="hljs-string">locals=3,</span> <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">new</span>           <span class="hljs-comment">#2                  // class io/daiwei/jvm/HiClass</span><br>         <span class="hljs-attr">3:</span> <span class="hljs-string">dup</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#3                  // Method io/daiwei/jvm/HiClass.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">7:</span> <span class="hljs-string">astore_1</span><br>         <span class="hljs-attr">8:</span> <span class="hljs-string">getstatic</span>     <span class="hljs-comment">#4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        <span class="hljs-attr">11:</span> <span class="hljs-string">aload_1</span><br>        <span class="hljs-attr">12:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#5                  // String daiwei</span><br>        <span class="hljs-attr">14:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#6                  // Method io/daiwei/jvm/HiClass.hiYou:(Ljava/lang/String;)Ljava/lang/String;</span><br>        <span class="hljs-attr">17:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#7                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>        <span class="hljs-attr">20:</span> <span class="hljs-string">aload_1</span><br>        <span class="hljs-attr">21:</span> <span class="hljs-string">astore_2</span><br>        <span class="hljs-attr">22:</span> <span class="hljs-string">aload_2</span><br>        <span class="hljs-attr">23:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#5                  // String daiwei</span><br>        <span class="hljs-attr">25:</span> <span class="hljs-string">invokeinterface</span> <span class="hljs-comment">#8,  2            // InterfaceMethod io/daiwei/jvm/GoodNight.goodNight:(Ljava/lang/String;)V</span><br>        <span class="hljs-attr">30:</span> <span class="hljs-string">getstatic</span>     <span class="hljs-comment">#4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        <span class="hljs-attr">33:</span> <span class="hljs-string">iconst_3</span><br>        <span class="hljs-attr">34:</span> <span class="hljs-string">newarray</span>       <span class="hljs-string">int</span><br>        <span class="hljs-attr">36:</span> <span class="hljs-string">dup</span><br>        <span class="hljs-attr">37:</span> <span class="hljs-string">iconst_0</span><br>        <span class="hljs-attr">38:</span> <span class="hljs-string">iconst_1</span><br>        <span class="hljs-attr">39:</span> <span class="hljs-string">iastore</span><br>        <span class="hljs-attr">40:</span> <span class="hljs-string">dup</span><br>        <span class="hljs-attr">41:</span> <span class="hljs-string">iconst_1</span><br>        <span class="hljs-attr">42:</span> <span class="hljs-string">iconst_2</span><br>        <span class="hljs-attr">43:</span> <span class="hljs-string">iastore</span><br>        <span class="hljs-attr">44:</span> <span class="hljs-string">dup</span><br>        <span class="hljs-attr">45:</span> <span class="hljs-string">iconst_2</span><br>        <span class="hljs-attr">46:</span> <span class="hljs-string">iconst_3</span><br>        <span class="hljs-attr">47:</span> <span class="hljs-string">iastore</span><br>        <span class="hljs-attr">48:</span> <span class="hljs-string">invokestatic</span>  <span class="hljs-comment">#9                  // Method java/util/Arrays.stream:([I)Ljava/util/stream/IntStream;</span><br>        <span class="hljs-attr">51:</span> <span class="hljs-string">iconst_0</span><br>        <span class="hljs-attr">52:</span> <span class="hljs-string">invokedynamic</span> <span class="hljs-comment">#10,  0             // InvokeDynamic #0:applyAsInt:()Ljava/util/function/IntBinaryOperator;</span><br>        <span class="hljs-attr">57:</span> <span class="hljs-string">invokeinterface</span> <span class="hljs-comment">#11,  3           // InterfaceMethod java/util/stream/IntStream.reduce:(ILjava/util/function/IntBinaryOperator;)I</span><br>        <span class="hljs-attr">62:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#12                 // Method java/io/PrintStream.println:(I)V</span><br>        <span class="hljs-attr">65:</span> <span class="hljs-string">return</span><br></code></pre></td></tr></table></figure><p>结合上一篇字节码的知识，这里的字节码不难分析，<code>4: invokespecial</code> 这里是调用构造函数，<code>14: invokevirtual #6 // Method io/daiwei/jvm/HiClass.hiYou</code> 这里是使用 <code>invokevirutal</code> 调用 hiYou 方法。<code>invokeinterface #8,  2 // InterfaceMethod io/daiwei/jvm/GoodNight.goodNight:(Ljava/lang/String;)V</code> 使用 <code>invokeinterface</code> 调用接口方法。<code>52: invokedynamic #10,  0</code> 这里则是 lambda 表达式的 <code>invokedynamic</code>。</p><p>通常情况下 <code>invokestatic</code> 和 <code>invokespeical</code>，JVM 能直接识别出目标方法（静态绑定），而 <code>invokevirutal</code> 和 <code>invokeinterface</code> 则需要在运行时，动态判定目标类型从而确定目标方法（动态绑定）。对于 final 方法可以直接确定目标方法。</p><h3 id="调用指令的符号引用"><a href="#调用指令的符号引用" class="headerlink" title="调用指令的符号引用"></a>调用指令的符号引用</h3><p>在编译过程中，我们并不知道调用目标方法的内存地址。编译器会暂时用方法的符号引用代替目标方法，也就是我们方法方法名和方法描述符，也就是这个 <code>io/daiwei/jvm/HiClass.hiYou:(Ljava/lang/String;)Ljava/lang/String;</code></p><ul><li><code>io/daiwei/jvm/HiClass.hiYou</code> 目标类名方法名。</li><li><code>(Ljava/lang/String;)</code> 参数类型，L代表引用类型 ，这里是引用类型 String。</li><li><code>Ljava/lang/String;</code> 返回类型，引用类型 String。</li></ul><p>这些方法描述符作为常量信息存在类的<code>常量池</code>中。在使用这些符号引用字节码之前，JVM 会在类加载阶段把它替换为真正的引用。</p><p>对于<code>非接口</code>符号引用，假定该符号引用指向类C，则 Java 虚拟机会按照如下步骤查找。（C -&gt; C 父类 -&gt; C 间接实现接口）</p><ol><li>在 C 中查找符合名字及描述符的方法。</li><li>如果没找到，在 C 的父亲类中继续搜索，直至 Object 类。</li><li>如果没找到，在 C 直接或者间接实现的接口中搜索。这一步搜索的方法必须是 非私有，非静态的。</li></ol><p>调用<code>接口</code>符号引用，假定该符号引用指向 I ，则 Java 虚拟机会按照如下步骤进行查找。</p><ol><li>在 I 中查找符合名字及描述符的方法。（I -&gt; Object -&gt;I 超类接口）</li><li>如果没有找到，在 Object 类中的公有实例方法中搜索。</li><li>如果没有找到，则在 I 的超接口中搜索。这一步的搜索结果的要求与非接口符号引用步骤 3 的要求一致。</li></ol><p>经过上述的解析之后，静态方法会被解析成一个方法的指针，而需要动态绑定的方法则会被解析成一个方法表的索引。</p><h3 id="方法表"><a href="#方法表" class="headerlink" title="方法表"></a>方法表</h3><p>Java 虚拟机通过一种用空间换时间的方法来实现动态绑定。在类加载的准备阶段，不仅会为静态字段分配内存，还会生成类的方法表。方法表的是一个本质上是一个数组。这个数据就是动态绑定实现的关键，调用 <code>invokevirutal</code> 有 <code>虚方法表（virtual method table，vtable）</code></p><p>调用 <code>invokeinterface</code> 有<code>接口方法表（interface method table， itable）</code>，itable 会稍微复杂些，但是原理是一致的。在这个数组中每个元素都指向一个当前类或者父类中的一个非私有的实例方法。这些方法可以是具体的可执行的方法，也可以是抽象的没有方法体的抽象方法。方法表满足下面两个关键的特质：</p><ul><li>子类方法表中包含所有的父类方法表的中的所有方法。</li><li>子类方法表中的索引值与他重写父类方法在方法表中的索引值相同。</li></ul><table><thead><tr><th>Person方法表</th><th>walk()</th><th>share()</th><th>talk()</th><th></th></tr></thead><tbody><tr><td>Chinese方法表</td><td>walk()</td><td>share()</td><td>talk()</td><td>chineseDo()</td></tr></tbody></table><p>在上面这个表中 Chinese 类是 Person 的子类，在类加载阶段生成方法表，静态方法解析方法引用的时候将具体的方法替换具体方法的指针，对于动态绑定的方法而言，替换的引用则是方法表中的索引值（实际上并不只是索引值）。这样的话，在方法运行阶段只要拿到运行时的对象，根据它的方法表拿到具体的要执行的目标方法，这个过程便是动态绑定。</p><p>有了额外的操作，就会有额外的性能消耗，但是在类加载阶段生成方法表，解析方法替换成索引，执行阶段查询目标方法，虽然这个过程的很简单，是否可以看作对JVM 没有太大的影响呢？显然是不能的。所以针对这个情况编译器有两个优化手段内联缓存（inline cache）和方法内联（method inline）。</p><h3 id="内联缓存和方法内联"><a href="#内联缓存和方法内联" class="headerlink" title="内联缓存和方法内联"></a>内联缓存和方法内联</h3><p>内联缓存是一种加快绑定的方法，它能够缓存动态调用的类型以及该类型对应的目标方法，如果在后面的调用中击中已缓存类型，会直接从缓存中获取目标方法执行。如果没有命中调用类型，则退化为方法表动态绑定。这是一个典型的用空间换换时间的操作。</p><p>还有一种优化手段那便是方法内联，简单且高频的方法例如一些 get/set 方法，Java 的即时编译器会直接进行方法内联也就是直接把调用的方法和外面的调用优化成一个完整的方法机器码存储起来。用这种方法来提高执行效率。这里要注意方法内联是真内联，而内联缓存附带内联二字，但是它并没有内联目标方法。这里需要明确的是，任何方法调用除非被内联，否则都会有固定开销。这些开销来源于保存程序在该方法中的执行位置，以及新建、压入和弹出新方法所使用的栈帧，也就是内联缓存是假内联。</p><h2 id="Java-反射调用机制"><a href="#Java-反射调用机制" class="headerlink" title="Java 反射调用机制"></a>Java 反射调用机制</h2><p>Java 的反射机制可以让代码在运行阶段自省，可以让代码知道运行阶段的某个对象的某些字段和方法，并进行调用，那 Java 的方法反射调用是如何实现的呢？</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@CallerSensitive<br>public Object invoke(Object obj, Object... args)<br>    throws IllegalAccessException, IllegalArgumentException,<br>       InvocationTargetException<br>&#123;<br>    <span class="hljs-keyword">if</span> (!override) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Reflection</span>.</span></span>quick<span class="hljs-constructor">CheckMemberAccess(<span class="hljs-params">clazz</span>, <span class="hljs-params">modifiers</span>)</span>) &#123;<br>            Class&lt;?&gt; caller = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Reflection</span>.</span></span>get<span class="hljs-constructor">CallerClass()</span>;<br>            check<span class="hljs-constructor">Access(<span class="hljs-params">caller</span>, <span class="hljs-params">clazz</span>, <span class="hljs-params">obj</span>, <span class="hljs-params">modifiers</span>)</span>;<br>        &#125;<br>    &#125;<br>    MethodAccessor ma = methodAccessor;             <span class="hljs-comment">// read volatile</span><br>    <span class="hljs-keyword">if</span> (ma<span class="hljs-operator"> == </span>null) &#123;<br>        ma = acquire<span class="hljs-constructor">MethodAccessor()</span>;<br>    &#125;<br>    return ma.invoke(obj, args);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 invoke 方法的源码，method.invoke()，最终是调用 <code>MethodAccessor.invoke()</code>，而MethodAccessor 又有两个实现类 <code>DeleagetingMethodAccessor</code> 和 <code>NativeMethodAccessor</code> ，一个是使用了委派模式实现调用，另一个则是通过 Native 方法实现反射调用。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210509204937.png"></p><p>在执行反射的时候会优先使用<code>NativeMethodAccessor</code> 直接调用 Native 方法，但是调用 Native 方法要切换成 C++ 执行方法，这个成本是大于一般的方法调用。那我们生成代理每次反射调用我们就去调用我们的代理对象，这样是不是就可以更快了呢？这样只是方法调用变快了，但是生成代理对象是很慢的，那生成代理对象的时间成本又怎么计算呢？所以 JVM 采用了折中的办法，<code>设置阈值</code>，当调用次数超过<code>默认的15</code>次JVM 为其生成代理对象，由 Native 方法调用切换为 Delegate 方法调用，来提高整体的执行性能。以为一切都很美好了，突然我们的代码发生了异常，那一起看看异常是怎么JVM异常是怎么处理吧。</p><h2 id="Java-异常处理机制"><a href="#Java-异常处理机制" class="headerlink" title="Java 异常处理机制"></a>Java 异常处理机制</h2><h3 id="Java-异常"><a href="#Java-异常" class="headerlink" title="Java 异常"></a>Java 异常</h3><p>异常处理中主要组成要素：抛出异常和捕获异常。由于 Java 中没有 goto，所以这两大要素配置共同实现程序流程的非正常转移。抛出异常可以分为两种，一种是<code>显式抛出</code>另外一种是另外一种是<code>隐式抛出</code>。显式抛出指的是我们在程序中使用 new threw 的方式抛出异常，而隐式抛出则是 Java 虚拟机执行到异常情况，无法继续抛出的异常。例如数组越界，除0等。异常操作通常分成下面三块：</p><ul><li>try 代码块：用来标记需要异常监测的代码。</li><li>catch 代码块：在异常发生后执行的后续逻辑块。在 Java 中一个 try 块后面可以跟多个 catch 代码块，用来捕捉不同的异常，发生异常后 JVM 会从上到下依次匹配异常处理代码，因此前面的 catch 块不能覆盖后面的 catch 块。</li><li>finally 代码块：在 try 和 catch 后面的代码块，用来声明一段必会执行的逻辑，它的设计初衷是用来避免因为异常跳过的没有执行的一些清理逻辑。</li></ul><p>所以正常流程下来，如果 try 中的异常没有被捕获，会抛出异常并执行 finally 。如果正常流程下来，try 中没有发生异常，而是 finally 代码中出现了异常，那 finally 只能中断并抛出异常。</p><h3 id="Java-虚拟机是如何处理异常的？"><a href="#Java-虚拟机是如何处理异常的？" class="headerlink" title="Java 虚拟机是如何处理异常的？"></a>Java 虚拟机是如何处理异常的？</h3><p>在编译生成的字节码中，每个方法都会带有一个异常表，异常表中的每一条记录代表一个异常处理器，并且由 from 指针、to 指针、target 执政以及所捕获的类型。指针的值是<code>字节码索引</code>（bytecode index，bci），已经定位字节码。其中 from 指针和 to 指针标志了该异常处理器的监控范围，例如 try 代码所覆盖的范围。target 指针则指向异常处理器的起始位置，例如 catch 代码块的起始位置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;finally!&quot;</span>);<br>    &#125;<br>&#125;<br><br>java code～～～<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> main(java.lang.<span class="hljs-keyword">String</span>[]);<br>    descriptor: ([Ljava/lang/<span class="hljs-keyword">String</span>;)V<br>    flags: ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=<span class="hljs-number">3</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: <span class="hljs-keyword">new</span>           <span class="hljs-comment">#2                  // class java/lang/RuntimeException</span><br>         <span class="hljs-number">3</span>: dup<br>         <span class="hljs-number">4</span>: ldc           <span class="hljs-comment">#3                  // String test</span><br>         <span class="hljs-number">6</span>: invokespecial <span class="hljs-comment">#4                  // Method java/lang/RuntimeException.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span><br>         <span class="hljs-number">9</span>: athrow<br>        <span class="hljs-number">10</span>: astore_1<br>        <span class="hljs-number">11</span>: aload_1<br>        <span class="hljs-number">12</span>: invokevirtual <span class="hljs-comment">#6                  // Method java/lang/Exception.printStackTrace:()V</span><br>        <span class="hljs-number">15</span>: getstatic     <span class="hljs-comment">#7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        <span class="hljs-number">18</span>: ldc           <span class="hljs-comment">#8                  // String finally!</span><br>        <span class="hljs-number">20</span>: invokevirtual <span class="hljs-comment">#9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>        <span class="hljs-number">23</span>: <span class="hljs-keyword">goto</span>          <span class="hljs-number">37</span><br>        <span class="hljs-number">26</span>: astore_2<br>        <span class="hljs-number">27</span>: getstatic     <span class="hljs-comment">#7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        <span class="hljs-number">30</span>: ldc           <span class="hljs-comment">#8                  // String finally!</span><br>        <span class="hljs-number">32</span>: invokevirtual <span class="hljs-comment">#9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>        <span class="hljs-number">35</span>: aload_2<br>        <span class="hljs-number">36</span>: athrow<br>        <span class="hljs-number">37</span>: <span class="hljs-keyword">return</span><br>      <span class="hljs-built_in">Exception</span> table:<br>         <span class="hljs-keyword">from</span>    to  target type<br>             <span class="hljs-number">0</span>    <span class="hljs-number">10</span>    <span class="hljs-number">10</span>   <span class="hljs-class"><span class="hljs-keyword">Class</span> <span class="hljs-title">java</span>/<span class="hljs-title">lang</span>/<span class="hljs-title">Exception</span></span><br><span class="hljs-class">             0    15    26   <span class="hljs-title">any</span></span><br></code></pre></td></tr></table></figure><p>上面的<code>Exception table</code>就是异常表，如果发生了异常会从异常表中招当前位置是在那个异常的返回，如果匹配到多个则从上到下一个个匹配，并跳转到对应的 target 的位置往下执行，前面提到了 target 的位置是 catch 块（异常处理器）开始的位置。在这里可以看到一个<code>0 15 26 any</code> 的异常记录。看到这个我们可能会疑惑，方法中明明只有一个try catch 块，为什么异常表中会有两条记录，而且最后一个异常类型是 any。其实这里的记录的是 finally块，从target 字节码对效应的代表执行的开始位置不难发现这是 finlly 块的位置。</p><p>从上面的字节码还能看到一个细节，就是 finally 块的代码重复了两次。finally 代码块编译比较复杂，当前版本的做法就是在分别在 try 和 catch 的代码出口添加一段 finally 的内容。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210509205200.png"></p><p>那如果在 catch 代码块中还是出现了异常的场景，异常发生的行数还是在 <code>0 15 26 any</code> 的异常记录范围，同样会匹配到 any 也就是 finally 的代码块，这样就保证了不管在什么场景发生了异常都能执行 finally 的内容了，但是如果 finally 里面发生了异常呢？那就没有办法了。finally 会中止，并抛出异常。从字节码分析的角度也符合我们前面的结论。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>接着上一篇的 Java 字节码技术，这一小节我们通过运用字节码技术，分析方法的执行过程，以及方法的静态绑定和动态绑定。以及从算法层面探索了动态绑定的实现原理也就是方法表，以及方法表的优化方案内联缓存。当然除了正常的调用方法，我们还是使用反射的方式去进行方法调用。这一小节还通过源码分析的方式深入了反射的实现细节。最后我们一起看了异常这个让程序员喜忧参半的机制，通过创建异常表来对异常的执行路径进行索引，来保证程序的执行流程。我发现在方法这块JVM 很喜欢用”表”去解决一些问题, 方法表，异常表…</p><p>昨天和一个朋友聊天，聊到所有不了解的东西都会自带一层神秘感，但是我们真正去了解它之后会发现其实也就那样，都是人能想出来的点子。真正要做的是积累，掌握向上的办法，这样我们才能见招拆招并创造属于我们的未来。</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>极客时间专栏《深入拆解Java虚拟机》JVM是如何执行方法调用的？（上）</li><li>极客时间专栏《深入拆解Java虚拟机》JVM是如何执行方法调用的？（下）</li><li>极客时间专栏《深入拆解Java虚拟机》JVM是如何实现反射的？</li><li>极客时间专栏《深入拆解Java虚拟机》JVM是如何处理异常的？</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM 基础 — Java 字节码</title>
    <link href="/2021/05/07/java-bytecode/"/>
    <url>/2021/05/07/java-bytecode/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们通常表述的 JVM 通常有三种意思，JVM 是 Java virtual machine 即 java 虚拟机的缩写，也就是我们通常所指的 JVM。JVM还是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。因此 JVM 也是图灵完备的。当然 JVM 还可以表示一个虚拟机的实例。Java 一个非常重要的特性就是和平台无关，而 JVM 是实现这一点的关键。JVM 底层使用 C 进行编写，只要平台能执行 C 语言，这也就能启动 JVM 运行 Java 程序。JVM 通过编译 Java 语言生成字节码文件，字节码文件在通过 JVM 进行解释执行。因此只要运行在不同的平台上的JVM 能拿到字节码文件，就能解释执行出相同的结果。这就是 Java 可以 “一次编译，到处执行” 的原因。 </p><p>当然并不是Java 语言是跨平台的语言，拿 C++ 举个例子，C++ 也是一门跨平台的语言，但是和 Java 语言不同的是，C++ 需要到不同的平台生成不同的文件，然后进行执行，也就是源码跨平台，而 Java 是二进制跨平台。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210507003029.png"></p><h2 id="Java-字节码技术"><a href="#Java-字节码技术" class="headerlink" title="Java 字节码技术"></a>Java 字节码技术</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java 代码通过编译生成 Java 字节码即 .class 文件，不同的 JVM 通过执行 .class 文件实现跨平台。Java bytecode 由但字节 （byte）的指令组成，理论上最多支持 256 个操作码（opencode）。实际上 Java 只用了 200 左右的操作码，还有一些操作码则保留给调试操作。操作码， 下面称为 指令 , 主要由 类型前缀 和 操作名称 两部分组成。 </p><blockquote><p>例如，’ i ‘ 前缀代表 ‘ integer ’，所以，’ iadd ‘ 很容易理解, 表示对整数执行加法运算。</p></blockquote><p>根据指令性质，主要分为 4 个大类：</p><ol><li>栈操作指令， 包括与局部变量交互的指令。</li><li>程序流程控制指令。</li><li>对象操作指令，包括方法调用指令。</li><li>算术运算以及类型转换指令。</li></ol><h3 id="获取字节码"><a href="#获取字节码" class="headerlink" title="获取字节码"></a>获取字节码</h3><p>可以使用 javap 命令来获取 class 文件中的字节码， javap 是 jdk 中内置的用于反编译字节码的工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloByteCode</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        HelloByteCode obj = <span class="hljs-keyword">new</span> HelloByteCode();<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>现使用 javac 命令编译出 .class，在使用 <code>javap -c</code> 命令编译得到字节码文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">daiwei@daiweideMacBook-Pro <span class="hljs-built_in">test</span> % javap -c HelloByteCode.class<br>Compiled from <span class="hljs-string">&quot;HelloByteCode.java&quot;</span><br>public class HelloByteCode &#123;<br>  public HelloByteCode();<br>    Code:<br>       0: aload_0<br>       1: invokespecial <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>       4: <span class="hljs-built_in">return</span><br><br>  public static void main(java.lang.String[]);<br>    Code:<br>       0: new           <span class="hljs-comment">#2                  // class HelloByteCode</span><br>       3: dup<br>       4: invokespecial <span class="hljs-comment">#3                  // Method &quot;&lt;init&gt;&quot;:()V</span><br>       7: astore_1<br>       8: getstatic     <span class="hljs-comment">#4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br>      11: ldc           <span class="hljs-comment">#5                  // String hello</span><br>      13: invokevirtual <span class="hljs-comment">#6                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>      16: <span class="hljs-built_in">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面拉出 java 的字节码清单之后，下面对其进行简单的解读</p><h3 id="解析字节码清单"><a href="#解析字节码清单" class="headerlink" title="解析字节码清单"></a>解析字节码清单</h3><p>在上面的输出信息中，第二行也就是打印出来的字节码的第一行<code>Compiled from &quot;HelloByteCode.java&quot;</code>表示我们是从 HelloByteCode这个类反编译而来的字节码文件。4～8 行是一个构造函数，总所周知，如果我们在编写代码时不编写构造函数，就会生成一个默认的构造方法，这个就是默认的构造方法。而这个构造方法里也只有一条指令就是 <code>invokespecial</code> 这个是调用父类Object 对象的构造方法即 <code>super()</code> 方法。</p><p>如果想要看到更多的信息则需要使用<code>javap -c -verbose</code> 命令输出更多信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs bash">daiwei@daiweideMacBook-Pro <span class="hljs-built_in">test</span> % javap -c -verbose HelloByteCode.class<br>Classfile /Users/daiwei/study/java-course/JVM/<span class="hljs-built_in">test</span>/HelloByteCode.class<br>  Last modified 2021-1-7; size 442 bytes<br>  MD5 checksum 8e2a795fb147ef48ba63f55886005f32<br>  Compiled from <span class="hljs-string">&quot;HelloByteCode.java&quot;</span><br>public class HelloByteCode<br>  minor version: 0<br>  major version: 52<br>  flags: ACC_PUBLIC, ACC_SUPER<br>Constant pool:<br>   <span class="hljs-comment">#1 = Methodref          #7.#16         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>   <span class="hljs-comment">#2 = Class              #17            // HelloByteCode</span><br>   <span class="hljs-comment">#3 = Methodref          #2.#16         // HelloByteCode.&quot;&lt;init&gt;&quot;:()V</span><br>   <span class="hljs-comment">#4 = Fieldref           #18.#19        // java/lang/System.out:Ljava/io/PrintStream;</span><br>   <span class="hljs-comment">#5 = String             #20            // hello</span><br>   <span class="hljs-comment">#6 = Methodref          #21.#22        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>   <span class="hljs-comment">#7 = Class              #23            // java/lang/Object</span><br>   <span class="hljs-comment">#8 = Utf8               &lt;init&gt;</span><br>   <span class="hljs-comment">#9 = Utf8               ()V</span><br>  <span class="hljs-comment">#10 = Utf8               Code</span><br>  <span class="hljs-comment">#11 = Utf8               LineNumberTable</span><br>  <span class="hljs-comment">#12 = Utf8               main</span><br>  <span class="hljs-comment">#13 = Utf8               ([Ljava/lang/String;)V</span><br>  <span class="hljs-comment">#14 = Utf8               SourceFile</span><br>  <span class="hljs-comment">#15 = Utf8               HelloByteCode.java</span><br>  <span class="hljs-comment">#16 = NameAndType        #8:#9          // &quot;&lt;init&gt;&quot;:()V</span><br>  <span class="hljs-comment">#17 = Utf8               HelloByteCode</span><br>  <span class="hljs-comment">#18 = Class              #24            // java/lang/System</span><br>  <span class="hljs-comment">#19 = NameAndType        #25:#26        // out:Ljava/io/PrintStream;</span><br>  <span class="hljs-comment">#20 = Utf8               hello</span><br>  <span class="hljs-comment">#21 = Class              #27            // java/io/PrintStream</span><br>  <span class="hljs-comment">#22 = NameAndType        #28:#29        // println:(Ljava/lang/String;)V</span><br>  <span class="hljs-comment">#23 = Utf8               java/lang/Object</span><br>  <span class="hljs-comment">#24 = Utf8               java/lang/System</span><br>  <span class="hljs-comment">#25 = Utf8               out</span><br>  <span class="hljs-comment">#26 = Utf8               Ljava/io/PrintStream;</span><br>  <span class="hljs-comment">#27 = Utf8               java/io/PrintStream</span><br>  <span class="hljs-comment">#28 = Utf8               println</span><br>  <span class="hljs-comment">#29 = Utf8               (Ljava/lang/String;)V</span><br>&#123;<br>  public HelloByteCode();<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=1, locals=1, args_size=1<br>         0: aload_0<br>         1: invokespecial <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         4: <span class="hljs-built_in">return</span><br>      LineNumberTable:<br>        line 1: 0<br><br>  public static void main(java.lang.String[]);<br>    descriptor: ([Ljava/lang/String;)V<br>    flags: ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=2, locals=2, args_size=1<br>         0: new           <span class="hljs-comment">#2                  // class HelloByteCode</span><br>         3: dup<br>         4: invokespecial <span class="hljs-comment">#3                  // Method &quot;&lt;init&gt;&quot;:()V</span><br>         7: astore_1<br>         8: getstatic     <span class="hljs-comment">#4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        11: ldc           <span class="hljs-comment">#5                  // String hello</span><br>        13: invokevirtual <span class="hljs-comment">#6                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>        16: <span class="hljs-built_in">return</span><br>      LineNumberTable:<br>        line 3: 0<br>        line 4: 8<br>        line 5: 16<br>&#125;<br>SourceFile: <span class="hljs-string">&quot;HelloByteCode.java&quot;</span><br></code></pre></td></tr></table></figure><p>这次的输出比之前一次多了不少的信息，首先是 10～39 行的常量池信息。这里记录了代码中用到的常量。40～68行是之前代码部分的字节码，这一次多了一些如 <code>descriptor, flags</code> 的信息。descriptor 是方法的描述符，flags 则是方法的访问描述符，这是个 public static 方法。第45行的 <code>stack=1, locals=1, args_size=1</code> 表示方法栈的深度为1， 本地局部变量表大小为1 ，方法的入参为1。这里有个比较有意思的地方，就是无参构造的 args_size 不为0 而是 1 ，这是因为对于构造方法需要有一个引用地址，也就是 this 的引用地址，这个可以类比反射里面<code>Method#invoke(Object obj, Object... args);</code> 第一个参数是被调用对象一样。</p><h3 id="线程栈和字节码执行模型"><a href="#线程栈和字节码执行模型" class="headerlink" title="线程栈和字节码执行模型"></a>线程栈和字节码执行模型</h3><p>JVM 是基于栈的计算机模型，每一个线程都有自己的线程栈（JVM stack）和用于存储的<code>栈帧</code>（Frame），每调用一个方法JVM都会自动创建一个栈帧，栈帧中包括<code>操作数栈</code>，<code>局部变量数组</code>和一个 <code>class 引用</code>构成，class 引用指向当前方法在运行时常量池中对应的class。</p><p>​       <img src="https://gitee.com/realDaiwei/img/raw/master/20210507003351.png"></p><p><code>局部变量数组</code> 也成为 <code>局部方法表</code>（LocalVariableTable），其中包括方法的参数和局部变量。局部变量数组长度在编译时就已经确定。和局部变量和方法形参有关，但是具体长度还要看具体每个字段占用的长度。<code>操作数栈</code>（Operand Stack）是一个 LIFO 的结构栈，通过于压入弹出进行数据操作，其大小在编译时确定。</p><p>一些操作码/指令可以将值压入操作数栈，还有一些操作码/指令从操作数栈获取操作数，并进行计算，然后再压入操作数栈。操作数栈还用于接受调用其他方法的返回值。</p><h3 id="方法体中的字节码解析"><a href="#方法体中的字节码解析" class="headerlink" title="方法体中的字节码解析"></a>方法体中的字节码解析</h3><p>在前面的几个例子当中，字节码看起来问题都不大，但是看方法体中的字节码的编号有点看不懂，也就是下面的一些字节码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">0:</span> <span class="hljs-string">new</span>           <span class="hljs-comment">#2                  // class HelloByteCode</span><br><span class="hljs-attr">3:</span> <span class="hljs-string">dup</span><br><span class="hljs-attr">4:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#3                  // Method &quot;&lt;init&gt;&quot;:()V</span><br><span class="hljs-attr">7:</span> <span class="hljs-string">astore_1</span><br><span class="hljs-attr">8:</span> <span class="hljs-string">return</span><br></code></pre></td></tr></table></figure><p>前面的一排数字是<code>指令集数组中的索引</code> new 操作占用一个槽位，并且 new 指令需要消耗两个操作数，所以 dup 指令是从<code>3</code>开始的，<code>dup</code> 指令不需要操作数，所以只占一个槽位。位于<code>4</code>号槽位中的 <code>invokespecial</code> 指令同样需要消耗两个操作数，所以 astore_1 从7号槽位开始。<code>astore_1</code>意思是将栈顶元素存入局部变量表1号槽位，不需要操作数，所以 <code>return</code> 位于<code>8</code>号槽位。<img src="https://gitee.com/realDaiwei/img/raw/master/20210507003454.png"></p><p>通过操作码/指令对照表并换算十六进制（HEX）表示形式之后。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210507003612.png"></p><p>也就是我们通过十六进制打开.class 文件所能看到的数据片段了。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210507003708.png"></p><h3 id="对象初始化指令"><a href="#对象初始化指令" class="headerlink" title="对象初始化指令"></a>对象初始化指令</h3><p>new 是Java 的关键字，但是在字节码中，也有一个指令 new 但是整个 new 的逻辑，可以分为以下的字节码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">0: new           <span class="hljs-comment">#2                  // class HelloByteCode</span><br>3: dup<br>4: invokespecial <span class="hljs-comment">#3                  // Method &quot;&lt;init&gt;&quot;:()V</span><br></code></pre></td></tr></table></figure><p>new 指令和 invokespecial 指令在一起，那么这段字节码一定是在实例一个对象。那为什么实例一个对象不是一个指令而是三个指令呢？</p><ul><li><code>new</code> 指令只是创建对象，而并没有调用构造函数。</li><li><code>dup</code> 复制栈顶元素。这里为什么要复制栈顶元素呢？因为构造函数不会返回实例对象引用，所以没用dup指令，操作数栈是空的，初始化之后就会有问题。</li><li><code>invokespecial</code> 字面意思，调用特殊的方法，在这里就是调用构造函数。</li></ul><p>完成了上面的代码后一般会执行的指令会有下面几种：</p><ul><li><code>astore &#123;N&#125;</code> 或者 <code>astore_&#123;N&#125;</code> 给局部变量赋值，其中{N}代表局部变量表中的位置。</li><li><code>putfield</code>  将值赋给实例。</li><li><code>putstatic</code> 将实例赋给静态字段。</li></ul><p>这个时候如果没有那个 dup 的引用的话这里就没有就没法进行出栈赋值操作。</p><p>在调用构造函数之前，还会执行一个类似 <init> 的方法。但是 <clinit> 并不能被直接调用，而是由 <code>new</code>，<code>getstatic</code>，<code>putstatic</code> 或 <code>invokestatic</code> 触发。</p><p>也就是说，在实例化一个对象，访问静态字段或一些静态方法，就会触发这个类的静态初始化方法。</p><h3 id="栈内存操作指令"><a href="#栈内存操作指令" class="headerlink" title="栈内存操作指令"></a>栈内存操作指令</h3><p>有很多指令可以操作方法栈。压入栈数据和从数据栈弹出数据等一些基础的操作，有 <code>dup</code> 复制栈顶元素，和 <code>pop</code> 弹出栈顶元素的指令。还有一些复杂点的指令例如：</p><ul><li><code>swap</code> ：交换两个栈顶元素。</li><li><code>dup_x1</code>：复制栈顶的值, 并将复制的值插入到最上面2个值的下方。</li><li><code>dup2_x1</code>：制栈顶 1个64位/或2个32位的值, 并将复制的值按照原始顺序，插入原始值下面一个32位值的下方。 配合使用可用于交换两个64位数据的位置。</li></ul><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210507003819.png"></p><blockquote><p>数据类型分组（1代表32 位元素， 2代表64位元素）</p></blockquote><table><thead><tr><th>实际类型</th><th>JVM 计算类型</th><th>类型分组</th></tr></thead><tbody><tr><td>boolean</td><td>int</td><td>1</td></tr><tr><td>byte</td><td>int</td><td>1</td></tr><tr><td>char</td><td>int</td><td>1</td></tr><tr><td>short</td><td>int</td><td>1</td></tr><tr><td>int</td><td>int</td><td>1</td></tr><tr><td>float</td><td>float</td><td>1</td></tr><tr><td>refrence</td><td>refrence</td><td>1</td></tr><tr><td>retrunAddress</td><td>retrunAddress</td><td>1</td></tr><tr><td>long</td><td>long</td><td>2</td></tr><tr><td>double</td><td>double</td><td>2</td></tr></tbody></table><blockquote><p>⚠️ 理解这些字节码的诀窍在于</p><p>给局部变量赋值时，需要使用相应的指令来进行 <code>store</code> ，如 <code>astore_1</code>、 <code>store</code> 类的指令都会删除栈顶值。 相应的 load 指令则会将值从局部变量表压入操作数栈，但并不会删除局部变量中的值。</p></blockquote><h3 id="算术运算指令与类型转换指令"><a href="#算术运算指令与类型转换指令" class="headerlink" title="算术运算指令与类型转换指令"></a>算术运算指令与类型转换指令</h3><p>Java 字节码有很多的指令可以执行算术运算。对于所有数值类型（<code>int</code>, <code>long</code>, <code>double</code>, <code>float</code>）都有各自的加、减、乘、除、取反指令。当然boolean、byte、short、char 等都是当 int 类型处理。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210507003904.png"></p><p>在java 是一个强类型的语言，如果类型不匹配需要进行类型转换，如果<code>int</code>需要转换为 <code>double</code> 会调用 i2d 指令进行类型转换。</p><p><img src="https://gitee.com/realDaiwei/img/raw/master/20210507003936.png"></p><p>唯一一个不需要将数值load到操作数栈的指令是 <code>iinc</code>，他可以直接对 <code>LocalVariableTable</code> 中的数值进行运算。其他的操作均使用操作数栈进行运算。</p><blockquote><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-7.html">操作码对照表</a></p></blockquote><h3 id="方法调用指令"><a href="#方法调用指令" class="headerlink" title="方法调用指令"></a>方法调用指令</h3><p>在前面已经到了 <code>invokespceial</code> 调用构造方法，那调用其他不同类型的方法用什么指令呢？</p><ul><li><code>invokestatic</code> 调用静态方法，也是几个调用指令当中最快的。</li><li><code>invokespeical</code> 可以用来调用构造方法，同时这个指令也可以用来调用 <code>private</code> 方法 和可见的 <code>super</code> 中的方法。</li><li><code>invokevirtual</code> 可以调用目标对象的实例方法。</li><li><code>invokeinterface</code> 用于调用目标接口方法，可以在运行时搜索一个实现这个接口的对象，并找出合适的方法进行调用。</li><li><code>invokedynamic</code> jdk 1.7 新加入的一个虚拟机指令，前四条指令的分派逻辑在虚拟机内部是固定的，<code>invokedynamic</code> 它允许应用代码来确定具体执行的是那个方法，从而到达对动态语言的支持。Lambda 表达式基于 <code>invokedynamic</code> 实现。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个部分简单介绍了Java 字节码，从开篇介绍怎么拉取一个 Java 代码的字节码开始，逐步复习了jvm 方法栈的栈帧，也就是 字节码的执行环境，这个部分由一个操作数栈，一个本地局部变量表和一个class 引用构成。通过分析一些常见的字节码例如构造函数和一些简单的方法体，熟悉了解了一些基本的操作码，例如 dup、pop、istore、iload 等指令。其中理解的诀窍在于 给局部变量赋值时，需要使用相应的指令来进行 <code>store</code> ，如 <code>astore_1</code>、 <code>store</code> 类的指令都会删除栈顶值。 相应的 load 指令则会将值从局部变量表压入操作数栈，但并不会删除局部变量中的值。当然在这些基本的操作指令中还包括一些类型转换的指令和方法的调用的指令，方法调用到后面会有专门梳理。</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>Java 字节码技术：不积细流，无以成江河。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java知识结构梳理</tag>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcodes 习题汇总</title>
    <link href="/2021/03/28/leetcodes/"/>
    <url>/2021/03/28/leetcodes/</url>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-习题汇总"><a href="#LeetCode-习题汇总" class="headerlink" title="LeetCode 习题汇总"></a>LeetCode 习题汇总</h2><h5 id="数组、链表"><a href="#数组、链表" class="headerlink" title="数组、链表"></a>数组、链表</h5><ol><li><a href="https://leetcode-cn.com/problems/container-with-most-water/">盛水最多的容器</a></li><li><a href="https://leetcode-cn.com/problems/move-zeroes/">移动零</a></li><li><a href="https://leetcode-cn.com/problems/climbing-stairs/">爬楼梯</a></li><li><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></li><li><a href="https://leetcode-cn.com/problems/3sum/">三数之和</a></li><li><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">删除排序数组中的重复项</a></li><li><a href="https://leetcode-cn.com/problems/rotate-array/">旋转数组</a></li><li><a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></li><li><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">两两交换链表中的节点</a></li><li><a href="https://leetcode-cn.com/problems/linked-list-cycle/">环形链表</a></li><li><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">环形链表2</a></li><li><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">K 个一组翻转链表</a></li><li><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">合并两个有序链表</a></li></ol><h5 id="栈、队列、优先队列、双端队列"><a href="#栈、队列、优先队列、双端队列" class="headerlink" title="栈、队列、优先队列、双端队列"></a>栈、队列、优先队列、双端队列</h5><ol><li><a href="https://leetcode-cn.com/problems/valid-parentheses/">有效的括号</a></li><li><a href="https://leetcode-cn.com/problems/min-stack/">最小栈</a></li><li><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">柱状图中的最大矩形</a></li><li><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">滑动窗口最大值</a></li><li><a href="https://leetcode-cn.com/problems/trapping-rain-water/">接雨水</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每天一个开发小技巧</title>
    <link href="/2021/03/11/daily-tips/"/>
    <url>/2021/03/11/daily-tips/</url>
    
    <content type="html"><![CDATA[<h2 id="尬聊"><a href="#尬聊" class="headerlink" title="尬聊"></a>尬聊</h2><p>在日常开发中，不免会遇到自己不熟悉的地方，但是很多时候我们查完用完然后就是技能归还。如果能在这里记录整理收集，那也是一笔宝贵的知识力量。可能有的小技巧并没有太多的实用价值，也有可能有一些奇奇怪怪的奇技淫巧，但这些代码里的精彩的碎片。日拱一卒，积少成多，相信时间的力量。</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul><li>Mac校验文件SHA</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">shasum -a 256 <span class="hljs-variable">$&#123;file&#125;</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://jaywcjlove.gitee.io/linux-command/c/tcpdump.html">Linux 命令行抓包</a></li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">tcpdump -D <span class="hljs-comment"># 当前可以监听的网卡</span><br></code></pre></td></tr></table></figure><ul><li>git tag 重命名</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs zsh">daiwei@daiweideMacBook-Pro ~ % git tag [new_name] [old_name]  <span class="hljs-comment"># 复制原有的tag</span><br>daiwei@daiweideMacBook-Pro ~ % git tag -d [old_name] <span class="hljs-comment"># 删除原有tag</span><br>daiwei@daiweideMacBook-Pro ~ % git push origin :refs/tag/v1.0 <span class="hljs-comment"># 删除远程 tag</span><br>daiwei@daiweideMacBook-Pro ~ % git push --tag <span class="hljs-comment">#推送本地新的tag</span><br></code></pre></td></tr></table></figure><ul><li>reflections 反射工具包，内置反射相关操作，简化开发</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.reflections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>reflections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>不使用 springboot-parent 创建 springboot 项目，方便清晰系统整体继承结构。只需要在依赖的父pom 的 dependencyManagement 中添加 spring-boot-dependencies 依赖即可。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>三个有意思的在线的 playgroud </p><ul><li><p>redis 在线的web shell <a href="https://try.redis.io/">try redis</a> ，可以执行一些 redis cmds。</p></li><li><p>docker 的在线 <a href="https://labs.play-with-docker.com/">docker lab</a>，登录后提供一个时长四个小时的 session，过期需要重新登录，登录需要 docker hub 的账号，在 session 中可以操作多个docker实例，正如这个 lab 的名字一样～paly with docker。</p></li><li><p>git 在线学习网站 <a href="https://learngitbranching.js.org/?locale=zh_CN">learn-git-branch</a>，在这个网站通过完成一个个任务学习命令操作可视化的git节点到达学习 git 的目的，就很nice～</p></li></ul></li><li><p>.gitignore 文件不生效的问题，清理 git 的本地的缓存，然后重新 add commit 就可以了</p></li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs zsh">daiwei@daiweideMacBook-Pro ~ % git rm -r --cached .<br>daiwei@daiweideMacBook-Pro ~ % git add .<br>daiwei@daiweideMacBook-Pro ~ % git commit -m<span class="hljs-string">&#x27;update msg&#x27;</span><br>daiwei@daiweideMacBook-Pro ~ % git push origin main<br></code></pre></td></tr></table></figure><ul><li><p>linux 查看端口，每次都要查，每次都记不住😫</p><p>netstat 命令 用于查看 tcp 和 udp 的端口占用情况</p><ul><li>-t (tcp) 仅仅显示 tcp 相关</li><li>-u(udp) 仅仅显示 udp 相关</li><li>-n 拒绝显示别名，能显示数字的全部转化为数字</li><li>-l 仅列出在Listen(监听)的服务状态</li><li>-p 显示建立相关链接的程序名</li></ul><p>所以我全都要 所以命令就是 -nptul (牛批吐了)😏</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">netstat -nptul | grep &lt;port&gt;<br></code></pre></td></tr></table></figure><p> <strong>注意这个命令 mac 上就是另外一套参数了，mac 上可以使用 lsof - i:port</strong></p></li><li><p>redis 中 lua 脚本的编写的基本方法</p><p>从 redis 2.6.0 开始内置支持 lua 脚本，可以通过 lua 脚本实现执行多条命令的原子性，典型的使用场景有 分布式锁 和 分布式扣减等。基本的操作命令如下</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">127.0.0.1:6379&gt; EVAL script numkeys key [key...] arg [arg...]<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>script</td><td>脚本内容</td></tr><tr><td>numkeys</td><td>key 的个数（只是 key 的个数和 argv 没有关系）</td></tr><tr><td>key [key…]</td><td>key列表，键名通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)</td></tr><tr><td>arg [arg…]</td><td>参数列表，参数通过全局变量 ARGV 数组，用 1 为基址的形式访问( ARGV[1] ， ARGV[2] ，以此类推)</td></tr></tbody></table><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs zsh">127.0.0.1:6379&gt; <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;return &#123;KEYS[1], KEYS[2], ARGV[1], ARGV[2], ARGV[3]&#125;&quot;</span> 2 key1 key2 avg1 avg2 avg3<br><span class="hljs-comment">## 输出</span><br>1) <span class="hljs-string">&quot;key1&quot;</span><br>2) <span class="hljs-string">&quot;key2&quot;</span><br>3) <span class="hljs-string">&quot;avg1&quot;</span><br>4) <span class="hljs-string">&quot;avg2&quot;</span><br>5) <span class="hljs-string">&quot;avg3&quot;</span><br></code></pre></td></tr></table></figure><p>还可以通过 <strong>script load</strong> 命令缓存命令，并通过 <strong>evalsha</strong> 命令执行</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs zsh">SCRIPT LOAD script <span class="hljs-comment"># 缓存 lua 脚本</span><br>EVALSHA sha1 numkeys key [key ...] arg [arg ...]  <span class="hljs-comment"># 执行 lua 脚本</span><br></code></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs zsh">script load <span class="hljs-string">&quot;return &#123;KEYS[1], KEYS[2], ARGV[1], ARGV[2], ARGV[3]&#125;&quot;</span><br><span class="hljs-string">&quot;0e8e5b92bfe818cf5eb29a03465e71bd8ef3e95a&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs zsh">127.0.0.1:6379&gt; evalsha 0e8e5b92bfe818cf5eb29a03465e71bd8ef3e95a 2 hello word arg1 arg2 arg3<br>1) <span class="hljs-string">&quot;hello&quot;</span><br>2) <span class="hljs-string">&quot;word&quot;</span><br>3) <span class="hljs-string">&quot;arg1&quot;</span><br>4) <span class="hljs-string">&quot;arg2&quot;</span><br>5) <span class="hljs-string">&quot;arg3&quot;</span><br></code></pre></td></tr></table></figure><p>几个常用的 redis lua 脚本</p><p>​    分布式锁</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--lock</span><br><span class="hljs-keyword">if</span> redis.call(<span class="hljs-string">&#x27;setnx&#x27;</span>, KEYS[<span class="hljs-number">1</span>], ARGV[<span class="hljs-number">1</span>]) == <span class="hljs-number">1</span> <span class="hljs-keyword">then</span> redis.call(<span class="hljs-string">&#x27;expire&#x27;</span>, KEYS[<span class="hljs-number">1</span>], ARGV[<span class="hljs-number">2</span>]) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;false&#x27;</span> <span class="hljs-keyword">end</span><br><span class="hljs-comment">-- unlock</span><br><span class="hljs-keyword">if</span> redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>] <span class="hljs-keyword">then</span> redis.call(<span class="hljs-string">&#x27;del&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) <span class="hljs-keyword">end</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;true&#x27;</span><br></code></pre></td></tr></table></figure><p>​    分布式计数器</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> redis.call(<span class="hljs-string">&#x27;EXISTS&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> redis.call(<span class="hljs-string">&#x27;GET&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) &gt; ARGV[<span class="hljs-number">1</span>] <span class="hljs-keyword">then</span> redis.call(<span class="hljs-string">&#x27;decr&#x27;</span>, KEYS[<span class="hljs-number">1</span>])  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-keyword">else</span>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;false&#x27;</span> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>100w数据插入实现与思考</title>
    <link href="/2021/03/07/100w-data-insert/"/>
    <url>/2021/03/07/100w-data-insert/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是学习中遇到的一个题目，往一个表中插入100w条数据，看到这个题目的时候人是懵逼的。因为目前公司线上最大的表记录不过100w出头，每次做数据清洗或者数据迁移的时候一个通宵都不一定能跑完，那么插入100w 又怎么会快的起来呢？更何况老师问是否能把性能优化到 10s 之内呢。。</p><h3 id="思维爆炸"><a href="#思维爆炸" class="headerlink" title="思维爆炸"></a>思维爆炸</h3><p>只要思想不滑坡，办法总比方法多。老师既然问了那这个问题肯定是有解的，如果脑暴分析下可以得到下面的一些信息线索。</p><ul><li><p><strong>数据库优化主要分以下三部分</strong></p><ul><li><strong>数据库端参数优化</strong></li><li><strong>sql 优化</strong></li><li><strong>表结构优化</strong></li></ul></li><li><p>影响数据库吞吐量的因素</p><ul><li>单个事务大小</li><li>redolog写入情况和脏页数量</li><li>数据库连接池空闲情况和一些相关的buffer</li><li>索引</li><li>数据库实例性能</li></ul></li><li><p>java 代码的性能因素</p><ul><li>封装越小 速度越快</li><li>多线程</li><li>数据库连接池</li></ul></li><li><p>运行环境因素</p><ul><li>cpu</li><li>io</li><li>system</li></ul></li></ul><p>以上这些是我能想到的一些影响的方面，和可以针对优化的点。本次测试基本上都在我自己的 mbp 上跑，所以<strong>运行环境这个条件变量基本是控制不变</strong>的。</p><p>根据上面的一些因素可以得到一些可行的操作方案</p><ol><li>数据库连接工具执行批量sql</li><li>基本的循环插入</li><li>拼接批量 sql</li><li>使用preparedStatement + queryBatch</li><li>多线程提升性能</li></ol><h3 id="走两步试试"><a href="#走两步试试" class="headerlink" title="走两步试试"></a>走两步试试</h3><h4 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h4><blockquote><p>docker 默认配置 + mysql5.7</p></blockquote><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs zsh">docker pull mysql:5.7<br>docker run --name mysql-test -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7<br></code></pre></td></tr></table></figure><h4 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_order_test_1(<br>`id` <span class="hljs-type">int</span> auto_increment,<br>`good_id` <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>`user_id` <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span>, <br>`good_status` tinyint <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;1&#x27;</span>,<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-keyword">primary</span> key(id)<br>) engine<span class="hljs-operator">=</span>innodb<br></code></pre></td></tr></table></figure><h4 id="数据库连接工具执行批量sql"><a href="#数据库连接工具执行批量sql" class="headerlink" title="数据库连接工具执行批量sql"></a>数据库连接工具执行批量sql</h4><p>从数据库中反向导出数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">LOCK TABLES `tb_order_test_1` WRITE;<br><span class="hljs-comment">/*!40000 ALTER TABLE `tb_order_test_1` DISABLE KEYS */</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_order_test_1` (`id`, `good_id`, `user_id`, `good_status`, `username`)<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;daiwei&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;daiwei&#x27;</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;daiwei&#x27;</span>),<br>(<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;daiwei&#x27;</span>),<br>(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;daiwei&#x27;</span>),<br>..... <span class="hljs-number">100</span>w .....<br>(<span class="hljs-number">999997</span>,<span class="hljs-number">999996</span>,<span class="hljs-number">999996</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;daiwei&#x27;</span>),<br>(<span class="hljs-number">999998</span>,<span class="hljs-number">999997</span>,<span class="hljs-number">999997</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;daiwei&#x27;</span>),<br>(<span class="hljs-number">999999</span>,<span class="hljs-number">999998</span>,<span class="hljs-number">999998</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;daiwei&#x27;</span>),<br>(<span class="hljs-number">1000000</span>,<span class="hljs-number">999999</span>,<span class="hljs-number">999999</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;daiwei&#x27;</span>);<br><br><span class="hljs-comment">/*!40000 ALTER TABLE `tb_order_test_1` ENABLE KEYS */</span>;<br>UNLOCK TABLES;<br></code></pre></td></tr></table></figure><p>这里导出数据可以发现两个问题，首先sql 的存储的文件是批量插入的，其次在操作的过程中，表是锁定状态的。</p><p>最终手动🙈掐表测100w 的数据导入大概需要 7.5 秒。</p><h4 id="基础的循环操作插入操作"><a href="#基础的循环操作插入操作" class="headerlink" title="基础的循环操作插入操作"></a>基础的循环操作插入操作</h4><p>这个最基本最简单的循环插入，明显是不可能会有较高的插入性能的，但是我就是想知道最慢着要多久🤤。这最基本的就不用那些ORM 框架了就直接使用 jdbc 操作了，封装越高速度也就越慢。同时稍微控制下事务，这种不考虑大事务的前提下，减少事务提交，一次提交。大量数据的插入会影响到数据页导致页分裂，也会拖慢整体的时间，所以整个测试过程中，不额外创建索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertByLoop</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>  Connection conn = JdbcUtil.getConnFromHikari();<br>  PreparedStatement stat = <span class="hljs-keyword">null</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>      String sql = <span class="hljs-string">&quot;insert into tb_order_test_1(good_id, user_id, good_status, username) values (?, ?, ?, ?)&quot;</span>;<br>      conn.setAutoCommit(<span class="hljs-keyword">false</span>);<br>      stat = conn.prepareStatement(sql);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3000</span>; i++) &#123;<br>          stat.setLong(<span class="hljs-number">1</span>, i);<br>          stat.setLong(<span class="hljs-number">2</span>, i);<br>          stat.setInt(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br>          stat.setString(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;daiwei&quot;</span>);<br>          stat.execute();<br>        &#125;<br>      conn.commit();<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>      throwables.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>      JdbcUtil.release(conn, stat, <span class="hljs-keyword">null</span>);<br>    &#125;<br>  System.out.println(System.currentTimeMillis() - start);<br>&#125;<br></code></pre></td></tr></table></figure><p>1w条数据插入耗时 24015 ms，插入的数据量和插入时间是线性相关的，所以就不过多的浪费时间了。。。🤨</p><h4 id="jdbc-batch-批处理"><a href="#jdbc-batch-批处理" class="headerlink" title="jdbc batch 批处理"></a>jdbc batch 批处理</h4><p>这个版本的操作相较于上面的一种，最大的提升就是用了批处理操作。在批量插入上性能能有一定的提升，但是提升效果不是很大。1w 数据量 11358ms。<strong>但是这里有一个参数rewriteBatchedStatements=true</strong>，加上这个参数允许将批量处理的 sql 进行重写，来提高批处理性能，相当于魔改了。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSqlBatch</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>  Connection conn = JdbcUtil.getConnFromHikari();<br>  PreparedStatement stat = <span class="hljs-keyword">null</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>      String sql = <span class="hljs-string">&quot;insert into tb_order_test_1(good_id, user_id, good_status, username) values (?, ?, ?, ?)&quot;</span>;<br>      conn.setAutoCommit(<span class="hljs-keyword">false</span>);<br>      stat = conn.prepareStatement(sql);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50000</span>; i++) &#123;<br>          stat.setLong(<span class="hljs-number">1</span>, i);<br>          stat.setLong(<span class="hljs-number">2</span>, i);<br>          stat.setInt(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br>          stat.setString(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;daiwei&quot;</span>);<br>          stat.addBatch();<br>        &#125;<br>      stat.executeBatch();<br>      conn.commit();<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>      throwables.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      JdbcUtil.release(conn, stat, <span class="hljs-keyword">null</span>);<br>    &#125;<br>  System.out.println(System.currentTimeMillis() - start);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/test?rewriteBatchedStatements=true</span><br></code></pre></td></tr></table></figure><p>添加参数之后，batch insert 的性能有极大的提高。100w 的数据量 8775ms 就操作完成。</p><h4 id="拼接sql-批处理"><a href="#拼接sql-批处理" class="headerlink" title="拼接sql + 批处理"></a>拼接sql + 批处理</h4><p>在不开启rewriteBatchedStatements = true 的情况下，如果我自己手动拼接sql 减少 jdbc 的封装，速度是否能在往上提升呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertByBatch</span><span class="hljs-params">()</span> </span>&#123;<br>  Connection conn = JdbcUtil.getConnFromHikari();<br>    Statement stat = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>    <span class="hljs-keyword">try</span> &#123;<br>      stat = conn.createStatement();<br>      String sql;<br>      StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;insert into tb_order_test_1(good_id, user_id, good_status, username) values&quot;</span>);<br>      conn.setAutoCommit(<span class="hljs-keyword">false</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1000</span>; j++) &#123;<br>              sb.append(<span class="hljs-string">&quot;(&quot;</span> + i +<span class="hljs-string">&quot; , &quot;</span> + j +<span class="hljs-string">&quot;, 1 , &#x27;daiwei&#x27;),&quot;</span>);<br>            &#125;<br>          sql = sb.deleteCharAt(sb.length() - <span class="hljs-number">1</span>).toString();<br>          stat.addBatch(sql);<br>          sb.delete(<span class="hljs-number">75</span>, sb.length());<br>        &#125;<br>      stat.executeBatch();<br>      conn.commit();<br>      System.out.println(System.currentTimeMillis() - start);<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>      throwables.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      JdbcUtil.release(conn, stat, <span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方案跑下来，优化效果还是比较明显的，100w的数据插入的时间大概在 5s ～6s 这个区间。</p><p>这个方案的小缺点是事务分开的整体的数据插入不是原子性的。</p><h4 id="多线程-拼接sql-批处理"><a href="#多线程-拼接sql-批处理" class="headerlink" title="多线程 + 拼接sql + 批处理"></a>多线程 + 拼接sql + 批处理</h4><p>单线程跑下来性能都已经提升这么明显了，那多线程。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertConcurBatch</span><span class="hljs-params">()</span> </span>&#123;<br>  ExecutorService executor = Executors.newFixedThreadPool(<span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>  CyclicBarrier cyclicBarrier = <span class="hljs-keyword">new</span> CyclicBarrier(<span class="hljs-number">4</span>, () -&gt; &#123;<br>      System.out.println(System.currentTimeMillis() - start);<br>      executor.shutdown();<br>    &#125;);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>      executor.execute(() -&gt; &#123;<br>          insertByBatch(<span class="hljs-number">250</span>);<br>          <span class="hljs-keyword">try</span> &#123;<br>              cyclicBarrier.await();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>              e.printStackTrace();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertByBatch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>  Connection conn = JdbcUtil.getConnFromHikari();<br>    Statement stat = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>    <span class="hljs-keyword">try</span> &#123;<br>      stat = conn.createStatement();<br>      String sql;<br>      StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;insert into tb_order_test_1(good_id, user_id, good_status, username) values&quot;</span>);<br>      conn.setAutoCommit(<span class="hljs-keyword">false</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1000</span>; j++) &#123;<br>              sb.append(<span class="hljs-string">&quot;(&quot;</span> + i +<span class="hljs-string">&quot; , &quot;</span> + j +<span class="hljs-string">&quot;, 1 , &#x27;daiwei&#x27;),&quot;</span>);<br>            &#125;<br>          sql = sb.deleteCharAt(sb.length() - <span class="hljs-number">1</span>).toString();<br>          stat.addBatch(sql);<br>          sb.delete(<span class="hljs-number">75</span>, sb.length());<br>        &#125;<br>      stat.executeBatch();<br>      conn.commit();<br>      System.out.println(System.currentTimeMillis() - start);<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>      throwables.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      JdbcUtil.release(conn, stat, <span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>果然发挥多线程的性能优势，整体性能优能往上提升一点点。</p><h3 id="泥巴路上走一走"><a href="#泥巴路上走一走" class="headerlink" title="泥巴路上走一走"></a>泥巴路上走一走</h3><p>实际生产环境的话，并不会有几个表只有 几个字段，多是字段20+ ，所以如果字段多上去，插入性能是否会受到影响？如此便有了下面的测试</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_order_test` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `good_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `good_status` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1&#x27;</span>,<br>  `field_4` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_5` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_6` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_7` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_8` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_9` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_10` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_11` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_12` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_13` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_14` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_15` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_16` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_17` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_18` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_19` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_20` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_21` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_22` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_23` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_24` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_25` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_26` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_27` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_28` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_29` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `field_30` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">5214001</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>latin1;<br></code></pre></td></tr></table></figure><p>测试代码的话这里用的还是 多线程 + 拼接sql + 批处理 的 pro 版本，果然这次的测试的速度有很明显的下降 100w 的插入时间 到了 19866ms，我的电脑是 8 核的，本着充分利用系统资源和数据库并发资源的原则。最终的 100w 时间到了 18080ms。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在这个场景中有很多的环境因素：mysql数据库、sql语句和 java代码等多个方面，其中的任何一个部分出现瓶颈，都会拖累整体的性能，但是如果换个角度去看这个问题。如果我们每个部分的性能都能充分发挥整体的性能也相应提高。本次的优化过程从 sql部分，编码技巧到表结构优化去尽可能提升100w数据的插入速度。这里漏了一个角度，就是调整mysql 的参数去优化，在mysql 写入过程中有 WAL 机制，如果这里调大 redolog buf 尽可能少的减少 redolog 的 刷脏页操作，是否也能提升写入的性能呢？🤔，最后下面是本次测试结果表格</p><table><thead><tr><th>插入方式</th><th>1w</th><th>10w</th><th>100W</th></tr></thead><tbody><tr><td>数据库工具导入</td><td>-</td><td>-</td><td>7500ms</td></tr><tr><td>单个事务循环插入</td><td>24015ms</td><td>-</td><td>-</td></tr><tr><td>单个事务batch批处理</td><td>11358ms</td><td>-</td><td>-</td></tr><tr><td>魔改 batch <br />（rewriteBatchedStatements）</td><td>689ms</td><td>1562ms</td><td>8775ms</td></tr><tr><td>拼接sql + 批处理</td><td>105ms</td><td>992ms</td><td>5302ms</td></tr><tr><td>多线程 + 拼接sql + 批处理</td><td>-</td><td>-</td><td>4314ms</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>随笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>jdbc</tag>
      
      <tag>实操</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
